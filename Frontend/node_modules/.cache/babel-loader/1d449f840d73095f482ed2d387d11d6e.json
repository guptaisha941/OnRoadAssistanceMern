{"ast":null,"code":"/**\n * @module ol/resolutionconstraint\n */\nimport { linearFindNearest } from './array.js';\nimport { clamp } from './math.js';\n\n/**\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\n */\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var z = linearFindNearest(resolutions, resolution, direction);\n        z = clamp(z + delta, 0, resolutions.length - 1);\n        var index = Math.floor(z);\n        if (z != index && index < resolutions.length - 1) {\n          var power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var offset = -direction / 2 + 0.5;\n        var oldLevel = Math.floor(Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        var newLevel = Math.max(oldLevel + delta, 0);\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"names":["linearFindNearest","clamp","createSnapToResolutions","resolutions","resolution","delta","direction","undefined","z","length","index","Math","floor","power","pow","createSnapToPower","maxResolution","opt_maxLevel","offset","oldLevel","log","newLevel","max","min"],"sources":["../../src/ol/resolutionconstraint.js"],"sourcesContent":["/**\n * @module ol/resolutionconstraint\n */\nimport {linearFindNearest} from './array.js';\nimport {clamp} from './math.js';\n\n\n/**\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\n */\n\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        let z = linearFindNearest(resolutions, resolution, direction);\n        z = clamp(z + delta, 0, resolutions.length - 1);\n        const index = Math.floor(z);\n        if (z != index && index < resolutions.length - 1) {\n          const power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        const offset = -direction / 2 + 0.5;\n        const oldLevel = Math.floor(\n          Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        let newLevel = Math.max(oldLevel + delta, 0);\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    });\n}\n"],"mappings":"AAAA;;;AAGA,SAAQA,iBAAiB,QAAO,YAAY;AAC5C,SAAQC,KAAK,QAAO,WAAW;;;;;;;;;;AAY/B,OAAO,SAASC,uBAAuBA,CAACC,WAAW,EAAE;EACnD;;;;;;;IAOE,UAASC,UAAU,EAAEC,KAAK,EAAEC,SAAS,EAAE;MACrC,IAAIF,UAAU,KAAKG,SAAS,EAAE;QAC5B,IAAIC,CAAC,GAAGR,iBAAiB,CAACG,WAAW,EAAEC,UAAU,EAAEE,SAAS,CAAC;QAC7DE,CAAC,GAAGP,KAAK,CAACO,CAAC,GAAGH,KAAK,EAAE,CAAC,EAAEF,WAAW,CAACM,MAAM,GAAG,CAAC,CAAC;QAC/C,IAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAC;QAC3B,IAAIA,CAAC,IAAIE,KAAK,IAAIA,KAAK,GAAGP,WAAW,CAACM,MAAM,GAAG,CAAC,EAAE;UAChD,IAAMI,KAAK,GAAGV,WAAW,CAACO,KAAK,CAAC,GAAGP,WAAW,CAACO,KAAK,GAAG,CAAC,CAAC;UACzD,OAAOP,WAAW,CAACO,KAAK,CAAC,GAAGC,IAAI,CAACG,GAAG,CAACD,KAAK,EAAEL,CAAC,GAAGE,KAAK,CAAC;SACvD,MAAM;UACL,OAAOP,WAAW,CAACO,KAAK,CAAC;;OAE5B,MAAM;QACL,OAAOH,SAAS;;;EAEnB;;;;;;;;;AAWL,OAAO,SAASQ,iBAAiBA,CAACF,KAAK,EAAEG,aAAa,EAAEC,YAAY,EAAE;EACpE;;;;;;;IAOE,UAASb,UAAU,EAAEC,KAAK,EAAEC,SAAS,EAAE;MACrC,IAAIF,UAAU,KAAKG,SAAS,EAAE;QAC5B,IAAMW,MAAM,GAAG,CAACZ,SAAS,GAAG,CAAC,GAAG,GAAG;QACnC,IAAMa,QAAQ,GAAGR,IAAI,CAACC,KAAK,CACzBD,IAAI,CAACS,GAAG,CAACJ,aAAa,GAAGZ,UAAU,CAAC,GAAGO,IAAI,CAACS,GAAG,CAACP,KAAK,CAAC,GAAGK,MAAM,CAAC;QAClE,IAAIG,QAAQ,GAAGV,IAAI,CAACW,GAAG,CAACH,QAAQ,GAAGd,KAAK,EAAE,CAAC,CAAC;QAC5C,IAAIY,YAAY,KAAKV,SAAS,EAAE;UAC9Bc,QAAQ,GAAGV,IAAI,CAACY,GAAG,CAACF,QAAQ,EAAEJ,YAAY,CAAC;;QAE7C,OAAOD,aAAa,GAAGL,IAAI,CAACG,GAAG,CAACD,KAAK,EAAEQ,QAAQ,CAAC;OACjD,MAAM;QACL,OAAOd,SAAS;;;EAEnB"},"metadata":{},"sourceType":"module"}