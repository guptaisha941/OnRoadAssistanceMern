{"ast":null,"code":"var _ol_obj_ = {};\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n *\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\n_ol_obj_.assign = typeof Object.assign === 'function' ? Object.assign : function (target, var_sources) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  var output = Object(target);\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments[i];\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n};\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\n_ol_obj_.clear = function (object) {\n  for (var property in object) {\n    delete object[property];\n  }\n};\n\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\n_ol_obj_.getValues = function (object) {\n  var values = [];\n  for (var property in object) {\n    values.push(object[property]);\n  }\n  return values;\n};\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\n_ol_obj_.isEmpty = function (object) {\n  var property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n};\nexport default _ol_obj_;","map":{"version":3,"names":["_ol_obj_","assign","Object","target","var_sources","undefined","TypeError","output","i","ii","arguments","length","source","key","hasOwnProperty","clear","object","property","getValues","values","push","isEmpty"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/obj.js"],"sourcesContent":["var _ol_obj_ = {};\n\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n *\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\n_ol_obj_.assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments[i];\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n};\n\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\n_ol_obj_.clear = function(object) {\n  for (var property in object) {\n    delete object[property];\n  }\n};\n\n\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\n_ol_obj_.getValues = function(object) {\n  var values = [];\n  for (var property in object) {\n    values.push(object[property]);\n  }\n  return values;\n};\n\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\n_ol_obj_.isEmpty = function(object) {\n  var property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n};\nexport default _ol_obj_;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,CAAC,CAAC;;AAGjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,QAAQ,CAACC,MAAM,GAAI,OAAOC,MAAM,CAACD,MAAM,KAAK,UAAU,GAAIC,MAAM,CAACD,MAAM,GAAG,UAASE,MAAM,EAAEC,WAAW,EAAE;EACtG,IAAID,MAAM,KAAKE,SAAS,IAAIF,MAAM,KAAK,IAAI,EAAE;IAC3C,MAAM,IAAIG,SAAS,CAAC,4CAA4C,CAAC;EACnE;EAEA,IAAIC,MAAM,GAAGL,MAAM,CAACC,MAAM,CAAC;EAC3B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;IAClD,IAAII,MAAM,GAAGF,SAAS,CAACF,CAAC,CAAC;IACzB,IAAII,MAAM,KAAKP,SAAS,IAAIO,MAAM,KAAK,IAAI,EAAE;MAC3C,KAAK,IAAIC,GAAG,IAAID,MAAM,EAAE;QACtB,IAAIA,MAAM,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;UAC9BN,MAAM,CAACM,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;QAC3B;MACF;IACF;EACF;EACA,OAAON,MAAM;AACf,CAAC;;AAGD;AACA;AACA;AACA;AACAP,QAAQ,CAACe,KAAK,GAAG,UAASC,MAAM,EAAE;EAChC,KAAK,IAAIC,QAAQ,IAAID,MAAM,EAAE;IAC3B,OAAOA,MAAM,CAACC,QAAQ,CAAC;EACzB;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAACkB,SAAS,GAAG,UAASF,MAAM,EAAE;EACpC,IAAIG,MAAM,GAAG,EAAE;EACf,KAAK,IAAIF,QAAQ,IAAID,MAAM,EAAE;IAC3BG,MAAM,CAACC,IAAI,CAACJ,MAAM,CAACC,QAAQ,CAAC,CAAC;EAC/B;EACA,OAAOE,MAAM;AACf,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACAnB,QAAQ,CAACqB,OAAO,GAAG,UAASL,MAAM,EAAE;EAClC,IAAIC,QAAQ;EACZ,KAAKA,QAAQ,IAAID,MAAM,EAAE;IACvB,OAAO,KAAK;EACd;EACA,OAAO,CAACC,QAAQ;AAClB,CAAC;AACD,eAAejB,QAAQ"},"metadata":{},"sourceType":"module"}