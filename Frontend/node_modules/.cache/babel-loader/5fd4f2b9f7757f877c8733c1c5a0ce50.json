{"ast":null,"code":"/**\n * @module ol/pointer/PointerEvent\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _Event from '../events/Event.js';\n\n/**\n * Is the `buttons` property supported?\n * @type {boolean}\n */\nvar HAS_BUTTONS = false;\nvar PointerEvent = /*@__PURE__*/function (_Event) {\n  function PointerEvent(type, originalEvent, opt_eventDict) {\n    _Event.call(this, type);\n\n    /**\n     * @const\n     * @type {Event}\n     */\n    this.originalEvent = originalEvent;\n    var eventDict = opt_eventDict ? opt_eventDict : {};\n\n    /**\n     * @type {number}\n     */\n    this.buttons = getButtons(eventDict);\n\n    /**\n     * @type {number}\n     */\n    this.pressure = getPressure(eventDict, this.buttons);\n\n    // MouseEvent related properties\n\n    /**\n     * @type {boolean}\n     */\n    this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\n\n    /**\n     * @type {Object}\n     */\n    this.view = 'view' in eventDict ? eventDict['view'] : null;\n\n    /**\n     * @type {number}\n     */\n    this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\n\n    /**\n     * @type {number}\n     */\n    this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\n\n    /**\n     * @type {boolean}\n     */\n    this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\n\n    /**\n     * @type {number}\n     */\n    this.button = 'button' in eventDict ? eventDict['button'] : 0;\n\n    /**\n     * @type {Node}\n     */\n    this.relatedTarget = 'relatedTarget' in eventDict ? eventDict['relatedTarget'] : null;\n\n    // PointerEvent related properties\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.width = 'width' in eventDict ? eventDict['width'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.height = 'height' in eventDict ? eventDict['height'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\n\n    /**\n     * @type {string}\n     */\n    this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\n\n    /**\n     * @type {number}\n     */\n    this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\n\n    /**\n     * @type {boolean}\n     */\n    this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;\n\n    // keep the semantics of preventDefault\n    if (originalEvent.preventDefault) {\n      this.preventDefault = function () {\n        originalEvent.preventDefault();\n      };\n    }\n  }\n  if (_Event) PointerEvent.__proto__ = _Event;\n  PointerEvent.prototype = Object.create(_Event && _Event.prototype);\n  PointerEvent.prototype.constructor = PointerEvent;\n  return PointerEvent;\n}(_Event);\n\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @return {number} Button indicator.\n */\nfunction getButtons(eventDict) {\n  // According to the w3c spec,\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\n  // MouseEvent.button == 0 can mean either no mouse button depressed, or the\n  // left mouse button depressed.\n  //\n  // As of now, the only way to distinguish between the two states of\n  // MouseEvent.button is by using the deprecated MouseEvent.which property, as\n  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\n  // no mouse button is held.\n  //\n  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\n  // but initMouseEvent does not expose an argument with which to set\n  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\n  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\n  // of app developers.\n  //\n  // The only way to propagate the correct state of MouseEvent.which and\n  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\n  // is to call initMouseEvent with a buttonArg value of -1.\n  //\n  // This is fixed with DOM Level 4's use of buttons\n  var buttons;\n  if (eventDict.buttons || HAS_BUTTONS) {\n    buttons = eventDict.buttons;\n  } else {\n    switch (eventDict.which) {\n      case 1:\n        buttons = 1;\n        break;\n      case 2:\n        buttons = 4;\n        break;\n      case 3:\n        buttons = 2;\n        break;\n      default:\n        buttons = 0;\n    }\n  }\n  return buttons;\n}\n\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @param {number} buttons Button indicator.\n * @return {number} The pressure.\n */\nfunction getPressure(eventDict, buttons) {\n  // Spec requires that pointers without pressure specified use 0.5 for down\n  // state and 0 for up state.\n  var pressure = 0;\n  if (eventDict.pressure) {\n    pressure = eventDict.pressure;\n  } else {\n    pressure = buttons ? 0.5 : 0;\n  }\n  return pressure;\n}\n\n/**\n * Checks if the `buttons` property is supported.\n */\n(function () {\n  try {\n    var ev = new MouseEvent('click', {\n      buttons: 1\n    });\n    HAS_BUTTONS = ev.buttons === 1;\n  } catch (e) {\n    // pass\n  }\n})();\nexport default PointerEvent;","map":{"version":3,"names":["_Event","HAS_BUTTONS","PointerEvent","type","originalEvent","opt_eventDict","call","eventDict","buttons","getButtons","pressure","getPressure","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","pointerId","width","height","tiltX","tiltY","pointerType","hwTimestamp","isPrimary","preventDefault","prototype","constructor","which","ev","MouseEvent","e"],"sources":["../../../src/ol/pointer/PointerEvent.js"],"sourcesContent":["/**\n * @module ol/pointer/PointerEvent\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport _Event from '../events/Event.js';\n\n\n/**\n * Is the `buttons` property supported?\n * @type {boolean}\n */\nlet HAS_BUTTONS = false;\n\n\nclass PointerEvent extends _Event {\n\n  /**\n   * A class for pointer events.\n   *\n   * This class is used as an abstraction for mouse events,\n   * touch events and even native pointer events.\n   *\n   * @param {string} type The type of the event to create.\n   * @param {Event} originalEvent The event.\n   * @param {Object<string, ?>=} opt_eventDict An optional dictionary of\n   *    initial event properties.\n   */\n  constructor(type, originalEvent, opt_eventDict) {\n    super(type);\n\n    /**\n     * @const\n     * @type {Event}\n     */\n    this.originalEvent = originalEvent;\n\n    const eventDict = opt_eventDict ? opt_eventDict : {};\n\n    /**\n     * @type {number}\n     */\n    this.buttons = getButtons(eventDict);\n\n    /**\n     * @type {number}\n     */\n    this.pressure = getPressure(eventDict, this.buttons);\n\n    // MouseEvent related properties\n\n    /**\n     * @type {boolean}\n     */\n    this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\n\n    /**\n     * @type {Object}\n     */\n    this.view = 'view' in eventDict ? eventDict['view'] : null;\n\n    /**\n     * @type {number}\n     */\n    this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\n\n    /**\n     * @type {number}\n     */\n    this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\n\n    /**\n     * @type {boolean}\n     */\n    this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\n\n    /**\n     * @type {boolean}\n     */\n    this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\n\n    /**\n     * @type {number}\n     */\n    this.button = 'button' in eventDict ? eventDict['button'] : 0;\n\n    /**\n     * @type {Node}\n     */\n    this.relatedTarget = 'relatedTarget' in eventDict ?\n      eventDict['relatedTarget'] : null;\n\n    // PointerEvent related properties\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.width = 'width' in eventDict ? eventDict['width'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.height = 'height' in eventDict ? eventDict['height'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\n\n    /**\n     * @type {number}\n     */\n    this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\n\n    /**\n     * @type {string}\n     */\n    this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\n\n    /**\n     * @type {number}\n     */\n    this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\n\n    /**\n     * @type {boolean}\n     */\n    this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;\n\n    // keep the semantics of preventDefault\n    if (originalEvent.preventDefault) {\n      this.preventDefault = function() {\n        originalEvent.preventDefault();\n      };\n    }\n  }\n\n}\n\n\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @return {number} Button indicator.\n */\nfunction getButtons(eventDict) {\n  // According to the w3c spec,\n  // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\n  // MouseEvent.button == 0 can mean either no mouse button depressed, or the\n  // left mouse button depressed.\n  //\n  // As of now, the only way to distinguish between the two states of\n  // MouseEvent.button is by using the deprecated MouseEvent.which property, as\n  // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\n  // no mouse button is held.\n  //\n  // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\n  // but initMouseEvent does not expose an argument with which to set\n  // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\n  // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\n  // of app developers.\n  //\n  // The only way to propagate the correct state of MouseEvent.which and\n  // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\n  // is to call initMouseEvent with a buttonArg value of -1.\n  //\n  // This is fixed with DOM Level 4's use of buttons\n  let buttons;\n  if (eventDict.buttons || HAS_BUTTONS) {\n    buttons = eventDict.buttons;\n  } else {\n    switch (eventDict.which) {\n      case 1: buttons = 1; break;\n      case 2: buttons = 4; break;\n      case 3: buttons = 2; break;\n      default: buttons = 0;\n    }\n  }\n  return buttons;\n}\n\n\n/**\n * @param {Object<string, ?>} eventDict The event dictionary.\n * @param {number} buttons Button indicator.\n * @return {number} The pressure.\n */\nfunction getPressure(eventDict, buttons) {\n  // Spec requires that pointers without pressure specified use 0.5 for down\n  // state and 0 for up state.\n  let pressure = 0;\n  if (eventDict.pressure) {\n    pressure = eventDict.pressure;\n  } else {\n    pressure = buttons ? 0.5 : 0;\n  }\n  return pressure;\n}\n\n\n/**\n * Checks if the `buttons` property is supported.\n */\n(function() {\n  try {\n    const ev = new MouseEvent('click', {buttons: 1});\n    HAS_BUTTONS = ev.buttons === 1;\n  } catch (e) {\n    // pass\n  }\n})();\n\nexport default PointerEvent;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAOA,MAAM,MAAM,oBAAoB;;;;;;AAOvC,IAAIC,WAAW,GAAG,KAAK;AAGvB,IAAMC,YAAY,GAAe,uBAAAF,MAAA;EAa/B,SAAAE,YAAWA,CAACC,IAAI,EAAEC,aAAa,EAAEC,aAAa,EAAE;IAC9CL,MAAA,CAAAM,IAAK,OAACH,IAAI,CAAC;;;;;;IAMX,IAAI,CAACC,aAAa,GAAGA,aAAa;IAElC,IAAMG,SAAS,GAAGF,aAAa,GAAGA,aAAa,GAAG,EAAE;;;;;IAKpD,IAAI,CAACG,OAAO,GAAGC,UAAU,CAACF,SAAS,CAAC;;;;;IAKpC,IAAI,CAACG,QAAQ,GAAGC,WAAW,CAACJ,SAAS,EAAE,IAAI,CAACC,OAAO,CAAC;;;;;;;IAOpD,IAAI,CAACI,OAAO,GAAG,SAAS,IAAIL,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,KAAK;;;;;IAKpE,IAAI,CAACM,UAAU,GAAG,YAAY,IAAIN,SAAS,GAAGA,SAAS,CAAC,YAAY,CAAC,GAAG,KAAK;;;;;IAK7E,IAAI,CAACO,IAAI,GAAG,MAAM,IAAIP,SAAS,GAAGA,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI;;;;;IAK1D,IAAI,CAACQ,MAAM,GAAG,QAAQ,IAAIR,SAAS,GAAGA,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI;;;;;IAKhE,IAAI,CAACS,OAAO,GAAG,SAAS,IAAIT,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;;;;;IAKhE,IAAI,CAACU,OAAO,GAAG,SAAS,IAAIV,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;;;;;IAKhE,IAAI,CAACW,OAAO,GAAG,SAAS,IAAIX,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;;;;;IAKhE,IAAI,CAACY,OAAO,GAAG,SAAS,IAAIZ,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;;;;;IAKhE,IAAI,CAACa,OAAO,GAAG,SAAS,IAAIb,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,KAAK;;;;;IAKpE,IAAI,CAACc,MAAM,GAAG,QAAQ,IAAId,SAAS,GAAGA,SAAS,CAAC,QAAQ,CAAC,GAAG,KAAK;;;;;IAKjE,IAAI,CAACe,QAAQ,GAAG,UAAU,IAAIf,SAAS,GAAGA,SAAS,CAAC,UAAU,CAAC,GAAG,KAAK;;;;;IAKvE,IAAI,CAACgB,OAAO,GAAG,SAAS,IAAIhB,SAAS,GAAGA,SAAS,CAAC,SAAS,CAAC,GAAG,KAAK;;;;;IAKpE,IAAI,CAACiB,MAAM,GAAG,QAAQ,IAAIjB,SAAS,GAAGA,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;;;;;IAK7D,IAAI,CAACkB,aAAa,GAAG,eAAe,IAAIlB,SAAS,GAC/CA,SAAS,CAAC,eAAe,CAAC,GAAG,IAAI;;;;;;;;IAQnC,IAAI,CAACmB,SAAS,GAAG,WAAW,IAAInB,SAAS,GAAGA,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC;;;;;IAKtE,IAAI,CAACoB,KAAK,GAAG,OAAO,IAAIpB,SAAS,GAAGA,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;;;;;IAK1D,IAAI,CAACqB,MAAM,GAAG,QAAQ,IAAIrB,SAAS,GAAGA,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;;;;;IAK7D,IAAI,CAACsB,KAAK,GAAG,OAAO,IAAItB,SAAS,GAAGA,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;;;;;IAK1D,IAAI,CAACuB,KAAK,GAAG,OAAO,IAAIvB,SAAS,GAAGA,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;;;;;IAK1D,IAAI,CAACwB,WAAW,GAAG,aAAa,IAAIxB,SAAS,GAAGA,SAAS,CAAC,aAAa,CAAC,GAAG,EAAE;;;;;IAK7E,IAAI,CAACyB,WAAW,GAAG,aAAa,IAAIzB,SAAS,GAAGA,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC;;;;;IAK5E,IAAI,CAAC0B,SAAS,GAAG,WAAW,IAAI1B,SAAS,GAAGA,SAAS,CAAC,WAAW,CAAC,GAAG,KAAK;;;IAG1E,IAAIH,aAAa,CAAC8B,cAAc,EAAE;MAChC,IAAI,CAACA,cAAc,GAAG,YAAW;QAC/B9B,aAAa,CAAC8B,cAAc,EAAE;OAC/B;;;;;cAEJ,CAAAC,SAAA,CAAAC,WAAA,GAAAlC,YAAA;;EA5JwBF,MAAA;;;;;;AAqK3B,SAASS,UAAUA,CAACF,SAAS,EAAE;;;;;;;;;;;;;;;;;;;;;;EAsB7B,IAAIC,OAAO;EACX,IAAID,SAAS,CAACC,OAAO,IAAIP,WAAW,EAAE;IACpCO,OAAO,GAAGD,SAAS,CAACC,OAAO;GAC5B,MAAM;IACL,QAAQD,SAAS,CAAC8B,KAAK;MACrB,KAAK,CAAC;QAAE7B,OAAO,GAAG,CAAC;QAAE;MACrB,KAAK,CAAC;QAAEA,OAAO,GAAG,CAAC;QAAE;MACrB,KAAK,CAAC;QAAEA,OAAO,GAAG,CAAC;QAAE;MACrB;QAASA,OAAO,GAAG,CAAC;IAAC;;EAGzB,OAAOA,OAAO;;;;;;;;AAShB,SAASG,WAAWA,CAACJ,SAAS,EAAEC,OAAO,EAAE;;;EAGvC,IAAIE,QAAQ,GAAG,CAAC;EAChB,IAAIH,SAAS,CAACG,QAAQ,EAAE;IACtBA,QAAQ,GAAGH,SAAS,CAACG,QAAQ;GAC9B,MAAM;IACLA,QAAQ,GAAGF,OAAO,GAAG,GAAG,GAAG,CAAC;;EAE9B,OAAOE,QAAQ;;;;;;AAOjB,CAAC,YAAW;EACV,IAAI;IACF,IAAM4B,EAAE,GAAG,IAAIC,UAAU,CAAC,OAAO,EAAE;MAAC/B,OAAO,EAAE;IAAC,CAAC,CAAC;IAChDP,WAAW,GAAGqC,EAAE,CAAC9B,OAAO,KAAK,CAAC;GAC/B,CAAC,OAAOgC,CAAC,EAAE;;;CAGb,GAAG;AAEJ,eAAetC,YAAY"},"metadata":{},"sourceType":"module"}