{"ast":null,"code":"/**\n * @module ol/Feature\n */\nimport { assert } from './asserts.js';\nimport { listen, unlisten, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n */\nvar Feature = /*@__PURE__*/function (BaseObject) {\n  function Feature(opt_geometryOrProperties) {\n    BaseObject.call(this);\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n    listen(this, getChangeEventType(this.geometryName_), this.handleGeometryChanged_, this);\n    if (opt_geometryOrProperties) {\n      if (typeof /** @type {?} */opt_geometryOrProperties.getSimplifiedGeometry === 'function') {\n        var geometry = /** @type {import(\"./geom/Geometry.js\").default} */opt_geometryOrProperties;\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        var properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n  if (BaseObject) Feature.__proto__ = BaseObject;\n  Feature.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Feature.prototype.constructor = Feature;\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature} The clone.\n   * @api\n   */\n  Feature.prototype.clone = function clone() {\n    var clone = new Feature(this.getProperties());\n    clone.setGeometryName(this.getGeometryName());\n    var geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n    var style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  };\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {import(\"./geom/Geometry.js\").default|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  Feature.prototype.getGeometry = function getGeometry() {\n    return (/** @type {import(\"./geom/Geometry.js\").default|undefined} */this.get(this.geometryName_)\n    );\n  };\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  Feature.prototype.getId = function getId() {\n    return this.id_;\n  };\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  Feature.prototype.getGeometryName = function getGeometryName() {\n    return this.geometryName_;\n  };\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike} The feature style.\n   * @api\n   */\n  Feature.prototype.getStyle = function getStyle() {\n    return this.style_;\n  };\n\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  Feature.prototype.getStyleFunction = function getStyleFunction() {\n    return this.styleFunction_;\n  };\n\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChange_ = function handleGeometryChange_() {\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChanged_ = function handleGeometryChanged_() {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    var geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n    this.changed();\n  };\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {import(\"./geom/Geometry.js\").default|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  Feature.prototype.setGeometry = function setGeometry(geometry) {\n    this.set(this.geometryName_, geometry);\n  };\n\n  /**\n   * Set the style for the feature.  This can be a single style object, an array\n   * of styles, or a function that takes a resolution and returns an array of\n   * styles. If it is `null` the feature has no style (a `null` style).\n   * @param {import(\"./style/Style.js\").StyleLike} style Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  Feature.prototype.setStyle = function setStyle(style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  };\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  Feature.prototype.setId = function setId(id) {\n    this.id_ = id;\n    this.changed();\n  };\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  Feature.prototype.setGeometryName = function setGeometryName(name) {\n    unlisten(this, getChangeEventType(this.geometryName_), this.handleGeometryChanged_, this);\n    this.geometryName_ = name;\n    listen(this, getChangeEventType(this.geometryName_), this.handleGeometryChanged_, this);\n    this.handleGeometryChanged_();\n  };\n  return Feature;\n}(BaseObject);\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */obj.getZIndex === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n      var style = /** @type {import(\"./style/Style.js\").default} */obj;\n      styles = [style];\n    }\n    return function () {\n      return styles;\n    };\n  }\n}\nexport default Feature;","map":{"version":3,"names":["assert","listen","unlisten","unlistenByKey","EventType","BaseObject","getChangeEventType","Feature","opt_geometryOrProperties","call","id_","undefined","geometryName_","style_","styleFunction_","geometryChangeKey_","handleGeometryChanged_","getSimplifiedGeometry","geometry","setGeometry","properties","setProperties","clone","getProperties","setGeometryName","getGeometryName","getGeometry","style","getStyle","setStyle","get","getId","getStyleFunction","handleGeometryChange_","changed","CHANGE","set","createStyleFunction","setId","id","name","obj","styles","Array","isArray","getZIndex"],"sources":["../../src/ol/Feature.js"],"sourcesContent":["/**\n * @module ol/Feature\n */\nimport {assert} from './asserts.js';\nimport {listen, unlisten, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n */\nclass Feature extends BaseObject {\n  /**\n   * @param {import(\"./geom/Geometry.js\").default|Object<string, *>=} opt_geometryOrProperties\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n  constructor(opt_geometryOrProperties) {\n\n    super();\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n\n    if (opt_geometryOrProperties) {\n      if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {\n        const geometry = /** @type {import(\"./geom/Geometry.js\").default} */ (opt_geometryOrProperties);\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        const properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature} The clone.\n   * @api\n   */\n  clone() {\n    const clone = new Feature(this.getProperties());\n    clone.setGeometryName(this.getGeometryName());\n    const geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n    const style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  }\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {import(\"./geom/Geometry.js\").default|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  getGeometry() {\n    return (\n      /** @type {import(\"./geom/Geometry.js\").default|undefined} */ (this.get(this.geometryName_))\n    );\n  }\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  getGeometryName() {\n    return this.geometryName_;\n  }\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike} The feature style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChanged_() {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    const geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry,\n        EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {import(\"./geom/Geometry.js\").default|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  setGeometry(geometry) {\n    this.set(this.geometryName_, geometry);\n  }\n\n  /**\n   * Set the style for the feature.  This can be a single style object, an array\n   * of styles, or a function that takes a resolution and returns an array of\n   * styles. If it is `null` the feature has no style (a `null` style).\n   * @param {import(\"./style/Style.js\").StyleLike} style Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  setStyle(style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  }\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  setId(id) {\n    this.id_ = id;\n    this.changed();\n  }\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  setGeometryName(name) {\n    unlisten(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.geometryName_ = name;\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.handleGeometryChanged_();\n  }\n}\n\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */ (obj).getZIndex === 'function',\n        41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n      const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\n      styles = [style];\n    }\n    return function() {\n      return styles;\n    };\n  }\n}\nexport default Feature;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}