{"ast":null,"code":"/**\n * @license\n * Latitude/longitude spherical geodesy formulae taken from\n * http://www.movable-type.co.uk/scripts/latlong.html\n * Licensed under CC-BY-3.0.\n */\n\nimport _ol_math_ from './math.js';\nimport _ol_geom_GeometryType_ from './geom/geometrytype.js';\n\n/**\n * @classdesc\n * Class to create objects that can be used with {@link\n * ol.geom.Polygon.circular}.\n *\n * For example to create a sphere whose radius is equal to the semi-major\n * axis of the WGS84 ellipsoid:\n *\n * ```js\n * var wgs84Sphere= new ol.Sphere(6378137);\n * ```\n *\n * @constructor\n * @param {number} radius Radius.\n * @api\n */\nvar _ol_Sphere_ = function (radius) {\n  /**\n   * @type {number}\n   */\n  this.radius = radius;\n};\n\n/**\n * Returns the geodesic area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array.<ol.Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @return {number} Area.\n * @api\n */\n_ol_Sphere_.prototype.geodesicArea = function (coordinates) {\n  return _ol_Sphere_.getArea_(coordinates, this.radius);\n};\n\n/**\n * Returns the distance from c1 to c2 using the haversine formula.\n *\n * @param {ol.Coordinate} c1 Coordinate 1.\n * @param {ol.Coordinate} c2 Coordinate 2.\n * @return {number} Haversine distance.\n * @api\n */\n_ol_Sphere_.prototype.haversineDistance = function (c1, c2) {\n  return _ol_Sphere_.getDistance_(c1, c2, this.radius);\n};\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {ol.Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @return {ol.Coordinate} The target point.\n */\n_ol_Sphere_.prototype.offset = function (c1, distance, bearing) {\n  var lat1 = _ol_math_.toRadians(c1[1]);\n  var lon1 = _ol_math_.toRadians(c1[0]);\n  var dByR = distance / this.radius;\n  var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n  var lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n  return [_ol_math_.toDegrees(lon), _ol_math_.toDegrees(lat)];\n};\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\n_ol_Sphere_.DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {ol.geom.Geometry} geometry A geometry.\n * @param {olx.SphereMetricOptions=} opt_options Options for the length\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\n_ol_Sphere_.getLength = function (geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || _ol_Sphere_.DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  var type = geometry.getType();\n  var length = 0;\n  var coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case _ol_geom_GeometryType_.POINT:\n    case _ol_geom_GeometryType_.MULTI_POINT:\n      {\n        break;\n      }\n    case _ol_geom_GeometryType_.LINE_STRING:\n    case _ol_geom_GeometryType_.LINEAR_RING:\n      {\n        coordinates = /** @type {ol.geom.SimpleGeometry} */geometry.getCoordinates();\n        length = _ol_Sphere_.getLength_(coordinates, radius);\n        break;\n      }\n    case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n    case _ol_geom_GeometryType_.POLYGON:\n      {\n        coordinates = /** @type {ol.geom.SimpleGeometry} */geometry.getCoordinates();\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          length += _ol_Sphere_.getLength_(coordinates[i], radius);\n        }\n        break;\n      }\n    case _ol_geom_GeometryType_.MULTI_POLYGON:\n      {\n        coordinates = /** @type {ol.geom.SimpleGeometry} */geometry.getCoordinates();\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          for (j = 0, jj = coords.length; j < jj; ++j) {\n            length += _ol_Sphere_.getLength_(coords[j], radius);\n          }\n        }\n        break;\n      }\n    case _ol_geom_GeometryType_.GEOMETRY_COLLECTION:\n      {\n        var geometries = /** @type {ol.geom.GeometryCollection} */geometry.getGeometries();\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          length += _ol_Sphere_.getLength(geometries[i], opt_options);\n        }\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return length;\n};\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\n_ol_Sphere_.getLength_ = function (coordinates, radius) {\n  var length = 0;\n  for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += _ol_Sphere_.getDistance_(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n};\n\n/**\n * Get the great circle distance between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} radius The sphere radius to use.\n * @return {number} The great circle distance between the points (in meters).\n */\n_ol_Sphere_.getDistance_ = function (c1, c2, radius) {\n  var lat1 = _ol_math_.toRadians(c1[1]);\n  var lat2 = _ol_math_.toRadians(c2[1]);\n  var deltaLatBy2 = (lat2 - lat1) / 2;\n  var deltaLonBy2 = _ol_math_.toRadians(c2[0] - c1[0]) / 2;\n  var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n};\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {ol.geom.Geometry} geometry A geometry.\n * @param {olx.SphereMetricOptions=} opt_options Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\n_ol_Sphere_.getArea = function (geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || _ol_Sphere_.DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  var type = geometry.getType();\n  var area = 0;\n  var coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case _ol_geom_GeometryType_.POINT:\n    case _ol_geom_GeometryType_.MULTI_POINT:\n    case _ol_geom_GeometryType_.LINE_STRING:\n    case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n    case _ol_geom_GeometryType_.LINEAR_RING:\n      {\n        break;\n      }\n    case _ol_geom_GeometryType_.POLYGON:\n      {\n        coordinates = /** @type {ol.geom.Polygon} */geometry.getCoordinates();\n        area = Math.abs(_ol_Sphere_.getArea_(coordinates[0], radius));\n        for (i = 1, ii = coordinates.length; i < ii; ++i) {\n          area -= Math.abs(_ol_Sphere_.getArea_(coordinates[i], radius));\n        }\n        break;\n      }\n    case _ol_geom_GeometryType_.MULTI_POLYGON:\n      {\n        coordinates = /** @type {ol.geom.SimpleGeometry} */geometry.getCoordinates();\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          area += Math.abs(_ol_Sphere_.getArea_(coords[0], radius));\n          for (j = 1, jj = coords.length; j < jj; ++j) {\n            area -= Math.abs(_ol_Sphere_.getArea_(coords[j], radius));\n          }\n        }\n        break;\n      }\n    case _ol_geom_GeometryType_.GEOMETRY_COLLECTION:\n      {\n        var geometries = /** @type {ol.geom.GeometryCollection} */geometry.getGeometries();\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          area += _ol_Sphere_.getArea(geometries[i], opt_options);\n        }\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return area;\n};\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array.<ol.Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\n_ol_Sphere_.getArea_ = function (coordinates, radius) {\n  var area = 0,\n    len = coordinates.length;\n  var x1 = coordinates[len - 1][0];\n  var y1 = coordinates[len - 1][1];\n  for (var i = 0; i < len; i++) {\n    var x2 = coordinates[i][0],\n      y2 = coordinates[i][1];\n    area += _ol_math_.toRadians(x2 - x1) * (2 + Math.sin(_ol_math_.toRadians(y1)) + Math.sin(_ol_math_.toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return area * radius * radius / 2.0;\n};\nexport default _ol_Sphere_;","map":{"version":3,"names":["_ol_math_","_ol_geom_GeometryType_","_ol_Sphere_","radius","prototype","geodesicArea","coordinates","getArea_","haversineDistance","c1","c2","getDistance_","offset","distance","bearing","lat1","toRadians","lon1","dByR","lat","Math","asin","sin","cos","lon","atan2","toDegrees","DEFAULT_RADIUS","getLength","geometry","opt_options","options","projection","clone","transform","type","getType","length","coords","i","ii","j","jj","POINT","MULTI_POINT","LINE_STRING","LINEAR_RING","getCoordinates","getLength_","MULTI_LINE_STRING","POLYGON","MULTI_POLYGON","GEOMETRY_COLLECTION","geometries","getGeometries","Error","lat2","deltaLatBy2","deltaLonBy2","a","sqrt","getArea","area","abs","len","x1","y1","x2","y2"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/sphere.js"],"sourcesContent":["/**\n * @license\n * Latitude/longitude spherical geodesy formulae taken from\n * http://www.movable-type.co.uk/scripts/latlong.html\n * Licensed under CC-BY-3.0.\n */\n\nimport _ol_math_ from './math.js';\nimport _ol_geom_GeometryType_ from './geom/geometrytype.js';\n\n/**\n * @classdesc\n * Class to create objects that can be used with {@link\n * ol.geom.Polygon.circular}.\n *\n * For example to create a sphere whose radius is equal to the semi-major\n * axis of the WGS84 ellipsoid:\n *\n * ```js\n * var wgs84Sphere= new ol.Sphere(6378137);\n * ```\n *\n * @constructor\n * @param {number} radius Radius.\n * @api\n */\nvar _ol_Sphere_ = function(radius) {\n\n  /**\n   * @type {number}\n   */\n  this.radius = radius;\n\n};\n\n\n/**\n * Returns the geodesic area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array.<ol.Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @return {number} Area.\n * @api\n */\n_ol_Sphere_.prototype.geodesicArea = function(coordinates) {\n  return _ol_Sphere_.getArea_(coordinates, this.radius);\n};\n\n\n/**\n * Returns the distance from c1 to c2 using the haversine formula.\n *\n * @param {ol.Coordinate} c1 Coordinate 1.\n * @param {ol.Coordinate} c2 Coordinate 2.\n * @return {number} Haversine distance.\n * @api\n */\n_ol_Sphere_.prototype.haversineDistance = function(c1, c2) {\n  return _ol_Sphere_.getDistance_(c1, c2, this.radius);\n};\n\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {ol.Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @return {ol.Coordinate} The target point.\n */\n_ol_Sphere_.prototype.offset = function(c1, distance, bearing) {\n  var lat1 = _ol_math_.toRadians(c1[1]);\n  var lon1 = _ol_math_.toRadians(c1[0]);\n  var dByR = distance / this.radius;\n  var lat = Math.asin(\n      Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n  var lon = lon1 + Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n  return [_ol_math_.toDegrees(lon), _ol_math_.toDegrees(lat)];\n};\n\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\n_ol_Sphere_.DEFAULT_RADIUS = 6371008.8;\n\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {ol.geom.Geometry} geometry A geometry.\n * @param {olx.SphereMetricOptions=} opt_options Options for the length\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\n_ol_Sphere_.getLength = function(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || _ol_Sphere_.DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  var type = geometry.getType();\n  var length = 0;\n  var coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case _ol_geom_GeometryType_.POINT:\n    case _ol_geom_GeometryType_.MULTI_POINT: {\n      break;\n    }\n    case _ol_geom_GeometryType_.LINE_STRING:\n    case _ol_geom_GeometryType_.LINEAR_RING: {\n      coordinates = /** @type {ol.geom.SimpleGeometry} */ (geometry).getCoordinates();\n      length = _ol_Sphere_.getLength_(coordinates, radius);\n      break;\n    }\n    case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n    case _ol_geom_GeometryType_.POLYGON: {\n      coordinates = /** @type {ol.geom.SimpleGeometry} */ (geometry).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += _ol_Sphere_.getLength_(coordinates[i], radius);\n      }\n      break;\n    }\n    case _ol_geom_GeometryType_.MULTI_POLYGON: {\n      coordinates = /** @type {ol.geom.SimpleGeometry} */ (geometry).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += _ol_Sphere_.getLength_(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case _ol_geom_GeometryType_.GEOMETRY_COLLECTION: {\n      var geometries = /** @type {ol.geom.GeometryCollection} */ (geometry).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += _ol_Sphere_.getLength(geometries[i], opt_options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n};\n\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\n_ol_Sphere_.getLength_ = function(coordinates, radius) {\n  var length = 0;\n  for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += _ol_Sphere_.getDistance_(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n};\n\n\n/**\n * Get the great circle distance between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} radius The sphere radius to use.\n * @return {number} The great circle distance between the points (in meters).\n */\n_ol_Sphere_.getDistance_ = function(c1, c2, radius) {\n  var lat1 = _ol_math_.toRadians(c1[1]);\n  var lat2 = _ol_math_.toRadians(c2[1]);\n  var deltaLatBy2 = (lat2 - lat1) / 2;\n  var deltaLonBy2 = _ol_math_.toRadians(c2[0] - c1[0]) / 2;\n  var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n      Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *\n      Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n};\n\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {ol.geom.Geometry} geometry A geometry.\n * @param {olx.SphereMetricOptions=} opt_options Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\n_ol_Sphere_.getArea = function(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || _ol_Sphere_.DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  var type = geometry.getType();\n  var area = 0;\n  var coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case _ol_geom_GeometryType_.POINT:\n    case _ol_geom_GeometryType_.MULTI_POINT:\n    case _ol_geom_GeometryType_.LINE_STRING:\n    case _ol_geom_GeometryType_.MULTI_LINE_STRING:\n    case _ol_geom_GeometryType_.LINEAR_RING: {\n      break;\n    }\n    case _ol_geom_GeometryType_.POLYGON: {\n      coordinates = /** @type {ol.geom.Polygon} */ (geometry).getCoordinates();\n      area = Math.abs(_ol_Sphere_.getArea_(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(_ol_Sphere_.getArea_(coordinates[i], radius));\n      }\n      break;\n    }\n    case _ol_geom_GeometryType_.MULTI_POLYGON: {\n      coordinates = /** @type {ol.geom.SimpleGeometry} */ (geometry).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(_ol_Sphere_.getArea_(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(_ol_Sphere_.getArea_(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case _ol_geom_GeometryType_.GEOMETRY_COLLECTION: {\n      var geometries = /** @type {ol.geom.GeometryCollection} */ (geometry).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += _ol_Sphere_.getArea(geometries[i], opt_options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n};\n\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array.<ol.Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\n_ol_Sphere_.getArea_ = function(coordinates, radius) {\n  var area = 0, len = coordinates.length;\n  var x1 = coordinates[len - 1][0];\n  var y1 = coordinates[len - 1][1];\n  for (var i = 0; i < len; i++) {\n    var x2 = coordinates[i][0], y2 = coordinates[i][1];\n    area += _ol_math_.toRadians(x2 - x1) *\n        (2 + Math.sin(_ol_math_.toRadians(y1)) +\n        Math.sin(_ol_math_.toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return area * radius * radius / 2.0;\n};\nexport default _ol_Sphere_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}