{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport { getUid } from '../util.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileEventType from './TileEventType.js';\nimport { getKeyZXY } from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nvar UrlTile = /*@__PURE__*/function (TileSource) {\n  function UrlTile(options) {\n    TileSource.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ = !options.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction, this.key_);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n  if (TileSource) UrlTile.__proto__ = TileSource;\n  UrlTile.prototype = Object.create(TileSource && TileSource.prototype);\n  UrlTile.prototype.constructor = UrlTile;\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  UrlTile.prototype.getTileLoadFunction = function getTileLoadFunction() {\n    return this.tileLoadFunction;\n  };\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  UrlTile.prototype.getTileUrlFunction = function getTileUrlFunction() {\n    return this.tileUrlFunction;\n  };\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  UrlTile.prototype.getUrls = function getUrls() {\n    return this.urls;\n  };\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  UrlTile.prototype.handleTileChange = function handleTileChange(event) {\n    var tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED || tileState == TileState.ABORT ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  UrlTile.prototype.setTileLoadFunction = function setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  UrlTile.prototype.setTileUrlFunction = function setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  };\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  UrlTile.prototype.setUrl = function setUrl(url) {\n    var urls = this.urls = expandUrl(url);\n    this.setUrls(urls);\n  };\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  UrlTile.prototype.setUrls = function setUrls(urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  UrlTile.prototype.useTile = function useTile(z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n  return UrlTile;\n}(TileSource);\nexport default UrlTile;","map":{"version":3,"names":["getUid","TileState","expandUrl","createFromTemplates","nullTileUrlFunction","TileSource","TileSourceEvent","TileEventType","getKeyZXY","UrlTile","options","call","attributions","cacheSize","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","key","attributionsCollapsible","generateTileUrlFunction_","tileUrlFunction","tileLoadFunction","bind","urls","setUrls","url","setUrl","setTileUrlFunction","key_","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getUrls","handleTileChange","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","ABORT","TILELOADEND","undefined","dispatchEvent","setTileLoadFunction","tileCache","clear","changed","pruneExceptNewestZ","setKey","join","useTile","z","x","y","tileCoordKey","containsKey","get"],"sources":["../../../src/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport {getUid} from '../util.js';\nimport TileState from '../TileState.js';\nimport {expandUrl, createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ = !options.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction, this.key_);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :\n        (tileState == TileState.LOADED || tileState == TileState.ABORT) ?\n          TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = this.urls = expandUrl(url);\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\n\nexport default UrlTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}