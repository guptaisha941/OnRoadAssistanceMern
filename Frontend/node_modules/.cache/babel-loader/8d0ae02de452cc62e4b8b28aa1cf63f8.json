{"ast":null,"code":"/**\n * @module ol/interaction/DragRotate\n */\nimport { disable } from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport { altShiftKeysOnly, mouseOnly, mouseActionButton } from '../events/condition.js';\nimport { FALSE } from '../functions.js';\nimport { rotate, rotateWithoutConstraints } from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nvar DragRotate = /*@__PURE__*/function (PointerInteraction) {\n  function DragRotate(opt_options) {\n    var options = opt_options ? opt_options : {};\n    PointerInteraction.call(this, {\n      stopDown: FALSE\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n  if (PointerInteraction) DragRotate.__proto__ = PointerInteraction;\n  DragRotate.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  DragRotate.prototype.constructor = DragRotate;\n\n  /**\n   * @inheritDoc\n   */\n  DragRotate.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      var rotation = view.getRotation();\n      rotateWithoutConstraints(view, rotation - delta);\n    }\n    this.lastAngle_ = theta;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragRotate.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    var rotation = view.getRotation();\n    rotate(view, rotation, undefined, this.duration_);\n    return false;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragRotate.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragRotate;\n}(PointerInteraction);\nexport default DragRotate;","map":{"version":3,"names":["disable","ViewHint","altShiftKeysOnly","mouseOnly","mouseActionButton","FALSE","rotate","rotateWithoutConstraints","PointerInteraction","DragRotate","opt_options","options","call","stopDown","condition_","condition","lastAngle_","undefined","duration_","duration","handleDragEvent","mapBrowserEvent","map","view","getView","getConstraints","rotation","size","getSize","offset","pixel","theta","Math","atan2","delta","getRotation","handleUpEvent","setHint","INTERACTING","handleDownEvent"],"sources":["../../../src/ol/interaction/DragRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/DragRotate\n */\nimport {disable} from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport {altShiftKeysOnly, mouseOnly, mouseActionButton} from '../events/condition.js';\nimport {FALSE} from '../functions.js';\nimport {rotate, rotateWithoutConstraints} from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      stopDown: FALSE\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta =\n        Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      const rotation = view.getRotation();\n      rotateWithoutConstraints(view, rotation - delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    const rotation = view.getRotation();\n    rotate(view, rotation, undefined, this.duration_);\n    return false;\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragRotate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}