{"ast":null,"code":"/**\n * @module ol/style/IconImage\n */\n\nimport { createCanvasContext2D } from '../dom.js';\nimport { listenOnce, unlistenByKey } from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport { shared as iconImageCache } from './IconImageCache.js';\nvar IconImage = /*@__PURE__*/function (EventTarget) {\n  function IconImage(image, src, size, crossOrigin, imageState, color) {\n    EventTarget.call(this);\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = !image ? new Image() : image;\n    if (crossOrigin !== null) {\n      /** @type {HTMLImageElement} */this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = color ? /** @type {HTMLCanvasElement} */document.createElement('canvas') : null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = size;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.tainted_;\n  }\n  if (EventTarget) IconImage.__proto__ = EventTarget;\n  IconImage.prototype = Object.create(EventTarget && EventTarget.prototype);\n  IconImage.prototype.constructor = IconImage;\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  IconImage.prototype.isTainted_ = function isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      this.tainted_ = false;\n      var context = createCanvasContext2D(1, 1);\n      try {\n        context.drawImage(this.image_, 0, 0);\n        context.getImageData(0, 0, 1, 1);\n      } catch (e) {\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.dispatchChangeEvent_ = function dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.handleImageError_ = function handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.handleImageLoad_ = function handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    if (this.size_) {\n      this.image_.width = this.size_[0];\n      this.image_.height = this.size_[1];\n    }\n    this.size_ = [this.image_.width, this.image_.height];\n    this.unlistenImage_();\n    this.replaceColor_();\n    this.dispatchChangeEvent_();\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   */\n  IconImage.prototype.getImage = function getImage(pixelRatio) {\n    return this.canvas_ ? this.canvas_ : this.image_;\n  };\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  IconImage.prototype.getImageState = function getImageState() {\n    return this.imageState_;\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  IconImage.prototype.getHitDetectionImage = function getHitDetectionImage(pixelRatio) {\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        var width = this.size_[0];\n        var height = this.size_[1];\n        var context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  };\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  IconImage.prototype.getSize = function getSize() {\n    return this.size_;\n  };\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  IconImage.prototype.getSrc = function getSrc() {\n    return this.src_;\n  };\n\n  /**\n   * Load not yet loaded URI.\n   */\n  IconImage.prototype.load = function load() {\n    if (this.imageState_ == ImageState.IDLE) {\n      this.imageState_ = ImageState.LOADING;\n      this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n      try {\n        /** @type {HTMLImageElement} */this.image_.src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n    }\n  };\n\n  /**\n   * @private\n   */\n  IconImage.prototype.replaceColor_ = function replaceColor_() {\n    if (!this.color_ || this.isTainted_()) {\n      return;\n    }\n    this.canvas_.width = this.image_.width;\n    this.canvas_.height = this.image_.height;\n    var ctx = this.canvas_.getContext('2d');\n    ctx.drawImage(this.image_, 0, 0);\n    var imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);\n    var data = imgData.data;\n    var r = this.color_[0] / 255.0;\n    var g = this.color_[1] / 255.0;\n    var b = this.color_[2] / 255.0;\n    for (var i = 0, ii = data.length; i < ii; i += 4) {\n      data[i] *= r;\n      data[i + 1] *= g;\n      data[i + 2] *= b;\n    }\n    ctx.putImageData(imgData, 0, 0);\n  };\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  IconImage.prototype.unlistenImage_ = function unlistenImage_() {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n  return IconImage;\n}(EventTarget);\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  var iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\nexport default IconImage;","map":{"version":3,"names":["createCanvasContext2D","listenOnce","unlistenByKey","EventTarget","EventType","ImageState","shared","iconImageCache","IconImage","image","src","size","crossOrigin","imageState","color","call","hitDetectionImage_","image_","Image","canvas_","document","createElement","color_","imageListenerKeys_","imageState_","size_","src_","tainted_","isTainted_","undefined","LOADED","context","drawImage","getImageData","e","dispatchChangeEvent_","dispatchEvent","CHANGE","handleImageError_","ERROR","unlistenImage_","handleImageLoad_","width","height","replaceColor_","getImage","pixelRatio","getImageState","getHitDetectionImage","fillRect","canvas","getSize","getSrc","load","IDLE","LOADING","LOAD","ctx","getContext","imgData","data","r","g","b","i","ii","length","putImageData","forEach","get","iconImage","set"],"sources":["../../../src/ol/style/IconImage.js"],"sourcesContent":["/**\n * @module ol/style/IconImage\n */\n\nimport {createCanvasContext2D} from '../dom.js';\nimport {listenOnce, unlistenByKey} from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\n\nclass IconImage extends EventTarget {\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n   * @param {string|undefined} src Src.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */\n  constructor(image, src, size, crossOrigin, imageState, color) {\n\n    super();\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = !image ? new Image() : image;\n\n    if (crossOrigin !== null) {\n      /** @type {HTMLImageElement} */ (this.image_).crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = color ?\n      /** @type {HTMLCanvasElement} */ (document.createElement('canvas')) :\n      null;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = size;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.tainted_;\n\n  }\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      this.tainted_ = false;\n      const context = createCanvasContext2D(1, 1);\n      try {\n        context.drawImage(this.image_, 0, 0);\n        context.getImageData(0, 0, 1, 1);\n      } catch (e) {\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  }\n\n  /**\n   * @private\n   */\n  dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @private\n   */\n  handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @private\n   */\n  handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    if (this.size_) {\n      this.image_.width = this.size_[0];\n      this.image_.height = this.size_[1];\n    }\n    this.size_ = [this.image_.width, this.image_.height];\n    this.unlistenImage_();\n    this.replaceColor_();\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   */\n  getImage(pixelRatio) {\n    return this.canvas_ ? this.canvas_ : this.image_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage(pixelRatio) {\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        const width = this.size_[0];\n        const height = this.size_[1];\n        const context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  getSrc() {\n    return this.src_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.imageState_ == ImageState.IDLE) {\n      this.imageState_ = ImageState.LOADING;\n      this.imageListenerKeys_ = [\n        listenOnce(this.image_, EventType.ERROR,\n          this.handleImageError_, this),\n        listenOnce(this.image_, EventType.LOAD,\n          this.handleImageLoad_, this)\n      ];\n      try {\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  replaceColor_() {\n    if (!this.color_ || this.isTainted_()) {\n      return;\n    }\n\n    this.canvas_.width = this.image_.width;\n    this.canvas_.height = this.image_.height;\n\n    const ctx = this.canvas_.getContext('2d');\n    ctx.drawImage(this.image_, 0, 0);\n\n    const imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);\n    const data = imgData.data;\n    const r = this.color_[0] / 255.0;\n    const g = this.color_[1] / 255.0;\n    const b = this.color_[2] / 255.0;\n\n    for (let i = 0, ii = data.length; i < ii; i += 4) {\n      data[i] *= r;\n      data[i + 1] *= g;\n      data[i + 2] *= b;\n    }\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  }\n}\n\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  let iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\n\n\nexport default IconImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}