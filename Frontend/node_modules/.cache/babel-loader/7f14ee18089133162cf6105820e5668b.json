{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = function PriorityQueue(priorityFunction, keyFunction) {\n  /**\n   * @type {function(T): number}\n   * @private\n   */\n  this.priorityFunction_ = priorityFunction;\n\n  /**\n   * @type {function(T): string}\n   * @private\n   */\n  this.keyFunction_ = keyFunction;\n\n  /**\n   * @type {Array<T>}\n   * @private\n   */\n  this.elements_ = [];\n\n  /**\n   * @type {Array<number>}\n   * @private\n   */\n  this.priorities_ = [];\n\n  /**\n   * @type {!Object<string, boolean>}\n   * @private\n   */\n  this.queuedElements_ = {};\n};\n\n/**\n * FIXME empty description for jsdoc\n */\nPriorityQueue.prototype.clear = function clear$1() {\n  this.elements_.length = 0;\n  this.priorities_.length = 0;\n  clear(this.queuedElements_);\n};\n\n/**\n * Remove and return the highest-priority element. O(log N).\n * @return {T} Element.\n */\nPriorityQueue.prototype.dequeue = function dequeue() {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[0];\n  if (elements.length == 1) {\n    elements.length = 0;\n    priorities.length = 0;\n  } else {\n    elements[0] = elements.pop();\n    priorities[0] = priorities.pop();\n    this.siftUp_(0);\n  }\n  var elementKey = this.keyFunction_(element);\n  delete this.queuedElements_[elementKey];\n  return element;\n};\n\n/**\n * Enqueue an element. O(log N).\n * @param {T} element Element.\n * @return {boolean} The element was added to the queue.\n */\nPriorityQueue.prototype.enqueue = function enqueue(element) {\n  assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n  var priority = this.priorityFunction_(element);\n  if (priority != DROP) {\n    this.elements_.push(element);\n    this.priorities_.push(priority);\n    this.queuedElements_[this.keyFunction_(element)] = true;\n    this.siftDown_(0, this.elements_.length - 1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * @return {number} Count.\n */\nPriorityQueue.prototype.getCount = function getCount() {\n  return this.elements_.length;\n};\n\n/**\n * Gets the index of the left child of the node at the given index.\n * @param {number} index The index of the node to get the left child for.\n * @return {number} The index of the left child.\n * @private\n */\nPriorityQueue.prototype.getLeftChildIndex_ = function getLeftChildIndex_(index) {\n  return index * 2 + 1;\n};\n\n/**\n * Gets the index of the right child of the node at the given index.\n * @param {number} index The index of the node to get the right child for.\n * @return {number} The index of the right child.\n * @private\n */\nPriorityQueue.prototype.getRightChildIndex_ = function getRightChildIndex_(index) {\n  return index * 2 + 2;\n};\n\n/**\n * Gets the index of the parent of the node at the given index.\n * @param {number} index The index of the node to get the parent for.\n * @return {number} The index of the parent.\n * @private\n */\nPriorityQueue.prototype.getParentIndex_ = function getParentIndex_(index) {\n  return index - 1 >> 1;\n};\n\n/**\n * Make this a heap. O(N).\n * @private\n */\nPriorityQueue.prototype.heapify_ = function heapify_() {\n  var i;\n  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n    this.siftUp_(i);\n  }\n};\n\n/**\n * @return {boolean} Is empty.\n */\nPriorityQueue.prototype.isEmpty = function isEmpty() {\n  return this.elements_.length === 0;\n};\n\n/**\n * @param {string} key Key.\n * @return {boolean} Is key queued.\n */\nPriorityQueue.prototype.isKeyQueued = function isKeyQueued(key) {\n  return key in this.queuedElements_;\n};\n\n/**\n * @param {T} element Element.\n * @return {boolean} Is queued.\n */\nPriorityQueue.prototype.isQueued = function isQueued(element) {\n  return this.isKeyQueued(this.keyFunction_(element));\n};\n\n/**\n * @param {number} index The index of the node to move down.\n * @private\n */\nPriorityQueue.prototype.siftUp_ = function siftUp_(index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var count = elements.length;\n  var element = elements[index];\n  var priority = priorities[index];\n  var startIndex = index;\n  while (index < count >> 1) {\n    var lIndex = this.getLeftChildIndex_(index);\n    var rIndex = this.getRightChildIndex_(index);\n    var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n    elements[index] = elements[smallerChildIndex];\n    priorities[index] = priorities[smallerChildIndex];\n    index = smallerChildIndex;\n  }\n  elements[index] = element;\n  priorities[index] = priority;\n  this.siftDown_(startIndex, index);\n};\n\n/**\n * @param {number} startIndex The index of the root.\n * @param {number} index The index of the node to move up.\n * @private\n */\nPriorityQueue.prototype.siftDown_ = function siftDown_(startIndex, index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[index];\n  var priority = priorities[index];\n  while (index > startIndex) {\n    var parentIndex = this.getParentIndex_(index);\n    if (priorities[parentIndex] > priority) {\n      elements[index] = elements[parentIndex];\n      priorities[index] = priorities[parentIndex];\n      index = parentIndex;\n    } else {\n      break;\n    }\n  }\n  elements[index] = element;\n  priorities[index] = priority;\n};\n\n/**\n * FIXME empty description for jsdoc\n */\nPriorityQueue.prototype.reprioritize = function reprioritize() {\n  var priorityFunction = this.priorityFunction_;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var index = 0;\n  var n = elements.length;\n  var element, i, priority;\n  for (i = 0; i < n; ++i) {\n    element = elements[i];\n    priority = priorityFunction(element);\n    if (priority == DROP) {\n      delete this.queuedElements_[this.keyFunction_(element)];\n    } else {\n      priorities[index] = priority;\n      elements[index++] = element;\n    }\n  }\n  elements.length = index;\n  priorities.length = index;\n  this.heapify_();\n};\nexport default PriorityQueue;","map":{"version":3,"names":["assert","clear","DROP","Infinity","PriorityQueue","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","prototype","clear$1","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"sources":["../../../src/ol/structs/PriorityQueue.js"],"sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_),\n      31); // Tried to enqueue an `element` that was already added to the queue\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < (count >> 1)) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex = rIndex < count &&\n          priorities[rIndex] < priorities[lIndex] ?\n        rIndex : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n\n}\n\n\nexport default PriorityQueue;\n"],"mappings":"AAAA;;;AAGA,SAAQA,MAAM,QAAO,eAAe;AACpC,SAAQC,KAAK,QAAO,WAAW;;;;;AAM/B,OAAO,IAAMC,IAAI,GAAGC,QAAQ;;;;;;;;;;;;;;AAe5B,IAAMC,aAAa,GAMjB,SAAAA,aAAWA,CAACC,gBAAgB,EAAEC,WAAW,EAAE;EAE3C;;;;EAIA,IAAM,CAACC,iBAAiB,GAAGF,gBAAgB;;EAE3C;;;;EAIA,IAAM,CAACG,YAAY,GAAGF,WAAW;;EAEjC;;;;EAIA,IAAM,CAACG,SAAS,GAAG,EAAE;;EAErB;;;;EAIA,IAAM,CAACC,WAAW,GAAG,EAAE;;EAEvB;;;;EAIA,IAAM,CAACC,eAAe,GAAG,EAAE;AAE7B,CAAE;;AAEF;;;AAGAP,aAAA,CAAAQ,SAAA,CAAEX,KAAA,YAAAY,QAAA,EAAQ;EACR,IAAM,CAACJ,SAAS,CAACK,MAAM,GAAG,CAAC;EAC3B,IAAM,CAACJ,WAAW,CAACI,MAAM,GAAG,CAAC;EAC7Bb,KAAO,CAAC,IAAI,CAACU,eAAe,CAAC;AAC/B,CAAE;;AAGF;;;;AAIAP,aAAA,CAAAQ,SAAA,CAAEG,OAAA,YAAAA,QAAA,EAAU;EACV,IAAQC,QAAQ,GAAG,IAAI,CAACP,SAAS;EACjC,IAAQQ,UAAU,GAAG,IAAI,CAACP,WAAW;EACrC,IAAQQ,OAAO,GAAGF,QAAQ,CAAC,CAAC,CAAC;EAC7B,IAAMA,QAAQ,CAACF,MAAM,IAAI,CAAC,EAAE;IAC1BE,QAAU,CAACF,MAAM,GAAG,CAAC;IACrBG,UAAY,CAACH,MAAM,GAAG,CAAC;EACzB,CAAG,MAAM;IACPE,QAAU,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAACG,GAAG,EAAE;IAC9BF,UAAY,CAAC,CAAC,CAAC,GAAGA,UAAU,CAACE,GAAG,EAAE;IAClC,IAAM,CAACC,OAAO,CAAC,CAAC,CAAC;EACnB;EACA,IAAQC,UAAU,GAAG,IAAI,CAACb,YAAY,CAACU,OAAO,CAAC;EAC/C,OAAS,IAAI,CAACP,eAAe,CAACU,UAAU,CAAC;EACzC,OAASH,OAAO;AAClB,CAAE;;AAGF;;;;;AAKAd,aAAA,CAAAQ,SAAA,CAAEU,OAAA,YAAAA,QAAQJ,OAAO,EAAE;EACjBlB,MAAQ,CAAC,EAAE,IAAI,CAACQ,YAAY,CAACU,OAAO,CAAC,IAAI,IAAI,CAACP,eAAe,CAAC,EAC5D,EAAI,CAAC,CAAC;EACR,IAAQY,QAAQ,GAAG,IAAI,CAAChB,iBAAiB,CAACW,OAAO,CAAC;EAClD,IAAMK,QAAQ,IAAIrB,IAAI,EAAE;IACtB,IAAM,CAACO,SAAS,CAACe,IAAI,CAACN,OAAO,CAAC;IAC9B,IAAM,CAACR,WAAW,CAACc,IAAI,CAACD,QAAQ,CAAC;IACjC,IAAM,CAACZ,eAAe,CAAC,IAAI,CAACH,YAAY,CAACU,OAAO,CAAC,CAAC,GAAG,IAAI;IACzD,IAAM,CAACO,SAAS,CAAC,CAAC,EAAE,IAAI,CAAChB,SAAS,CAACK,MAAM,GAAG,CAAC,CAAC;IAC9C,OAAS,IAAI;EACf;EACA,OAAS,KAAK;AAChB,CAAE;;AAGF;;;AAGAV,aAAA,CAAAQ,SAAA,CAAEc,QAAA,YAAAA,SAAA,EAAW;EACX,OAAS,IAAI,CAACjB,SAAS,CAACK,MAAM;AAChC,CAAE;;AAGF;;;;;;AAMAV,aAAA,CAAAQ,SAAA,CAAEe,kBAAA,YAAAA,mBAAmBC,KAAK,EAAE;EAC1B,OAASA,KAAK,GAAG,CAAC,GAAG,CAAC;AACxB,CAAE;;AAGF;;;;;;AAMAxB,aAAA,CAAAQ,SAAA,CAAEiB,mBAAA,YAAAA,oBAAoBD,KAAK,EAAE;EAC3B,OAASA,KAAK,GAAG,CAAC,GAAG,CAAC;AACxB,CAAE;;AAGF;;;;;;AAMAxB,aAAA,CAAAQ,SAAA,CAAEkB,eAAA,YAAAA,gBAAgBF,KAAK,EAAE;EACvB,OAAUA,KAAK,GAAG,CAAC,IAAK,CAAC;AAC3B,CAAE;;AAGF;;;;AAIAxB,aAAA,CAAAQ,SAAA,CAAEmB,QAAA,YAAAA,SAAA,EAAW;EACX,IAAMC,CAAC;EACP,KAAOA,CAAC,GAAG,CAAC,IAAI,CAACvB,SAAS,CAACK,MAAM,IAAI,CAAC,IAAI,CAAC,EAAEkB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxD,IAAM,CAACZ,OAAO,CAACY,CAAC,CAAC;EACnB;AACF,CAAE;;AAGF;;;AAGA5B,aAAA,CAAAQ,SAAA,CAAEqB,OAAA,YAAAA,QAAA,EAAU;EACV,OAAS,IAAI,CAACxB,SAAS,CAACK,MAAM,KAAK,CAAC;AACtC,CAAE;;AAGF;;;;AAIAV,aAAA,CAAAQ,SAAA,CAAEsB,WAAA,YAAAA,YAAYC,GAAG,EAAE;EACjB,OAASA,GAAG,IAAI,IAAI,CAACxB,eAAe;AACtC,CAAE;;AAGF;;;;AAIAP,aAAA,CAAAQ,SAAA,CAAEwB,QAAA,YAAAA,SAASlB,OAAO,EAAE;EAClB,OAAS,IAAI,CAACgB,WAAW,CAAC,IAAI,CAAC1B,YAAY,CAACU,OAAO,CAAC,CAAC;AACvD,CAAE;;AAGF;;;;AAIAd,aAAA,CAAAQ,SAAA,CAAEQ,OAAA,YAAAA,QAAQQ,KAAK,EAAE;EACf,IAAQZ,QAAQ,GAAG,IAAI,CAACP,SAAS;EACjC,IAAQQ,UAAU,GAAG,IAAI,CAACP,WAAW;EACrC,IAAQ2B,KAAK,GAAGrB,QAAQ,CAACF,MAAM;EAC/B,IAAQI,OAAO,GAAGF,QAAQ,CAACY,KAAK,CAAC;EACjC,IAAQL,QAAQ,GAAGN,UAAU,CAACW,KAAK,CAAC;EACpC,IAAQU,UAAU,GAAGV,KAAK;EAE1B,OAASA,KAAK,GAAIS,KAAK,IAAI,CAAE,EAAE;IAC7B,IAAQE,MAAM,GAAG,IAAI,CAACZ,kBAAkB,CAACC,KAAK,CAAC;IAC/C,IAAQY,MAAM,GAAG,IAAI,CAACX,mBAAmB,CAACD,KAAK,CAAC;IAEhD,IAAQa,iBAAiB,GAAGD,MAAM,GAAGH,KAAK,IACtCpB,UAAY,CAACuB,MAAM,CAAC,GAAGvB,UAAU,CAACsB,MAAM,CAAC,GAC3CC,MAAQ,GAAGD,MAAM;IAEnBvB,QAAU,CAACY,KAAK,CAAC,GAAGZ,QAAQ,CAACyB,iBAAiB,CAAC;IAC/CxB,UAAY,CAACW,KAAK,CAAC,GAAGX,UAAU,CAACwB,iBAAiB,CAAC;IACnDb,KAAO,GAAGa,iBAAiB;EAC7B;EAEAzB,QAAU,CAACY,KAAK,CAAC,GAAGV,OAAO;EAC3BD,UAAY,CAACW,KAAK,CAAC,GAAGL,QAAQ;EAC9B,IAAM,CAACE,SAAS,CAACa,UAAU,EAAEV,KAAK,CAAC;AACrC,CAAE;;AAGF;;;;;AAKAxB,aAAA,CAAAQ,SAAA,CAAEa,SAAA,YAAAA,UAAUa,UAAU,EAAEV,KAAK,EAAE;EAC7B,IAAQZ,QAAQ,GAAG,IAAI,CAACP,SAAS;EACjC,IAAQQ,UAAU,GAAG,IAAI,CAACP,WAAW;EACrC,IAAQQ,OAAO,GAAGF,QAAQ,CAACY,KAAK,CAAC;EACjC,IAAQL,QAAQ,GAAGN,UAAU,CAACW,KAAK,CAAC;EAEpC,OAASA,KAAK,GAAGU,UAAU,EAAE;IAC3B,IAAQI,WAAW,GAAG,IAAI,CAACZ,eAAe,CAACF,KAAK,CAAC;IACjD,IAAMX,UAAU,CAACyB,WAAW,CAAC,GAAGnB,QAAQ,EAAE;MACxCP,QAAU,CAACY,KAAK,CAAC,GAAGZ,QAAQ,CAAC0B,WAAW,CAAC;MACzCzB,UAAY,CAACW,KAAK,CAAC,GAAGX,UAAU,CAACyB,WAAW,CAAC;MAC7Cd,KAAO,GAAGc,WAAW;IACvB,CAAG,MAAM;MACP;IACF;EACF;EACA1B,QAAU,CAACY,KAAK,CAAC,GAAGV,OAAO;EAC3BD,UAAY,CAACW,KAAK,CAAC,GAAGL,QAAQ;AAChC,CAAE;;AAGF;;;AAGAnB,aAAA,CAAAQ,SAAA,CAAE+B,YAAA,YAAAA,aAAA,EAAe;EACf,IAAQtC,gBAAgB,GAAG,IAAI,CAACE,iBAAiB;EACjD,IAAQS,QAAQ,GAAG,IAAI,CAACP,SAAS;EACjC,IAAQQ,UAAU,GAAG,IAAI,CAACP,WAAW;EACrC,IAAMkB,KAAK,GAAG,CAAC;EACf,IAAQgB,CAAC,GAAG5B,QAAQ,CAACF,MAAM;EAC3B,IAAMI,OAAO,EAAEc,CAAC,EAAET,QAAQ;EAC1B,KAAOS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,CAAC,EAAE,EAAEZ,CAAC,EAAE;IACxBd,OAAS,GAAGF,QAAQ,CAACgB,CAAC,CAAC;IACvBT,QAAU,GAAGlB,gBAAgB,CAACa,OAAO,CAAC;IACtC,IAAMK,QAAQ,IAAIrB,IAAI,EAAE;MACtB,OAAS,IAAI,CAACS,eAAe,CAAC,IAAI,CAACH,YAAY,CAACU,OAAO,CAAC,CAAC;IAC3D,CAAG,MAAM;MACPD,UAAY,CAACW,KAAK,CAAC,GAAGL,QAAQ;MAC9BP,QAAU,CAACY,KAAK,EAAE,CAAC,GAAGV,OAAO;IAC/B;EACF;EACAF,QAAU,CAACF,MAAM,GAAGc,KAAK;EACzBX,UAAY,CAACH,MAAM,GAAGc,KAAK;EAC3B,IAAM,CAACG,QAAQ,EAAE;AACnB,CAAG;AAKH,eAAe3B,aAAa"},"metadata":{},"sourceType":"module"}