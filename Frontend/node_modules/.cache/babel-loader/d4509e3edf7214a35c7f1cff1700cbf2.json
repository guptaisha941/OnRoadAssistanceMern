{"ast":null,"code":"/**\n * @module ol/interaction/Select\n */\nimport { getUid } from '../util.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport { extend, includes } from '../array.js';\nimport { listen } from '../events.js';\nimport Event from '../events/Event.js';\nimport { singleClick, never, shiftKeyOnly, pointerMove } from '../events/condition.js';\nimport { TRUE } from '../functions.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Interaction from './Interaction.js';\nimport VectorLayer from '../layer/Vector.js';\nimport { clear } from '../obj.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\n\n/**\n * @enum {string}\n */\nvar SelectEventType = {\n  /**\n   * Triggered when feature(s) has been (de)selected.\n   * @event SelectEvent#select\n   * @api\n   */\n  SELECT: 'select'\n};\n\n/**\n * A function that takes an {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and an\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\n * selected or `false` otherwise.\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default):boolean} FilterFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [addCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default, this is {@link module:ol/events/condition~never}. Use this if you\n * want to use different events for add and remove instead of `toggle`.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. This is the event\n * for the selected features as a whole. By default, this is\n * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that\n * feature and removes any that were in the selection. Clicking outside any\n * feature removes all from the selection.\n * See `toggle`, `add`, `remove` options for adding/removing extra features to/\n * from the selection.\n * @property {Array<import(\"../layer/Layer.js\").default>|function(import(\"../layer/Layer.js\").default): boolean} [layers]\n * A list of layers from which features should be selected. Alternatively, a\n * filter function can be provided. The function will be called for each layer\n * in the map and should return `true` for layers that you want to be\n * selectable. If the option is absent, all visible layers will be considered\n * selectable.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for the selected features. By default the default edit style is used\n * (see {@link module:ol/style}).\n * @property {import(\"../events/condition.js\").Condition} [removeCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default, this is {@link module:ol/events/condition~never}. Use this if you\n * want to use different events for add and remove instead of `toggle`.\n * @property {import(\"../events/condition.js\").Condition} [toggleCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. This is in addition\n * to the `condition` event. By default,\n * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as\n * well as the `condition` event, adds that feature to the current selection if\n * it is not currently selected, and removes it if it is. See `add` and `remove`\n * if you want to use different events instead of a toggle.\n * @property {boolean} [multi=false] A boolean that determines if the default\n * behaviour should select only single features or all (overlapping) features at\n * the clicked map position. The default of `false` means single select.\n * @property {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} [features]\n * Collection where the interaction will place selected features. Optional. If\n * not set the interaction will create a collection. In any case the collection\n * used by the interaction is returned by\n * {@link module:ol/interaction/Select~Select#getFeatures}.\n * @property {FilterFunction} [filter] A function\n * that takes an {@link module:ol/Feature} and an\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\n * selected or `false` otherwise.\n * @property {boolean} [wrapX=true] Wrap the world horizontally on the selection\n * overlay.\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside\n * the radius around the given position will be checked for features. This only\n * works for the canvas renderer and not for WebGL.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of\n * this type.\n */\nvar SelectEvent = /*@__PURE__*/function (Event) {\n  function SelectEvent(type, selected, deselected, mapBrowserEvent) {\n    Event.call(this, type);\n\n    /**\n     * Selected features array.\n     * @type {Array<import(\"../Feature.js\").default>}\n     * @api\n     */\n    this.selected = selected;\n\n    /**\n     * Deselected features array.\n     * @type {Array<import(\"../Feature.js\").default>}\n     * @api\n     */\n    this.deselected = deselected;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n  if (Event) SelectEvent.__proto__ = Event;\n  SelectEvent.prototype = Object.create(Event && Event.prototype);\n  SelectEvent.prototype.constructor = SelectEvent;\n  return SelectEvent;\n}(Event);\n\n/**\n * @classdesc\n * Interaction for selecting vector features. By default, selected features are\n * styled differently, so this interaction can be used for visual highlighting,\n * as well as selecting features for other actions, such as modification or\n * output. There are three ways of controlling which features are selected:\n * using the browser event as defined by the `condition` and optionally the\n * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a\n * further feature filter using the `filter` option.\n *\n * Selected features are added to an internal unmanaged layer.\n *\n * @fires SelectEvent\n * @api\n */\nvar Select = /*@__PURE__*/function (Interaction) {\n  function Select(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : singleClick;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.addCondition_ = options.addCondition ? options.addCondition : never;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.removeCondition_ = options.removeCondition ? options.removeCondition : never;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : shiftKeyOnly;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multi_ = options.multi ? options.multi : false;\n\n    /**\n     * @private\n     * @type {FilterFunction}\n     */\n    this.filter_ = options.filter ? options.filter : TRUE;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n    var featureOverlay = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        features: options.features,\n        wrapX: options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @private\n     * @type {VectorLayer}\n     */\n    this.featureOverlay_ = featureOverlay;\n\n    /** @type {function(import(\"../layer/Layer.js\").default): boolean} */\n    var layerFilter;\n    if (options.layers) {\n      if (typeof options.layers === 'function') {\n        layerFilter = options.layers;\n      } else {\n        var layers = options.layers;\n        layerFilter = function (layer) {\n          return includes(layers, layer);\n        };\n      }\n    } else {\n      layerFilter = TRUE;\n    }\n\n    /**\n     * @private\n     * @type {function(import(\"../layer/Layer.js\").default): boolean}\n     */\n    this.layerFilter_ = layerFilter;\n\n    /**\n     * An association between selected feature (key)\n     * and layer (value)\n     * @private\n     * @type {Object<string, import(\"../layer/Layer.js\").default>}\n     */\n    this.featureLayerAssociation_ = {};\n    var features = this.getFeatures();\n    listen(features, CollectionEventType.ADD, this.addFeature_, this);\n    listen(features, CollectionEventType.REMOVE, this.removeFeature_, this);\n  }\n  if (Interaction) Select.__proto__ = Interaction;\n  Select.prototype = Object.create(Interaction && Interaction.prototype);\n  Select.prototype.constructor = Select;\n\n  /**\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {import(\"../layer/Layer.js\").default} layer Layer.\n   * @private\n   */\n  Select.prototype.addFeatureLayerAssociation_ = function addFeatureLayerAssociation_(feature, layer) {\n    this.featureLayerAssociation_[getUid(feature)] = layer;\n  };\n\n  /**\n   * Get the selected features.\n   * @return {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} Features collection.\n   * @api\n   */\n  Select.prototype.getFeatures = function getFeatures() {\n    return (/** @type {VectorSource} */this.featureOverlay_.getSource().getFeaturesCollection()\n    );\n  };\n\n  /**\n   * Returns the Hit-detection tolerance.\n   * @returns {number} Hit tolerance in pixels.\n   * @api\n   */\n  Select.prototype.getHitTolerance = function getHitTolerance() {\n    return this.hitTolerance_;\n  };\n\n  /**\n   * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of\n   * the (last) selected feature. Note that this will not work with any\n   * programmatic method like pushing features to\n   * {@link module:ol/interaction/Select~Select#getFeatures collection}.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature\n   * @return {VectorLayer} Layer.\n   * @api\n   */\n  Select.prototype.getLayer = function getLayer(feature) {\n    return (/** @type {VectorLayer} */this.featureLayerAssociation_[getUid(feature)]\n    );\n  };\n\n  /**\n   * Get the overlay layer that this interaction renders selected features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Select.prototype.getOverlay = function getOverlay() {\n    return this.featureOverlay_;\n  };\n\n  /**\n   * Hit-detection tolerance. Pixels inside the radius around the given position\n   * will be checked for features. This only works for the canvas renderer and\n   * not for WebGL.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @api\n   */\n  Select.prototype.setHitTolerance = function setHitTolerance(hitTolerance) {\n    this.hitTolerance_ = hitTolerance;\n  };\n\n  /**\n   * Remove the interaction from its current map, if any,  and attach it to a new\n   * map, if any. Pass `null` to just remove the interaction from the current map.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @override\n   * @api\n   */\n  Select.prototype.setMap = function setMap(map) {\n    var currentMap = this.getMap();\n    var selectedFeatures = this.getFeatures();\n    if (currentMap) {\n      selectedFeatures.forEach(currentMap.unskipFeature.bind(currentMap));\n    }\n    Interaction.prototype.setMap.call(this, map);\n    this.featureOverlay_.setMap(map);\n    if (map) {\n      selectedFeatures.forEach(map.skipFeature.bind(map));\n    }\n  };\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Select.prototype.addFeature_ = function addFeature_(evt) {\n    var map = this.getMap();\n    if (map) {\n      map.skipFeature( /** @type {import(\"../Feature.js\").default} */evt.element);\n    }\n  };\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Select.prototype.removeFeature_ = function removeFeature_(evt) {\n    var map = this.getMap();\n    if (map) {\n      map.unskipFeature( /** @type {import(\"../Feature.js\").default} */evt.element);\n    }\n  };\n\n  /**\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @private\n   */\n  Select.prototype.removeFeatureLayerAssociation_ = function removeFeatureLayerAssociation_(feature) {\n    delete this.featureLayerAssociation_[getUid(feature)];\n  };\n  return Select;\n}(Interaction);\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the\n * selected state of features.\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {Select}\n */\nfunction handleEvent(mapBrowserEvent) {\n  if (!this.condition_(mapBrowserEvent)) {\n    return true;\n  }\n  var add = this.addCondition_(mapBrowserEvent);\n  var remove = this.removeCondition_(mapBrowserEvent);\n  var toggle = this.toggleCondition_(mapBrowserEvent);\n  var set = !add && !remove && !toggle;\n  var map = mapBrowserEvent.map;\n  var features = this.getFeatures();\n  var deselected = [];\n  var selected = [];\n  if (set) {\n    // Replace the currently selected feature(s) with the feature(s) at the\n    // pixel, or clear the selected feature(s) if there is no feature at\n    // the pixel.\n    clear(this.featureLayerAssociation_);\n    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,\n    /**\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\n     * @return {boolean|undefined} Continue to iterate over the features.\n     */\n    function (feature, layer) {\n      if (this.filter_(feature, layer)) {\n        selected.push(feature);\n        this.addFeatureLayerAssociation_(feature, layer);\n        return !this.multi_;\n      }\n    }.bind(this), {\n      layerFilter: this.layerFilter_,\n      hitTolerance: this.hitTolerance_\n    });\n    for (var i = features.getLength() - 1; i >= 0; --i) {\n      var feature = features.item(i);\n      var index = selected.indexOf(feature);\n      if (index > -1) {\n        // feature is already selected\n        selected.splice(index, 1);\n      } else {\n        features.remove(feature);\n        deselected.push(feature);\n      }\n    }\n    if (selected.length !== 0) {\n      features.extend(selected);\n    }\n  } else {\n    // Modify the currently selected feature(s).\n    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,\n    /**\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\n     * @return {boolean|undefined} Continue to iterate over the features.\n     */\n    function (feature, layer) {\n      if (this.filter_(feature, layer)) {\n        if ((add || toggle) && !includes(features.getArray(), feature)) {\n          selected.push(feature);\n          this.addFeatureLayerAssociation_(feature, layer);\n        } else if ((remove || toggle) && includes(features.getArray(), feature)) {\n          deselected.push(feature);\n          this.removeFeatureLayerAssociation_(feature);\n        }\n        return !this.multi_;\n      }\n    }.bind(this), {\n      layerFilter: this.layerFilter_,\n      hitTolerance: this.hitTolerance_\n    });\n    for (var j = deselected.length - 1; j >= 0; --j) {\n      features.remove(deselected[j]);\n    }\n    features.extend(selected);\n  }\n  if (selected.length > 0 || deselected.length > 0) {\n    this.dispatchEvent(new SelectEvent(SelectEventType.SELECT, selected, deselected, mapBrowserEvent));\n  }\n  return pointerMove(mapBrowserEvent);\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  extend(styles[GeometryType.POLYGON], styles[GeometryType.LINE_STRING]);\n  extend(styles[GeometryType.GEOMETRY_COLLECTION], styles[GeometryType.LINE_STRING]);\n  return function (feature, resolution) {\n    if (!feature.getGeometry()) {\n      return null;\n    }\n    return styles[feature.getGeometry().getType()];\n  };\n}\nexport default Select;","map":{"version":3,"names":["getUid","CollectionEventType","extend","includes","listen","Event","singleClick","never","shiftKeyOnly","pointerMove","TRUE","GeometryType","Interaction","VectorLayer","clear","VectorSource","createEditingStyle","SelectEventType","SELECT","SelectEvent","type","selected","deselected","mapBrowserEvent","call","prototype","constructor","Select","opt_options","handleEvent","options","condition_","condition","addCondition_","addCondition","removeCondition_","removeCondition","toggleCondition_","toggleCondition","multi_","multi","filter_","filter","hitTolerance_","hitTolerance","featureOverlay","source","useSpatialIndex","features","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","featureOverlay_","layerFilter","layers","layer","layerFilter_","featureLayerAssociation_","getFeatures","ADD","addFeature_","REMOVE","removeFeature_","addFeatureLayerAssociation_","feature","getSource","getFeaturesCollection","getHitTolerance","getLayer","getOverlay","setHitTolerance","setMap","map","currentMap","getMap","selectedFeatures","forEach","unskipFeature","bind","skipFeature","evt","element","removeFeatureLayerAssociation_","add","remove","toggle","set","forEachFeatureAtPixel","pixel","push","i","getLength","item","index","indexOf","splice","length","getArray","j","dispatchEvent","styles","POLYGON","LINE_STRING","GEOMETRY_COLLECTION","resolution","getGeometry","getType"],"sources":["../../../src/ol/interaction/Select.js"],"sourcesContent":["/**\n * @module ol/interaction/Select\n */\nimport {getUid} from '../util.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport {extend, includes} from '../array.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport {singleClick, never, shiftKeyOnly, pointerMove} from '../events/condition.js';\nimport {TRUE} from '../functions.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Interaction from './Interaction.js';\nimport VectorLayer from '../layer/Vector.js';\nimport {clear} from '../obj.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @enum {string}\n */\nconst SelectEventType = {\n  /**\n   * Triggered when feature(s) has been (de)selected.\n   * @event SelectEvent#select\n   * @api\n   */\n  SELECT: 'select'\n};\n\n\n/**\n * A function that takes an {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and an\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\n * selected or `false` otherwise.\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default):boolean} FilterFunction\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [addCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default, this is {@link module:ol/events/condition~never}. Use this if you\n * want to use different events for add and remove instead of `toggle`.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. This is the event\n * for the selected features as a whole. By default, this is\n * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that\n * feature and removes any that were in the selection. Clicking outside any\n * feature removes all from the selection.\n * See `toggle`, `add`, `remove` options for adding/removing extra features to/\n * from the selection.\n * @property {Array<import(\"../layer/Layer.js\").default>|function(import(\"../layer/Layer.js\").default): boolean} [layers]\n * A list of layers from which features should be selected. Alternatively, a\n * filter function can be provided. The function will be called for each layer\n * in the map and should return `true` for layers that you want to be\n * selectable. If the option is absent, all visible layers will be considered\n * selectable.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for the selected features. By default the default edit style is used\n * (see {@link module:ol/style}).\n * @property {import(\"../events/condition.js\").Condition} [removeCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default, this is {@link module:ol/events/condition~never}. Use this if you\n * want to use different events for add and remove instead of `toggle`.\n * @property {import(\"../events/condition.js\").Condition} [toggleCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. This is in addition\n * to the `condition` event. By default,\n * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as\n * well as the `condition` event, adds that feature to the current selection if\n * it is not currently selected, and removes it if it is. See `add` and `remove`\n * if you want to use different events instead of a toggle.\n * @property {boolean} [multi=false] A boolean that determines if the default\n * behaviour should select only single features or all (overlapping) features at\n * the clicked map position. The default of `false` means single select.\n * @property {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} [features]\n * Collection where the interaction will place selected features. Optional. If\n * not set the interaction will create a collection. In any case the collection\n * used by the interaction is returned by\n * {@link module:ol/interaction/Select~Select#getFeatures}.\n * @property {FilterFunction} [filter] A function\n * that takes an {@link module:ol/Feature} and an\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\n * selected or `false` otherwise.\n * @property {boolean} [wrapX=true] Wrap the world horizontally on the selection\n * overlay.\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside\n * the radius around the given position will be checked for features. This only\n * works for the canvas renderer and not for WebGL.\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of\n * this type.\n */\nclass SelectEvent extends Event {\n  /**\n   * @param {SelectEventType} type The event type.\n   * @param {Array<import(\"../Feature.js\").default>} selected Selected features.\n   * @param {Array<import(\"../Feature.js\").default>} deselected Deselected features.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Associated\n   *     {@link module:ol/MapBrowserEvent}.\n   */\n  constructor(type, selected, deselected, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * Selected features array.\n     * @type {Array<import(\"../Feature.js\").default>}\n     * @api\n     */\n    this.selected = selected;\n\n    /**\n     * Deselected features array.\n     * @type {Array<import(\"../Feature.js\").default>}\n     * @api\n     */\n    this.deselected = deselected;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for selecting vector features. By default, selected features are\n * styled differently, so this interaction can be used for visual highlighting,\n * as well as selecting features for other actions, such as modification or\n * output. There are three ways of controlling which features are selected:\n * using the browser event as defined by the `condition` and optionally the\n * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a\n * further feature filter using the `filter` option.\n *\n * Selected features are added to an internal unmanaged layer.\n *\n * @fires SelectEvent\n * @api\n */\nclass Select extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleEvent: handleEvent\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : singleClick;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.addCondition_ = options.addCondition ? options.addCondition : never;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.removeCondition_ = options.removeCondition ? options.removeCondition : never;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.toggleCondition_ = options.toggleCondition ? options.toggleCondition : shiftKeyOnly;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multi_ = options.multi ? options.multi : false;\n\n    /**\n     * @private\n     * @type {FilterFunction}\n     */\n    this.filter_ = options.filter ? options.filter : TRUE;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n\n    const featureOverlay = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        features: options.features,\n        wrapX: options.wrapX\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @private\n     * @type {VectorLayer}\n     */\n    this.featureOverlay_ = featureOverlay;\n\n    /** @type {function(import(\"../layer/Layer.js\").default): boolean} */\n    let layerFilter;\n    if (options.layers) {\n      if (typeof options.layers === 'function') {\n        layerFilter = options.layers;\n      } else {\n        const layers = options.layers;\n        layerFilter = function(layer) {\n          return includes(layers, layer);\n        };\n      }\n    } else {\n      layerFilter = TRUE;\n    }\n\n    /**\n     * @private\n     * @type {function(import(\"../layer/Layer.js\").default): boolean}\n     */\n    this.layerFilter_ = layerFilter;\n\n    /**\n     * An association between selected feature (key)\n     * and layer (value)\n     * @private\n     * @type {Object<string, import(\"../layer/Layer.js\").default>}\n     */\n    this.featureLayerAssociation_ = {};\n\n    const features = this.getFeatures();\n    listen(features, CollectionEventType.ADD,\n      this.addFeature_, this);\n    listen(features, CollectionEventType.REMOVE,\n      this.removeFeature_, this);\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {import(\"../layer/Layer.js\").default} layer Layer.\n   * @private\n   */\n  addFeatureLayerAssociation_(feature, layer) {\n    this.featureLayerAssociation_[getUid(feature)] = layer;\n  }\n\n  /**\n   * Get the selected features.\n   * @return {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} Features collection.\n   * @api\n   */\n  getFeatures() {\n    return /** @type {VectorSource} */ (this.featureOverlay_.getSource()).getFeaturesCollection();\n  }\n\n  /**\n   * Returns the Hit-detection tolerance.\n   * @returns {number} Hit tolerance in pixels.\n   * @api\n   */\n  getHitTolerance() {\n    return this.hitTolerance_;\n  }\n\n  /**\n   * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of\n   * the (last) selected feature. Note that this will not work with any\n   * programmatic method like pushing features to\n   * {@link module:ol/interaction/Select~Select#getFeatures collection}.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature\n   * @return {VectorLayer} Layer.\n   * @api\n   */\n  getLayer(feature) {\n    return (\n      /** @type {VectorLayer} */ (this.featureLayerAssociation_[getUid(feature)])\n    );\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders selected features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.featureOverlay_;\n  }\n\n  /**\n   * Hit-detection tolerance. Pixels inside the radius around the given position\n   * will be checked for features. This only works for the canvas renderer and\n   * not for WebGL.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @api\n   */\n  setHitTolerance(hitTolerance) {\n    this.hitTolerance_ = hitTolerance;\n  }\n\n  /**\n   * Remove the interaction from its current map, if any,  and attach it to a new\n   * map, if any. Pass `null` to just remove the interaction from the current map.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @override\n   * @api\n   */\n  setMap(map) {\n    const currentMap = this.getMap();\n    const selectedFeatures = this.getFeatures();\n    if (currentMap) {\n      selectedFeatures.forEach(currentMap.unskipFeature.bind(currentMap));\n    }\n    super.setMap(map);\n    this.featureOverlay_.setMap(map);\n    if (map) {\n      selectedFeatures.forEach(map.skipFeature.bind(map));\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  addFeature_(evt) {\n    const map = this.getMap();\n    if (map) {\n      map.skipFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  removeFeature_(evt) {\n    const map = this.getMap();\n    if (map) {\n      map.unskipFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n    }\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @private\n   */\n  removeFeatureLayerAssociation_(feature) {\n    delete this.featureLayerAssociation_[getUid(feature)];\n  }\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the\n * selected state of features.\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {Select}\n */\nfunction handleEvent(mapBrowserEvent) {\n  if (!this.condition_(mapBrowserEvent)) {\n    return true;\n  }\n  const add = this.addCondition_(mapBrowserEvent);\n  const remove = this.removeCondition_(mapBrowserEvent);\n  const toggle = this.toggleCondition_(mapBrowserEvent);\n  const set = !add && !remove && !toggle;\n  const map = mapBrowserEvent.map;\n  const features = this.getFeatures();\n  const deselected = [];\n  const selected = [];\n  if (set) {\n    // Replace the currently selected feature(s) with the feature(s) at the\n    // pixel, or clear the selected feature(s) if there is no feature at\n    // the pixel.\n    clear(this.featureLayerAssociation_);\n    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,\n      (\n        /**\n         * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../layer/Layer.js\").default} layer Layer.\n         * @return {boolean|undefined} Continue to iterate over the features.\n         */\n        function(feature, layer) {\n          if (this.filter_(feature, layer)) {\n            selected.push(feature);\n            this.addFeatureLayerAssociation_(feature, layer);\n            return !this.multi_;\n          }\n        }).bind(this), {\n        layerFilter: this.layerFilter_,\n        hitTolerance: this.hitTolerance_\n      });\n    for (let i = features.getLength() - 1; i >= 0; --i) {\n      const feature = features.item(i);\n      const index = selected.indexOf(feature);\n      if (index > -1) {\n        // feature is already selected\n        selected.splice(index, 1);\n      } else {\n        features.remove(feature);\n        deselected.push(feature);\n      }\n    }\n    if (selected.length !== 0) {\n      features.extend(selected);\n    }\n  } else {\n    // Modify the currently selected feature(s).\n    map.forEachFeatureAtPixel(mapBrowserEvent.pixel,\n      (\n        /**\n         * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../layer/Layer.js\").default} layer Layer.\n         * @return {boolean|undefined} Continue to iterate over the features.\n         */\n        function(feature, layer) {\n          if (this.filter_(feature, layer)) {\n            if ((add || toggle) && !includes(features.getArray(), feature)) {\n              selected.push(feature);\n              this.addFeatureLayerAssociation_(feature, layer);\n            } else if ((remove || toggle) && includes(features.getArray(), feature)) {\n              deselected.push(feature);\n              this.removeFeatureLayerAssociation_(feature);\n            }\n            return !this.multi_;\n          }\n        }).bind(this), {\n        layerFilter: this.layerFilter_,\n        hitTolerance: this.hitTolerance_\n      });\n    for (let j = deselected.length - 1; j >= 0; --j) {\n      features.remove(deselected[j]);\n    }\n    features.extend(selected);\n  }\n  if (selected.length > 0 || deselected.length > 0) {\n    this.dispatchEvent(\n      new SelectEvent(SelectEventType.SELECT,\n        selected, deselected, mapBrowserEvent));\n  }\n  return pointerMove(mapBrowserEvent);\n}\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  extend(styles[GeometryType.POLYGON], styles[GeometryType.LINE_STRING]);\n  extend(styles[GeometryType.GEOMETRY_COLLECTION], styles[GeometryType.LINE_STRING]);\n\n  return function(feature, resolution) {\n    if (!feature.getGeometry()) {\n      return null;\n    }\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n\nexport default Select;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}