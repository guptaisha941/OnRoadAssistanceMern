{"ast":null,"code":"/**\n * @module ol/pointer/PointerEventHandler\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport { listen, unlisten } from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport { POINTER, MSPOINTER, TOUCH } from '../has.js';\nimport PointerEventType from './EventType.js';\nimport MouseSource, { prepareEvent as prepareMouseEvent } from './MouseSource.js';\nimport MsSource from './MsSource.js';\nimport NativeSource from './NativeSource.js';\nimport PointerEvent from './PointerEvent.js';\nimport TouchSource from './TouchSource.js';\n\n/**\n * Properties to copy when cloning an event, with default values.\n * @type {Array<Array>}\n */\nvar CLONE_PROPS = [\n// MouseEvent\n['bubbles', false], ['cancelable', false], ['view', null], ['detail', null], ['screenX', 0], ['screenY', 0], ['clientX', 0], ['clientY', 0], ['ctrlKey', false], ['altKey', false], ['shiftKey', false], ['metaKey', false], ['button', 0], ['relatedTarget', null],\n// DOM Level 3\n['buttons', 0],\n// PointerEvent\n['pointerId', 0], ['width', 0], ['height', 0], ['pressure', 0], ['tiltX', 0], ['tiltY', 0], ['pointerType', ''], ['hwTimestamp', 0], ['isPrimary', false],\n// event instance\n['type', ''], ['target', null], ['currentTarget', null], ['which', 0]];\nvar PointerEventHandler = /*@__PURE__*/function (EventTarget) {\n  function PointerEventHandler(element) {\n    EventTarget.call(this);\n\n    /**\n     * @const\n     * @private\n     * @type {Element|HTMLDocument}\n     */\n    this.element_ = element;\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = {};\n\n    /**\n     * @type {Object<string, function(Event)>}\n     * @private\n     */\n    this.eventMap_ = {};\n\n    /**\n     * @type {Array<import(\"./EventSource.js\").default>}\n     * @private\n     */\n    this.eventSourceList_ = [];\n    this.registerSources();\n  }\n  if (EventTarget) PointerEventHandler.__proto__ = EventTarget;\n  PointerEventHandler.prototype = Object.create(EventTarget && EventTarget.prototype);\n  PointerEventHandler.prototype.constructor = PointerEventHandler;\n\n  /**\n   * Set up the event sources (mouse, touch and native pointers)\n   * that generate pointer events.\n   */\n  PointerEventHandler.prototype.registerSources = function registerSources() {\n    if (POINTER) {\n      this.registerSource('native', new NativeSource(this));\n    } else if (MSPOINTER) {\n      this.registerSource('ms', new MsSource(this));\n    } else {\n      var mouseSource = new MouseSource(this);\n      this.registerSource('mouse', mouseSource);\n      if (TOUCH) {\n        this.registerSource('touch', new TouchSource(this, mouseSource));\n      }\n    }\n\n    // register events on the viewport element\n    this.register_();\n  };\n\n  /**\n   * Add a new event source that will generate pointer events.\n   *\n   * @param {string} name A name for the event source\n   * @param {import(\"./EventSource.js\").default} source The source event.\n   */\n  PointerEventHandler.prototype.registerSource = function registerSource(name, source) {\n    var s = source;\n    var newEvents = s.getEvents();\n    if (newEvents) {\n      newEvents.forEach(function (e) {\n        var handler = s.getHandlerForEvent(e);\n        if (handler) {\n          this.eventMap_[e] = handler.bind(s);\n        }\n      }.bind(this));\n      this.eventSourceList_.push(s);\n    }\n  };\n\n  /**\n   * Set up the events for all registered event sources.\n   * @private\n   */\n  PointerEventHandler.prototype.register_ = function register_() {\n    var l = this.eventSourceList_.length;\n    for (var i = 0; i < l; i++) {\n      var eventSource = this.eventSourceList_[i];\n      this.addEvents_(eventSource.getEvents());\n    }\n  };\n\n  /**\n   * Remove all registered events.\n   * @private\n   */\n  PointerEventHandler.prototype.unregister_ = function unregister_() {\n    var l = this.eventSourceList_.length;\n    for (var i = 0; i < l; i++) {\n      var eventSource = this.eventSourceList_[i];\n      this.removeEvents_(eventSource.getEvents());\n    }\n  };\n\n  /**\n   * Calls the right handler for a new event.\n   * @private\n   * @param {Event} inEvent Browser event.\n   */\n  PointerEventHandler.prototype.eventHandler_ = function eventHandler_(inEvent) {\n    var type = inEvent.type;\n    var handler = this.eventMap_[type];\n    if (handler) {\n      handler(inEvent);\n    }\n  };\n\n  /**\n   * Setup listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n  PointerEventHandler.prototype.addEvents_ = function addEvents_(events) {\n    events.forEach(function (eventName) {\n      listen(this.element_, eventName, this.eventHandler_, this);\n    }.bind(this));\n  };\n\n  /**\n   * Unregister listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n  PointerEventHandler.prototype.removeEvents_ = function removeEvents_(events) {\n    events.forEach(function (e) {\n      unlisten(this.element_, e, this.eventHandler_, this);\n    }.bind(this));\n  };\n\n  /**\n   * Returns a snapshot of inEvent, with writable properties.\n   *\n   * @param {Event} event Browser event.\n   * @param {Event|Touch} inEvent An event that contains\n   *    properties to copy.\n   * @return {Object} An object containing shallow copies of\n   *    `inEvent`'s properties.\n   */\n  PointerEventHandler.prototype.cloneEvent = function cloneEvent(event, inEvent) {\n    var eventCopy = {};\n    for (var i = 0, ii = CLONE_PROPS.length; i < ii; i++) {\n      var p = CLONE_PROPS[i][0];\n      eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];\n    }\n    return eventCopy;\n  };\n\n  // EVENTS\n\n  /**\n   * Triggers a 'pointerdown' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.down = function down(data, event) {\n    this.fireEvent(PointerEventType.POINTERDOWN, data, event);\n  };\n\n  /**\n   * Triggers a 'pointermove' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.move = function move(data, event) {\n    this.fireEvent(PointerEventType.POINTERMOVE, data, event);\n  };\n\n  /**\n   * Triggers a 'pointerup' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.up = function up(data, event) {\n    this.fireEvent(PointerEventType.POINTERUP, data, event);\n  };\n\n  /**\n   * Triggers a 'pointerenter' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.enter = function enter(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERENTER, data, event);\n  };\n\n  /**\n   * Triggers a 'pointerleave' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.leave = function leave(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERLEAVE, data, event);\n  };\n\n  /**\n   * Triggers a 'pointerover' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.over = function over(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROVER, data, event);\n  };\n\n  /**\n   * Triggers a 'pointerout' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.out = function out(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROUT, data, event);\n  };\n\n  /**\n   * Triggers a 'pointercancel' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.cancel = function cancel(data, event) {\n    this.fireEvent(PointerEventType.POINTERCANCEL, data, event);\n  };\n\n  /**\n   * Triggers a combination of 'pointerout' and 'pointerleave' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.leaveOut = function leaveOut(data, event) {\n    this.out(data, event);\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.leave(data, event);\n    }\n  };\n\n  /**\n   * Triggers a combination of 'pointerover' and 'pointerevents' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.enterOver = function enterOver(data, event) {\n    this.over(data, event);\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.enter(data, event);\n    }\n  };\n\n  /**\n   * @private\n   * @param {Element} container The container element.\n   * @param {Element} contained The contained element.\n   * @return {boolean} Returns true if the container element\n   *   contains the other element.\n   */\n  PointerEventHandler.prototype.contains_ = function contains_(container, contained) {\n    if (!container || !contained) {\n      return false;\n    }\n    return container.contains(contained);\n  };\n\n  // EVENT CREATION AND TRACKING\n  /**\n   * Creates a new Event of type `inType`, based on the information in\n   * `data`.\n   *\n   * @param {string} inType A string representing the type of event to create.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   * @return {PointerEvent} A PointerEvent of type `inType`.\n   */\n  PointerEventHandler.prototype.makeEvent = function makeEvent(inType, data, event) {\n    return new PointerEvent(inType, event, data);\n  };\n\n  /**\n   * Make and dispatch an event in one call.\n   * @param {string} inType A string representing the type of event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  PointerEventHandler.prototype.fireEvent = function fireEvent(inType, data, event) {\n    var e = this.makeEvent(inType, data, event);\n    this.dispatchEvent(e);\n  };\n\n  /**\n   * Creates a pointer event from a native pointer event\n   * and dispatches this event.\n   * @param {Event} event A platform event with a target.\n   */\n  PointerEventHandler.prototype.fireNativeEvent = function fireNativeEvent(event) {\n    var e = this.makeEvent(event.type, event, event);\n    this.dispatchEvent(e);\n  };\n\n  /**\n   * Wrap a native mouse event into a pointer event.\n   * This proxy method is required for the legacy IE support.\n   * @param {string} eventType The pointer event type.\n   * @param {Event} event The event.\n   * @return {PointerEvent} The wrapped event.\n   */\n  PointerEventHandler.prototype.wrapMouseEvent = function wrapMouseEvent(eventType, event) {\n    var pointerEvent = this.makeEvent(eventType, prepareMouseEvent(event, this), event);\n    return pointerEvent;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PointerEventHandler.prototype.disposeInternal = function disposeInternal() {\n    this.unregister_();\n    EventTarget.prototype.disposeInternal.call(this);\n  };\n  return PointerEventHandler;\n}(EventTarget);\nexport default PointerEventHandler;","map":{"version":3,"names":["listen","unlisten","EventTarget","POINTER","MSPOINTER","TOUCH","PointerEventType","MouseSource","prepareEvent","prepareMouseEvent","MsSource","NativeSource","PointerEvent","TouchSource","CLONE_PROPS","PointerEventHandler","element","call","element_","pointerMap","eventMap_","eventSourceList_","registerSources","registerSource","mouseSource","register_","name","source","s","newEvents","getEvents","forEach","e","handler","getHandlerForEvent","bind","push","l","length","i","eventSource","addEvents_","unregister_","removeEvents_","eventHandler_","inEvent","type","events","eventName","cloneEvent","event","eventCopy","ii","p","down","data","fireEvent","POINTERDOWN","move","POINTERMOVE","up","POINTERUP","enter","bubbles","POINTERENTER","leave","POINTERLEAVE","over","POINTEROVER","out","POINTEROUT","cancel","POINTERCANCEL","leaveOut","contains_","target","relatedTarget","enterOver","container","contained","contains","makeEvent","inType","dispatchEvent","fireNativeEvent","wrapMouseEvent","eventType","pointerEvent","disposeInternal","prototype"],"sources":["../../../src/ol/pointer/PointerEventHandler.js"],"sourcesContent":["/**\n * @module ol/pointer/PointerEventHandler\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport {listen, unlisten} from '../events.js';\nimport EventTarget from '../events/Target.js';\nimport {POINTER, MSPOINTER, TOUCH} from '../has.js';\nimport PointerEventType from './EventType.js';\nimport MouseSource, {prepareEvent as prepareMouseEvent} from './MouseSource.js';\nimport MsSource from './MsSource.js';\nimport NativeSource from './NativeSource.js';\nimport PointerEvent from './PointerEvent.js';\nimport TouchSource from './TouchSource.js';\n\n\n/**\n * Properties to copy when cloning an event, with default values.\n * @type {Array<Array>}\n */\nconst CLONE_PROPS = [\n  // MouseEvent\n  ['bubbles', false],\n  ['cancelable', false],\n  ['view', null],\n  ['detail', null],\n  ['screenX', 0],\n  ['screenY', 0],\n  ['clientX', 0],\n  ['clientY', 0],\n  ['ctrlKey', false],\n  ['altKey', false],\n  ['shiftKey', false],\n  ['metaKey', false],\n  ['button', 0],\n  ['relatedTarget', null],\n  // DOM Level 3\n  ['buttons', 0],\n  // PointerEvent\n  ['pointerId', 0],\n  ['width', 0],\n  ['height', 0],\n  ['pressure', 0],\n  ['tiltX', 0],\n  ['tiltY', 0],\n  ['pointerType', ''],\n  ['hwTimestamp', 0],\n  ['isPrimary', false],\n  // event instance\n  ['type', ''],\n  ['target', null],\n  ['currentTarget', null],\n  ['which', 0]\n];\n\n\nclass PointerEventHandler extends EventTarget {\n\n  /**\n   * @param {Element|HTMLDocument} element Viewport element.\n   */\n  constructor(element) {\n    super();\n\n    /**\n     * @const\n     * @private\n     * @type {Element|HTMLDocument}\n     */\n    this.element_ = element;\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = {};\n\n    /**\n     * @type {Object<string, function(Event)>}\n     * @private\n     */\n    this.eventMap_ = {};\n\n    /**\n     * @type {Array<import(\"./EventSource.js\").default>}\n     * @private\n     */\n    this.eventSourceList_ = [];\n\n    this.registerSources();\n  }\n\n  /**\n   * Set up the event sources (mouse, touch and native pointers)\n   * that generate pointer events.\n   */\n  registerSources() {\n    if (POINTER) {\n      this.registerSource('native', new NativeSource(this));\n    } else if (MSPOINTER) {\n      this.registerSource('ms', new MsSource(this));\n    } else {\n      const mouseSource = new MouseSource(this);\n      this.registerSource('mouse', mouseSource);\n\n      if (TOUCH) {\n        this.registerSource('touch', new TouchSource(this, mouseSource));\n      }\n    }\n\n    // register events on the viewport element\n    this.register_();\n  }\n\n  /**\n   * Add a new event source that will generate pointer events.\n   *\n   * @param {string} name A name for the event source\n   * @param {import(\"./EventSource.js\").default} source The source event.\n   */\n  registerSource(name, source) {\n    const s = source;\n    const newEvents = s.getEvents();\n\n    if (newEvents) {\n      newEvents.forEach(function(e) {\n        const handler = s.getHandlerForEvent(e);\n\n        if (handler) {\n          this.eventMap_[e] = handler.bind(s);\n        }\n      }.bind(this));\n      this.eventSourceList_.push(s);\n    }\n  }\n\n  /**\n   * Set up the events for all registered event sources.\n   * @private\n   */\n  register_() {\n    const l = this.eventSourceList_.length;\n    for (let i = 0; i < l; i++) {\n      const eventSource = this.eventSourceList_[i];\n      this.addEvents_(eventSource.getEvents());\n    }\n  }\n\n  /**\n   * Remove all registered events.\n   * @private\n   */\n  unregister_() {\n    const l = this.eventSourceList_.length;\n    for (let i = 0; i < l; i++) {\n      const eventSource = this.eventSourceList_[i];\n      this.removeEvents_(eventSource.getEvents());\n    }\n  }\n\n  /**\n   * Calls the right handler for a new event.\n   * @private\n   * @param {Event} inEvent Browser event.\n   */\n  eventHandler_(inEvent) {\n    const type = inEvent.type;\n    const handler = this.eventMap_[type];\n    if (handler) {\n      handler(inEvent);\n    }\n  }\n\n  /**\n   * Setup listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n  addEvents_(events) {\n    events.forEach(function(eventName) {\n      listen(this.element_, eventName, this.eventHandler_, this);\n    }.bind(this));\n  }\n\n  /**\n   * Unregister listeners for the given events.\n   * @private\n   * @param {Array<string>} events List of events.\n   */\n  removeEvents_(events) {\n    events.forEach(function(e) {\n      unlisten(this.element_, e, this.eventHandler_, this);\n    }.bind(this));\n  }\n\n  /**\n   * Returns a snapshot of inEvent, with writable properties.\n   *\n   * @param {Event} event Browser event.\n   * @param {Event|Touch} inEvent An event that contains\n   *    properties to copy.\n   * @return {Object} An object containing shallow copies of\n   *    `inEvent`'s properties.\n   */\n  cloneEvent(event, inEvent) {\n    const eventCopy = {};\n    for (let i = 0, ii = CLONE_PROPS.length; i < ii; i++) {\n      const p = CLONE_PROPS[i][0];\n      eventCopy[p] = event[p] || inEvent[p] || CLONE_PROPS[i][1];\n    }\n\n    return eventCopy;\n  }\n\n  // EVENTS\n\n\n  /**\n   * Triggers a 'pointerdown' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  down(data, event) {\n    this.fireEvent(PointerEventType.POINTERDOWN, data, event);\n  }\n\n  /**\n   * Triggers a 'pointermove' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  move(data, event) {\n    this.fireEvent(PointerEventType.POINTERMOVE, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerup' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  up(data, event) {\n    this.fireEvent(PointerEventType.POINTERUP, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerenter' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  enter(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERENTER, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerleave' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  leave(data, event) {\n    data.bubbles = false;\n    this.fireEvent(PointerEventType.POINTERLEAVE, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerover' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  over(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROVER, data, event);\n  }\n\n  /**\n   * Triggers a 'pointerout' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  out(data, event) {\n    data.bubbles = true;\n    this.fireEvent(PointerEventType.POINTEROUT, data, event);\n  }\n\n  /**\n   * Triggers a 'pointercancel' event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  cancel(data, event) {\n    this.fireEvent(PointerEventType.POINTERCANCEL, data, event);\n  }\n\n  /**\n   * Triggers a combination of 'pointerout' and 'pointerleave' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  leaveOut(data, event) {\n    this.out(data, event);\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.leave(data, event);\n    }\n  }\n\n  /**\n   * Triggers a combination of 'pointerover' and 'pointerevents' events.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  enterOver(data, event) {\n    this.over(data, event);\n    if (!this.contains_(data.target, data.relatedTarget)) {\n      this.enter(data, event);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Element} container The container element.\n   * @param {Element} contained The contained element.\n   * @return {boolean} Returns true if the container element\n   *   contains the other element.\n   */\n  contains_(container, contained) {\n    if (!container || !contained) {\n      return false;\n    }\n    return container.contains(contained);\n  }\n\n  // EVENT CREATION AND TRACKING\n  /**\n   * Creates a new Event of type `inType`, based on the information in\n   * `data`.\n   *\n   * @param {string} inType A string representing the type of event to create.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   * @return {PointerEvent} A PointerEvent of type `inType`.\n   */\n  makeEvent(inType, data, event) {\n    return new PointerEvent(inType, event, data);\n  }\n\n  /**\n   * Make and dispatch an event in one call.\n   * @param {string} inType A string representing the type of event.\n   * @param {Object} data Pointer event data.\n   * @param {Event} event The event.\n   */\n  fireEvent(inType, data, event) {\n    const e = this.makeEvent(inType, data, event);\n    this.dispatchEvent(e);\n  }\n\n  /**\n   * Creates a pointer event from a native pointer event\n   * and dispatches this event.\n   * @param {Event} event A platform event with a target.\n   */\n  fireNativeEvent(event) {\n    const e = this.makeEvent(event.type, event, event);\n    this.dispatchEvent(e);\n  }\n\n  /**\n   * Wrap a native mouse event into a pointer event.\n   * This proxy method is required for the legacy IE support.\n   * @param {string} eventType The pointer event type.\n   * @param {Event} event The event.\n   * @return {PointerEvent} The wrapped event.\n   */\n  wrapMouseEvent(eventType, event) {\n    const pointerEvent = this.makeEvent(\n      eventType, prepareMouseEvent(event, this), event);\n    return pointerEvent;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.unregister_();\n    super.disposeInternal();\n  }\n}\n\nexport default PointerEventHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}