{"ast":null,"code":"/**\n * @module ol/renderer/canvas/Layer\n */\nimport { abstract } from '../../util.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { TRUE } from '../../functions.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { rotateAtOffset } from '../../render/canvas.js';\nimport CanvasImmediateRenderer from '../../render/canvas/Immediate.js';\nimport LayerRenderer from '../Layer.js';\nimport { create as createTransform, apply as applyTransform, compose as composeTransform } from '../../transform.js';\n\n/**\n * @abstract\n */\nvar CanvasLayerRenderer = /*@__PURE__*/function (LayerRenderer) {\n  function CanvasLayerRenderer(layer) {\n    LayerRenderer.call(this, layer);\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = createTransform();\n  }\n  if (LayerRenderer) CanvasLayerRenderer.__proto__ = LayerRenderer;\n  CanvasLayerRenderer.prototype = Object.create(LayerRenderer && LayerRenderer.prototype);\n  CanvasLayerRenderer.prototype.constructor = CanvasLayerRenderer;\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.clip = function clip(context, frameState, extent) {\n    var pixelRatio = frameState.pixelRatio;\n    var width = frameState.size[0] * pixelRatio;\n    var height = frameState.size[1] * pixelRatio;\n    var rotation = frameState.viewState.rotation;\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    context.save();\n    rotateAtOffset(context, -rotation, width / 2, height / 2);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, width / 2, height / 2);\n  };\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @private\n   */\n  CanvasLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_(type, context, frameState, opt_transform) {\n    var layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      var width = frameState.size[0] * frameState.pixelRatio;\n      var height = frameState.size[1] * frameState.pixelRatio;\n      var rotation = frameState.viewState.rotation;\n      rotateAtOffset(context, -rotation, width / 2, height / 2);\n      var transform = opt_transform !== undefined ? opt_transform : this.getTransform(frameState, 0);\n      var render = new CanvasImmediateRenderer(context, frameState.pixelRatio, frameState.extent, transform, frameState.viewState.rotation);\n      var composeEvent = new RenderEvent(type, render, frameState, context, null);\n      layer.dispatchEvent(composeEvent);\n      rotateAtOffset(context, rotation, width / 2, height / 2);\n    }\n  };\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(this: S, import(\"../../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  CanvasLayerRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);\n    if (hasFeature) {\n      return callback.call(thisArg, this.getLayer(), null);\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.postCompose = function postCompose(context, frameState, layerState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.preCompose = function preCompose(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);\n  };\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  CanvasLayerRenderer.prototype.getTransform = function getTransform(frameState, offsetX) {\n    var viewState = frameState.viewState;\n    var pixelRatio = frameState.pixelRatio;\n    var dx1 = pixelRatio * frameState.size[0] / 2;\n    var dy1 = pixelRatio * frameState.size[1] / 2;\n    var sx = pixelRatio / viewState.resolution;\n    var sy = -sx;\n    var angle = -viewState.rotation;\n    var dx2 = -viewState.center[0] + offsetX;\n    var dy2 = -viewState.center[1];\n    return composeTransform(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);\n  };\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  CanvasLayerRenderer.prototype.composeFrame = function composeFrame(frameState, layerState, context) {\n    abstract();\n  };\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @return {boolean} whether composeFrame should be called.\n   */\n  CanvasLayerRenderer.prototype.prepareFrame = function prepareFrame(frameState, layerState) {\n    return abstract();\n  };\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["abstract","getBottomLeft","getBottomRight","getTopLeft","getTopRight","TRUE","RenderEvent","RenderEventType","rotateAtOffset","CanvasImmediateRenderer","LayerRenderer","create","createTransform","apply","applyTransform","compose","composeTransform","CanvasLayerRenderer","layer","call","renderedResolution","transform_","clip","context","frameState","extent","pixelRatio","width","size","height","rotation","viewState","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","save","beginPath","moveTo","lineTo","dispatchComposeEvent_","type","opt_transform","getLayer","hasListener","transform","undefined","getTransform","render","composeEvent","dispatchEvent","forEachLayerAtCoordinate","coordinate","hitTolerance","callback","thisArg","hasFeature","forEachFeatureAtCoordinate","postCompose","layerState","POSTCOMPOSE","preCompose","PRECOMPOSE","dispatchRenderEvent","RENDER","offsetX","dx1","dy1","sx","resolution","sy","angle","dx2","center","dy2","composeFrame","prepareFrame"],"sources":["../../../../src/ol/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport {abstract} from '../../util.js';\nimport {getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../../extent.js';\nimport {TRUE} from '../../functions.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {rotateAtOffset} from '../../render/canvas.js';\nimport CanvasImmediateRenderer from '../../render/canvas/Immediate.js';\nimport LayerRenderer from '../Layer.js';\nimport {create as createTransform, apply as applyTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @abstract\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   */\n  constructor(layer) {\n\n    super(layer);\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = createTransform();\n\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clip(context, frameState, extent) {\n    const pixelRatio = frameState.pixelRatio;\n    const width = frameState.size[0] * pixelRatio;\n    const height = frameState.size[1] * pixelRatio;\n    const rotation = frameState.viewState.rotation;\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    context.save();\n    rotateAtOffset(context, -rotation, width / 2, height / 2);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, width / 2, height / 2);\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @private\n   */\n  dispatchComposeEvent_(type, context, frameState, opt_transform) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const width = frameState.size[0] * frameState.pixelRatio;\n      const height = frameState.size[1] * frameState.pixelRatio;\n      const rotation = frameState.viewState.rotation;\n      rotateAtOffset(context, -rotation, width / 2, height / 2);\n      const transform = opt_transform !== undefined ?\n        opt_transform : this.getTransform(frameState, 0);\n      const render = new CanvasImmediateRenderer(\n        context, frameState.pixelRatio, frameState.extent, transform,\n        frameState.viewState.rotation);\n      const composeEvent = new RenderEvent(type, render, frameState,\n        context, null);\n      layer.dispatchEvent(composeEvent);\n      rotateAtOffset(context, rotation, width / 2, height / 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(this: S, import(\"../../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  forEachLayerAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);\n\n    if (hasFeature) {\n      return callback.call(thisArg, this.getLayer(), null);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  postCompose(context, frameState, layerState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  preCompose(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  dispatchRenderEvent(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getTransform(frameState, offsetX) {\n    const viewState = frameState.viewState;\n    const pixelRatio = frameState.pixelRatio;\n    const dx1 = pixelRatio * frameState.size[0] / 2;\n    const dy1 = pixelRatio * frameState.size[1] / 2;\n    const sx = pixelRatio / viewState.resolution;\n    const sy = -sx;\n    const angle = -viewState.rotation;\n    const dx2 = -viewState.center[0] + offsetX;\n    const dy2 = -viewState.center[1];\n    return composeTransform(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  composeFrame(frameState, layerState, context) {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @return {boolean} whether composeFrame should be called.\n   */\n  prepareFrame(frameState, layerState) {\n    return abstract();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}