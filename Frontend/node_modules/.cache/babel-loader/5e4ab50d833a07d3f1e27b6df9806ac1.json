{"ast":null,"code":"/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\n * {@link module:ol/proj~addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj~addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection} with\n * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport { getDistance } from './sphere.js';\nimport { applyTransform } from './extent.js';\nimport { modulo } from './math.js';\nimport { toEPSG4326, fromEPSG4326, PROJECTIONS as EPSG3857_PROJECTIONS } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport Projection from './proj/Projection.js';\nimport Units, { METERS_PER_UNIT } from './proj/Units.js';\nimport * as projections from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc } from './proj/transforms.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\nexport { METERS_PER_UNIT };\nexport { Projection };\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  var output;\n  if (opt_output !== undefined) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    input = opt_output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  projections.add(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string' ? projections.get( /** @type {string} */projectionLike) : /** @type {Projection} */projectionLike || null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {Units=} opt_units Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  var pointResolution;\n  var getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n  } else {\n    var units = projection.getUnits();\n    if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      var toEPSG4326 = getTransformFromProjections(projection, get('EPSG:4326'));\n      var vertices = [point[0] - resolution / 2, point[1], point[0] + resolution / 2, point[1], point[0], point[1] - resolution / 2, point[0], point[1] + resolution / 2];\n      vertices = toEPSG4326(vertices, vertices, 2);\n      var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n      var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n      pointResolution = (width + height) / 2;\n      var metersPerUnit = opt_units ? METERS_PER_UNIT[opt_units] : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  projections.clear();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return (/** @type {Projection} */projection\n    );\n  }\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>=} opt_output Output.\n     * @param {number=} opt_dimension Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n      var length = input.length;\n      var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      var output = opt_output !== undefined ? opt_output : new Array(length);\n      for (var i = 0; i < length; i += dimension) {\n        var point = coordTransform([input[i], input[i + 1]]);\n        output[i] = point[0];\n        output[i + 1] = point[1];\n        for (var j = dimension - 1; j >= 2; --j) {\n          output[i + j] = input[i + j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  var sourceProj = get(source);\n  var destProj = get(destination);\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike=} opt_projection Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n  return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike=} opt_projection Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n  var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n  var lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  var equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    var transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n  var sourceCode = sourceProjection.getCode();\n  var destinationCode = destinationProjection.getCode();\n  var transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  var sourceProjection = get(source);\n  var destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj~transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  var transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination) {\n  var transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n  var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n  return transformFunc(point);\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();","map":{"version":3,"names":["getDistance","applyTransform","modulo","toEPSG4326","fromEPSG4326","PROJECTIONS","EPSG3857_PROJECTIONS","EPSG4326_PROJECTIONS","Projection","Units","METERS_PER_UNIT","projections","add","addTransformFunc","clear","clearTransformFuncs","get","getTransformFunc","cloneTransform","input","opt_output","opt_dimension","output","undefined","i","ii","length","slice","identityTransform","addProjection","projection","getCode","addProjections","forEach","projectionLike","getPointResolution","resolution","point","opt_units","pointResolution","getter","getPointResolutionFunc","units","getUnits","DEGREES","getTransformFromProjections","vertices","width","height","metersPerUnit","getMetersPerUnit","addEquivalentProjections","source","destination","addEquivalentTransforms","projections1","projections2","forwardTransform","inverseTransform","projection1","projection2","clearAllProjections","createProjection","defaultCode","createTransformFromCoordinateTransform","coordTransform","dimension","Array","j","addCoordinateTransforms","forward","inverse","sourceProj","destProj","fromLonLat","coordinate","opt_projection","transform","toLonLat","lonLat","lon","equivalent","equalUnits","transformFunc","sourceProjection","destinationProjection","sourceCode","destinationCode","getTransform","transformExtent","extent","transformWithProjections","addCommon"],"sources":["../../src/ol/proj.js"],"sourcesContent":["/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\n * {@link module:ol/proj~addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj~addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection} with\n * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport {getDistance} from './sphere.js';\nimport {applyTransform} from './extent.js';\nimport {modulo} from './math.js';\nimport {toEPSG4326, fromEPSG4326, PROJECTIONS as EPSG3857_PROJECTIONS} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport Projection from './proj/Projection.js';\nimport Units, {METERS_PER_UNIT} from './proj/Units.js';\nimport * as projections from './proj/projections.js';\nimport {add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc} from './proj/transforms.js';\n\n\n/**\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  let output;\n  if (opt_output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    input = opt_output;\n  }\n  return input;\n}\n\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  projections.add(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string' ?\n    projections.get(/** @type {string} */ (projectionLike)) :\n    (/** @type {Projection} */ (projectionLike) || null);\n}\n\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {Units=} opt_units Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n  } else {\n    const units = projection.getUnits();\n    if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(projection, get('EPSG:4326'));\n      let vertices = [\n        point[0] - resolution / 2, point[1],\n        point[0] + resolution / 2, point[1],\n        point[0], point[1] - resolution / 2,\n        point[0], point[1] + resolution / 2\n      ];\n      vertices = toEPSG4326(vertices, vertices, 2);\n      const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n      const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n      pointResolution = (width + height) / 2;\n      const metersPerUnit = opt_units ?\n        METERS_PER_UNIT[opt_units] :\n        projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function(source) {\n    projections.forEach(function(destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n  projections1.forEach(function(projection1) {\n    projections2.forEach(function(projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  projections.clear();\n  clearTransformFuncs();\n}\n\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return (\n      /** @type {Projection} */ (projection)\n    );\n  }\n}\n\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>=} opt_output Output.\n     * @param {number=} opt_dimension Dimension.\n     * @return {Array<number>} Output.\n     */\n    function(input, opt_output, opt_dimension) {\n      const length = input.length;\n      const dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      const output = opt_output !== undefined ? opt_output : new Array(length);\n      for (let i = 0; i < length; i += dimension) {\n        const point = coordTransform([input[i], input[i + 1]]);\n        output[i] = point[0];\n        output[i + 1] = point[1];\n        for (let j = dimension - 1; j >= 2; --j) {\n          output[i + j] = input[i + j];\n        }\n      }\n      return output;\n    });\n}\n\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike=} opt_projection Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n  return transform(coordinate, 'EPSG:4326',\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike=} opt_projection Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n  const lonLat = transform(coordinate,\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    const transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n  const sourceCode = sourceProjection.getCode();\n  const destinationCode = destinationProjection.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj~transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc);\n}\n\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n  const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n  return transformFunc(point);\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\n\naddCommon();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}