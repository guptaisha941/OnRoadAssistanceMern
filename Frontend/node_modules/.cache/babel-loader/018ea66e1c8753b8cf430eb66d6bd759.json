{"ast":null,"code":"/**\n * @module ol/geom/LinearRing\n */\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { linearRing as linearRingArea } from './flat/area.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nvar LinearRing = /*@__PURE__*/function (SimpleGeometry) {\n  function LinearRing(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n    } else {\n      this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */coordinates, opt_layout);\n    }\n  }\n  if (SimpleGeometry) LinearRing.__proto__ = SimpleGeometry;\n  LinearRing.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  LinearRing.prototype.constructor = LinearRing;\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @override\n   * @api\n   */\n  LinearRing.prototype.clone = function clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LinearRing.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  LinearRing.prototype.getArea = function getArea() {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  LinearRing.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LinearRing.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  LinearRing.prototype.getType = function getType() {\n    return GeometryType.LINEAR_RING;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LinearRing.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return false;\n  };\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  LinearRing.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return LinearRing;\n}(SimpleGeometry);\nexport default LinearRing;","map":{"version":3,"names":["closestSquaredDistanceXY","GeometryLayout","GeometryType","SimpleGeometry","linearRing","linearRingArea","assignClosestPoint","maxSquaredDelta","deflateCoordinates","inflateCoordinates","douglasPeucker","LinearRing","coordinates","opt_layout","call","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","clone","flatCoordinates","slice","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","getArea","getCoordinates","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","LINEAR_RING","intersectsExtent","extent","setLayout","changed"],"sources":["../../../src/ol/geom/LinearRing.js"],"sourcesContent":["/**\n * @module ol/geom/LinearRing\n */\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {GeometryLayout=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n    } else {\n      this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n    }\n\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(\n        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.LINEAR_RING;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default LinearRing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}