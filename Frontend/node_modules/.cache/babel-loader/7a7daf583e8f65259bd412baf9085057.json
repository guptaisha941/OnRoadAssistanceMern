{"ast":null,"code":"/**\n * @module ol/geom/flat/orient\n */\nimport { coordinates as reverseCoordinates } from './reverse.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // http://tinyurl.com/clockwise-method\n  // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp\n  var edge = 0;\n  var x1 = flatCoordinates[end - stride];\n  var y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingIsOriented(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n    if (i === 0) {\n      if (right && isClockwise || !right && !isClockwise) {\n        return false;\n      }\n    } else {\n      if (right && !isClockwise || !right && isClockwise) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(flatCoordinates, offset, endss, stride, opt_right) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    if (!linearRingIsOriented(flatCoordinates, offset, endss[i], stride, opt_right)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n    var reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);\n  }\n  return offset;\n}","map":{"version":3,"names":["coordinates","reverseCoordinates","linearRingIsClockwise","flatCoordinates","offset","end","stride","edge","x1","y1","x2","y2","linearRingIsOriented","ends","opt_right","right","undefined","i","ii","length","isClockwise","linearRingsAreOriented","endss","orientLinearRings","reverse","orientLinearRingsArray"],"sources":["../../../../src/ol/geom/flat/orient.js"],"sourcesContent":["/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // http://tinyurl.com/clockwise-method\n  // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge > 0;\n}\n\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingIsOriented(flatCoordinates, offset, ends, stride, opt_right) {\n  const right = opt_right !== undefined ? opt_right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates, offset, end, stride);\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(flatCoordinates, offset, endss, stride, opt_right) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    if (!linearRingIsOriented(\n      flatCoordinates, offset, endss[i], stride, opt_right)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {\n  const right = opt_right !== undefined ? opt_right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates, offset, end, stride);\n    const reverse = i === 0 ?\n      (right && isClockwise) || (!right && !isClockwise) :\n      (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean=} opt_right Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates, offset, endss[i], stride, opt_right);\n  }\n  return offset;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}