{"ast":null,"code":"/**\n * @module ol/events\n */\nimport { clear } from './obj.js';\n\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {ListenerFunction} listener\n * @property {import(\"./events/Target.js\").EventTargetLike} target\n * @property {string} type\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @param {EventsKey} listenerObj Listener object.\n * @return {ListenerFunction} Bound listener.\n */\nexport function bindListener(listenerObj) {\n  var boundListener = function (evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n    return listener.call(bindTo, evt);\n  };\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {EventsKey|undefined} The matching listener object.\n */\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  var listenerObj;\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n    if (listenerObj.listener === listener && listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n      return listenerObj;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array<EventsKey>|undefined} Listeners.\n */\nexport function getListeners(target, type) {\n  var listenerMap = getListenerMap(target);\n  return listenerMap ? listenerMap[type] : undefined;\n}\n\n/**\n * Get the lookup of listeners.\n * @param {Object} target Target.\n * @param {boolean=} opt_create If a map should be created if it doesn't exist.\n * @return {!Object<string, Array<EventsKey>>} Map of\n *     listeners by event type.\n */\nfunction getListenerMap(target, opt_create) {\n  var listenerMap = target.ol_lm;\n  if (!listenerMap && opt_create) {\n    listenerMap = target.ol_lm = {};\n  }\n  return listenerMap;\n}\n\n/**\n * Remove the listener map from a target.\n * @param {Object} target Target.\n */\nfunction removeListenerMap(target) {\n  delete target.ol_lm;\n}\n\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n */\nfunction removeListeners(target, type) {\n  var listeners = getListeners(target, type);\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      /** @type {import(\"./events/Target.js\").default} */target.removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n    listeners.length = 0;\n    var listenerMap = getListenerMap(target);\n    if (listenerMap) {\n      delete listenerMap[type];\n      if (Object.keys(listenerMap).length === 0) {\n        removeListenerMap(target);\n      }\n    }\n  }\n}\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, opt_this, opt_once) {\n  var listenerMap = getListenerMap(target, true);\n  var listeners = listenerMap[type];\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n  var listenerObj = findListener(listeners, listener, opt_this, false);\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj = /** @type {EventsKey} */{\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    };\n    /** @type {import(\"./events/Target.js\").default} */\n    target.addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n  return listenerObj;\n}\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\nexport function unlisten(target, type, listener, opt_this) {\n  var listeners = getListeners(target, type);\n  if (listeners) {\n    var listenerObj = findListener(listeners, listener, opt_this, true);\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    /** @type {import(\"./events/Target.js\").default} */key.target.removeEventListener(key.type, key.boundListener);\n    var listeners = getListeners(key.target, key.type);\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n    clear(key);\n  }\n}\n\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n */\nexport function unlistenAll(target) {\n  var listenerMap = getListenerMap(target);\n  if (listenerMap) {\n    for (var type in listenerMap) {\n      removeListeners(target, type);\n    }\n  }\n}","map":{"version":3,"names":["clear","bindListener","listenerObj","boundListener","evt","listener","bindTo","target","callOnce","unlistenByKey","call","findListener","listeners","opt_this","opt_setDeleteIndex","i","ii","length","deleteIndex","undefined","getListeners","type","listenerMap","getListenerMap","opt_create","ol_lm","removeListenerMap","removeListeners","removeEventListener","Object","keys","listen","opt_once","addEventListener","push","listenOnce","unlisten","key","indexOf","splice","unlistenAll"],"sources":["../../src/ol/events.js"],"sourcesContent":["/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {ListenerFunction} listener\n * @property {import(\"./events/Target.js\").EventTargetLike} target\n * @property {string} type\n * @api\n */\n\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n\n/**\n * @param {EventsKey} listenerObj Listener object.\n * @return {ListenerFunction} Bound listener.\n */\nexport function bindListener(listenerObj) {\n  const boundListener = function(evt) {\n    const listener = listenerObj.listener;\n    const bindTo = listenerObj.bindTo || listenerObj.target;\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n    return listener.call(bindTo, evt);\n  };\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n\n\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {EventsKey|undefined} The matching listener object.\n */\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  let listenerObj;\n  for (let i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n    if (listenerObj.listener === listener &&\n        listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n      return listenerObj;\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array<EventsKey>|undefined} Listeners.\n */\nexport function getListeners(target, type) {\n  const listenerMap = getListenerMap(target);\n  return listenerMap ? listenerMap[type] : undefined;\n}\n\n\n/**\n * Get the lookup of listeners.\n * @param {Object} target Target.\n * @param {boolean=} opt_create If a map should be created if it doesn't exist.\n * @return {!Object<string, Array<EventsKey>>} Map of\n *     listeners by event type.\n */\nfunction getListenerMap(target, opt_create) {\n  let listenerMap = target.ol_lm;\n  if (!listenerMap && opt_create) {\n    listenerMap = target.ol_lm = {};\n  }\n  return listenerMap;\n}\n\n\n/**\n * Remove the listener map from a target.\n * @param {Object} target Target.\n */\nfunction removeListenerMap(target) {\n  delete target.ol_lm;\n}\n\n\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @param {string} type Type.\n */\nfunction removeListeners(target, type) {\n  const listeners = getListeners(target, type);\n  if (listeners) {\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      /** @type {import(\"./events/Target.js\").default} */ (target).\n        removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n    listeners.length = 0;\n    const listenerMap = getListenerMap(target);\n    if (listenerMap) {\n      delete listenerMap[type];\n      if (Object.keys(listenerMap).length === 0) {\n        removeListenerMap(target);\n      }\n    }\n  }\n}\n\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, opt_this, opt_once) {\n  const listenerMap = getListenerMap(target, true);\n  let listeners = listenerMap[type];\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n  let listenerObj = findListener(listeners, listener, opt_this, false);\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj = /** @type {EventsKey} */ ({\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    });\n    /** @type {import(\"./events/Target.js\").default} */ (target).\n      addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n\n\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\nexport function unlisten(target, type, listener, opt_this) {\n  const listeners = getListeners(target, type);\n  if (listeners) {\n    const listenerObj = findListener(listeners, listener, opt_this, true);\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    /** @type {import(\"./events/Target.js\").default} */ (key.target).\n      removeEventListener(key.type, key.boundListener);\n    const listeners = getListeners(key.target, key.type);\n    if (listeners) {\n      const i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n    clear(key);\n  }\n}\n\n\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Target.\n */\nexport function unlistenAll(target) {\n  const listenerMap = getListenerMap(target);\n  if (listenerMap) {\n    for (const type in listenerMap) {\n      removeListeners(target, type);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}