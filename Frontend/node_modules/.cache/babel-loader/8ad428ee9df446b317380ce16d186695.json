{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\n\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport { extend } from '../array.js';\nimport { assert } from '../asserts.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { xhr } from '../featureloader.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { isEmpty, getValues } from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport var VectorSourceEvent = /*@__PURE__*/function (Event) {\n  function VectorSourceEvent(type, opt_feature) {\n    Event.call(this, type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n  }\n  if (Event) VectorSourceEvent.__proto__ = Event;\n  VectorSourceEvent.prototype = Object.create(Event && Event.prototype);\n  VectorSourceEvent.prototype.constructor = VectorSourceEvent;\n  return VectorSourceEvent;\n}(Event);\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\nvar VectorSource = /*@__PURE__*/function (Source) {\n  function VectorSource(opt_options) {\n    var options = opt_options || {};\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */this.format_);\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n    this.featuresCollection_ = null;\n    var collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n  if (Source) VectorSource.__proto__ = Source;\n  VectorSource.prototype = Object.create(Source && Source.prototype);\n  VectorSource.prototype.constructor = VectorSource;\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n  VectorSource.prototype.addFeature = function addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.addFeatureInternal = function addFeatureInternal(feature) {\n    var featureKey = getUid(feature);\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n    this.setupChangeEvents_(featureKey, feature);\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n  VectorSource.prototype.setupChangeEvents_ = function setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  };\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  VectorSource.prototype.addToIndex_ = function addToIndex_(featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_), 30); // The passed `feature` was already added to the source\n      this.undefIdIndex_[featureKey] = feature;\n    }\n    return valid;\n  };\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n  VectorSource.prototype.addFeatures = function addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n  VectorSource.prototype.addFeaturesInternal = function addFeaturesInternal(features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n    for (var i = 0, length = features.length; i < length; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n    for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {\n      var feature$1 = newFeatures[i$1];\n      var featureKey$1 = getUid(feature$1);\n      this.setupChangeEvents_(featureKey$1, feature$1);\n      var geometry = feature$1.getGeometry();\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature$1);\n      } else {\n        this.nullGeometryFeatures_[featureKey$1] = feature$1;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n    for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));\n    }\n  };\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n  VectorSource.prototype.bindFeaturesCollection_ = function bindFeaturesCollection_(collection) {\n    var modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    listen(this, VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    listen(collection, CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature( /** @type {import(\"../Feature.js\").default} */evt.element);\n        modifyingCollection = false;\n      }\n    }, this);\n    listen(collection, CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature( /** @type {import(\"../Feature.js\").default} */evt.element);\n        modifyingCollection = false;\n      }\n    }, this);\n    this.featuresCollection_ = collection;\n  };\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  VectorSource.prototype.clear = function clear(opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeature = function forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureInExtent = function forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n        if (result) {\n          return result;\n        }\n      }\n    });\n  };\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesCollection = function getFeaturesCollection() {\n    return this.featuresCollection_;\n  };\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeatures = function getFeatures() {\n    var features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (/** @type {Array<import(\"../Feature.js\").default>} */features\n    );\n  };\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesAtCoordinate = function getFeaturesAtCoordinate(coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesInExtent = function getFeaturesInExtent(extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  };\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n  VectorSource.prototype.getClosestFeatureToCoordinate = function getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature;\n          // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  };\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  VectorSource.prototype.getExtent = function getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n  VectorSource.prototype.getFeatureById = function getFeatureById(id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  VectorSource.prototype.getFormat = function getFormat() {\n    return this.format_;\n  };\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  VectorSource.prototype.getOverlaps = function getOverlaps() {\n    return this.overlaps_;\n  };\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  VectorSource.prototype.getUrl = function getUrl() {\n    return this.url_;\n  };\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  VectorSource.prototype.handleFeatureChange_ = function handleFeatureChange_(event) {\n    var feature = /** @type {import(\"../Feature.js\").default} */event.target;\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    var id = feature.getId();\n    if (id !== undefined) {\n      var sid = id.toString();\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  };\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  VectorSource.prototype.hasFeature = function hasFeature(feature) {\n    var id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  };\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  VectorSource.prototype.isEmpty = function isEmpty$1() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  VectorSource.prototype.loadFeatures = function loadFeatures(extent, resolution, projection) {\n    var this$1 = this;\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    var loop = function (i, ii) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n      if (!alreadyLoaded) {\n        this$1.loader_.call(this$1, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n        this$1.loading = this$1.loader_ !== VOID;\n      }\n    };\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) loop(i, ii);\n  };\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  VectorSource.prototype.removeLoadedExtent = function removeLoadedExtent(extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n  VectorSource.prototype.removeFeature = function removeFeature(feature) {\n    var featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.removeFeatureInternal = function removeFeatureInternal(feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n  };\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  VectorSource.prototype.removeFromIdIndex_ = function removeFromIdIndex_(feature) {\n    var removed = false;\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  };\n\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  VectorSource.prototype.setLoader = function setLoader(loader) {\n    this.loader_ = loader;\n  };\n  return VectorSource;\n}(Source);\nexport default VectorSource;","map":{"version":3,"names":["getUid","Collection","CollectionEventType","ObjectEventType","extend","assert","listen","unlistenByKey","Event","EventType","containsExtent","equals","xhr","TRUE","VOID","all","allStrategy","isEmpty","getValues","Source","SourceState","VectorEventType","RBush","VectorSourceEvent","type","opt_feature","call","feature","prototype","constructor","VectorSource","opt_options","options","attributions","projection","undefined","state","READY","wrapX","loader_","format_","format","overlaps_","overlaps","url_","url","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","nullGeometryFeatures_","idIndex_","undefIdIndex_","featureChangeKeys_","featuresCollection_","collection","features","Array","isArray","getArray","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","changed","featureKey","addToIndex_","setupChangeEvents_","geometry","getGeometry","extent","getExtent","insert","dispatchEvent","ADDFEATURE","CHANGE","handleFeatureChange_","PROPERTYCHANGE","valid","id","getId","toString","addFeatures","extents","newFeatures","geometryFeatures","i","length","push","i$1","length$1","feature$1","featureKey$1","load","i$2","length$2","modifyingCollection","evt","REMOVEFEATURE","remove","ADD","element","REMOVE","removeFeature","clear","opt_fast","featureId","keys","forEach","removeFeatureInternal","clearEvent","CLEAR","forEachFeature","callback","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachInExtent","forEachFeatureIntersectingExtent","intersectsExtent","result","getFeaturesCollection","getFeatures","getAll","getFeaturesAtCoordinate","getFeaturesInExtent","getInExtent","getClosestFeatureToCoordinate","opt_filter","x","y","closestFeature","closestPoint","NaN","minSquaredDistance","Infinity","filter","previousMinSquaredDistance","closestPointXY","minDistance","Math","sqrt","opt_extent","getFeatureById","getFormat","getOverlaps","getUrl","event","target","update","sid","removeFromIdIndex_","CHANGEFEATURE","hasFeature","isEmpty$1","loadFeatures","resolution","loadedExtentsRtree","extentsToLoad","loading","extentToLoad","alreadyLoaded","object","this$1","slice","ii","loop","removeLoadedExtent","obj","removed","setLoader"],"sources":["../../../src/ol/source/Vector.js"],"sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport {extend} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {xhr} from '../featureloader.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {isEmpty, getValues} from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport class VectorSourceEvent extends Event {\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default=} opt_feature Feature.\n   */\n  constructor(type, opt_feature) {\n\n    super(type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options=} opt_options Vector source options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    super({\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */ (this.format_));\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n    this.featuresCollection_ = null;\n\n    let collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  }\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE,\n        this.handleFeatureChange_, this),\n      listen(feature, ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_, this)\n    ];\n  }\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_),\n        30); // The passed `feature` was already added to the source\n      this.undefIdIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n    }\n  }\n\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(this, VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(collection, CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    listen(collection, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    this.featuresCollection_ = collection;\n  }\n\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  clear(opt_fast) {\n    if (opt_fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function(feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  }\n\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function(feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      });\n  }\n\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (\n      /** @type {Array<import(\"../Feature.js\").default>} */ (features)\n    );\n  }\n\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  }\n\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    const filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       */\n      function(feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x, y, closestPoint, minSquaredDistance);\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      });\n    return closestFeature;\n  }\n\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  }\n\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default} */ (event.target);\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.CHANGEFEATURE, feature));\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  }\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function(object) {\n          return containsExtent(object.extent, extentToLoad);\n        });\n      if (!alreadyLoaded) {\n        this.loader_.call(this, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n        this.loading = this.loader_ !== VOID;\n      }\n    }\n  }\n\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function(object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  }\n\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.REMOVEFEATURE, feature));\n  }\n\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n}\n\n\nexport default VectorSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}