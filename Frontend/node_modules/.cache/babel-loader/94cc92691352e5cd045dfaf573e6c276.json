{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport { getUid } from '../util.js';\nimport rbush from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { isEmpty } from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = function RBush(opt_maxEntries) {\n  /**\n   * @private\n   */\n  this.rbush_ = rbush(opt_maxEntries, undefined);\n\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object<string, Entry>}\n   */\n  this.items_ = {};\n};\n\n/**\n * Insert a value into the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.insert = function insert(extent, value) {\n  /** @type {Entry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n  this.rbush_.insert(item);\n  this.items_[getUid(value)] = item;\n};\n\n/**\n * Bulk-insert values into the RBush.\n * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n * @param {Array<T>} values Values.\n */\nRBush.prototype.load = function load(extents, values) {\n  var items = new Array(values.length);\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this.items_[getUid(value)] = item;\n  }\n  this.rbush_.load(items);\n};\n\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\nRBush.prototype.remove = function remove(value) {\n  var uid = getUid(value);\n\n  // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n\n/**\n * Update the extent of a value in the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.update = function update(extent, value) {\n  var item = this.items_[getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n  if (!equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n\n/**\n * Return all values in the RBush.\n * @return {Array<T>} All.\n */\nRBush.prototype.getAll = function getAll() {\n  var items = this.rbush_.all();\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n\n/**\n * Return all values in the given extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @return {Array<T>} All in extent.\n */\nRBush.prototype.getInExtent = function getInExtent(extent) {\n  /** @type {Entry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach = function forEach(callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEachInExtent = function forEachInExtent(extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n\n/**\n * @param {Array<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach_ = function forEach_(values, callback, opt_this) {\n  var result;\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n    if (result) {\n      return result;\n    }\n  }\n  return result;\n};\n\n/**\n * @return {boolean} Is empty.\n */\nRBush.prototype.isEmpty = function isEmpty$1() {\n  return isEmpty(this.items_);\n};\n\n/**\n * Remove all values from the RBush.\n */\nRBush.prototype.clear = function clear() {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n\n/**\n * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n * @return {import(\"../extent.js\").Extent} Extent.\n */\nRBush.prototype.getExtent = function getExtent(opt_extent) {\n  var data = this.rbush_.toJSON();\n  return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n\n/**\n * @param {RBush} rbush R-Tree.\n */\nRBush.prototype.concat = function concat(rbush) {\n  this.rbush_.load(rbush.rbush_.all());\n  for (var i in rbush.items_) {\n    this.items_[i] = rbush.items_[i];\n  }\n};\nexport default RBush;","map":{"version":3,"names":["getUid","rbush","createOrUpdate","equals","isEmpty","RBush","opt_maxEntries","rbush_","undefined","items_","prototype","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","opt_this","forEach_","forEachInExtent","result","call","isEmpty$1","clear","getExtent","opt_extent","data","toJSON","concat"],"sources":["../../../src/ol/structs/RBush.js"],"sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport {getUid} from '../util.js';\nimport rbush from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number=} opt_maxEntries Max entries.\n   */\n  constructor(opt_maxEntries) {\n\n    /**\n     * @private\n     */\n    this.rbush_ = rbush(opt_maxEntries, undefined);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function(item) {\n      return item.value;\n    });\n  }\n\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function(item) {\n      return item.value;\n    });\n  }\n\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEach(callback, opt_this) {\n    return this.forEach_(this.getAll(), callback, opt_this);\n  }\n\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEachInExtent(extent, callback, opt_this) {\n    return this.forEach_(this.getInExtent(extent), callback, opt_this);\n  }\n\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @private\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEach_(values, callback, opt_this) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback.call(opt_this, values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(opt_extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  }\n\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n\n}\n\n\nexport default RBush;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}