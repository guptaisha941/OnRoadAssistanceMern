{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport { getUid } from '../util.js';\nimport ImageState from '../ImageState.js';\nimport { assert } from '../asserts.js';\nimport { asArray } from '../color.js';\nimport { listen, unlisten } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport { get as getIconImage } from './IconImage.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageStyle from './Image.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels. Default is `'fraction'`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels. Default is `'fraction'`.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /*@__PURE__*/function (ImageStyle) {\n  function Icon(opt_options) {\n    var options = opt_options || {};\n\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    ImageStyle.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      rotateWithView: rotateWithView\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    var image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    var imgSize = options.imgSize !== undefined ? options.imgSize : null;\n\n    /**\n     * @type {string|undefined}\n     */\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || image && imgSize, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(image, /** @type {string} */src, imgSize, this.crossOrigin_, imageState, this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n  }\n  if (ImageStyle) Icon.__proto__ = ImageStyle;\n  Icon.prototype = Object.create(ImageStyle && ImageStyle.prototype);\n  Icon.prototype.constructor = Icon;\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  Icon.prototype.clone = function clone() {\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: this.getScale(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Icon.prototype.getAnchor = function getAnchor() {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    var anchor = this.anchor_;\n    var size = this.getSize();\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION || this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  };\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  Icon.prototype.setAnchor = function setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  };\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  Icon.prototype.getColor = function getColor() {\n    return this.color_;\n  };\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @override\n   * @api\n   */\n  Icon.prototype.getImage = function getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getImageSize = function getImageSize() {\n    return this.iconImage_.getSize();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getHitDetectionImageSize = function getHitDetectionImageSize() {\n    return this.getImageSize();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getImageState = function getImageState() {\n    return this.iconImage_.getImageState();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.getHitDetectionImage = function getHitDetectionImage(pixelRatio) {\n    return this.iconImage_.getHitDetectionImage(pixelRatio);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Icon.prototype.getOrigin = function getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    var offset = this.offset_;\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      var size = this.getSize();\n      var iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  };\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  Icon.prototype.getSrc = function getSrc() {\n    return this.iconImage_.getSrc();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Icon.prototype.getSize = function getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.listenImageChange = function listenImageChange(listener, thisArg) {\n    return listen(this.iconImage_, EventType.CHANGE, listener, thisArg);\n  };\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @override\n   * @api\n   */\n  Icon.prototype.load = function load() {\n    this.iconImage_.load();\n  };\n\n  /**\n   * @override\n   */\n  Icon.prototype.unlistenImageChange = function unlistenImageChange(listener, thisArg) {\n    unlisten(this.iconImage_, EventType.CHANGE, listener, thisArg);\n  };\n  return Icon;\n}(ImageStyle);\nexport default Icon;","map":{"version":3,"names":["getUid","ImageState","assert","asArray","listen","unlisten","EventType","IconAnchorUnits","get","getIconImage","IconOrigin","ImageStyle","Icon","opt_options","options","opacity","undefined","rotation","scale","rotateWithView","call","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","TOP_LEFT","anchorXUnits_","anchorXUnits","FRACTION","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","imgSize","src","length","imageState","IDLE","LOADED","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","clone","slice","getSrc","getOpacity","getScale","getRotation","getRotateWithView","getAnchor","getSize","TOP_RIGHT","BOTTOM_RIGHT","BOTTOM_LEFT","setAnchor","getColor","getImage","pixelRatio","getImageSize","getHitDetectionImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","listenImageChange","listener","thisArg","CHANGE","load","unlistenImageChange"],"sources":["../../../src/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport {getUid} from '../util.js';\nimport ImageState from '../ImageState.js';\nimport {assert} from '../asserts.js';\nimport {asArray} from '../color.js';\nimport {listen, unlisten} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport {get as getIconImage} from './IconImage.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageStyle from './Image.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels. Default is `'fraction'`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels. Default is `'fraction'`.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you are using the WebGL renderer or if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`. Default is `top-left`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView = options.rotateWithView !== undefined ?\n      options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      rotateWithView: rotateWithView\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ?\n      options.anchorOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ?\n      options.anchorXUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ?\n      options.anchorYUnits : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    const imgSize = options.imgSize !== undefined ? options.imgSize : null;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image),\n      4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && imgSize),\n      5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0,\n      6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState = options.src !== undefined ?\n      ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image, /** @type {string} */ (src), imgSize, this.crossOrigin_, imageState, this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ?\n      options.offsetOrigin : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: this.getScale(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getAnchor() {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    let anchor = this.anchor_;\n    const size = this.getSize();\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||\n        this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||\n          this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||\n          this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @override\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * @override\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @override\n   */\n  getHitDetectionImageSize() {\n    return this.getImageSize();\n  }\n\n  /**\n   * @override\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @override\n   */\n  getHitDetectionImage(pixelRatio) {\n    return this.iconImage_.getHitDetectionImage(pixelRatio);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||\n          this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||\n          this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * @override\n   */\n  listenImageChange(listener, thisArg) {\n    return listen(this.iconImage_, EventType.CHANGE,\n      listener, thisArg);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @override\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @override\n   */\n  unlistenImageChange(listener, thisArg) {\n    unlisten(this.iconImage_, EventType.CHANGE,\n      listener, thisArg);\n  }\n}\n\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}