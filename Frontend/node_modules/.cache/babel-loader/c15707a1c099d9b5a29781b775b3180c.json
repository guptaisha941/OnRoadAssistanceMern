{"ast":null,"code":"/**\n * @module ol/interaction/DragRotateAndZoom\n */\nimport { disable } from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport { shiftKeyOnly, mouseOnly } from '../events/condition.js';\nimport { rotate, rotateWithoutConstraints, zoom, zoomWithoutConstraints } from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~shiftKeyOnly}.\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom and rotate the map by clicking and dragging\n * on the map.  By default, this interaction is limited to when the shift\n * key is held down.\n *\n * This interaction is only supported for mouse devices.\n *\n * And this interaction is not included in the default interactions.\n * @api\n */\nvar DragRotateAndZoom = /*@__PURE__*/function (PointerInteraction) {\n  function DragRotateAndZoom(opt_options) {\n    var options = opt_options ? opt_options : {};\n    PointerInteraction.call( /** @type {import(\"./Pointer.js\").Options} */this, options);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : shiftKeyOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastMagnitude_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n  }\n  if (PointerInteraction) DragRotateAndZoom.__proto__ = PointerInteraction;\n  DragRotateAndZoom.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  DragRotateAndZoom.prototype.constructor = DragRotateAndZoom;\n\n  /**\n   * @inheritDoc\n   */\n  DragRotateAndZoom.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n    var map = mapBrowserEvent.map;\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var deltaX = offset[0] - size[0] / 2;\n    var deltaY = size[1] / 2 - offset[1];\n    var theta = Math.atan2(deltaY, deltaX);\n    var magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    var view = map.getView();\n    if (view.getConstraints().rotation !== disable && this.lastAngle_ !== undefined) {\n      var angleDelta = theta - this.lastAngle_;\n      rotateWithoutConstraints(view, view.getRotation() - angleDelta);\n    }\n    this.lastAngle_ = theta;\n    if (this.lastMagnitude_ !== undefined) {\n      var resolution = this.lastMagnitude_ * (view.getResolution() / magnitude);\n      zoomWithoutConstraints(view, resolution);\n    }\n    if (this.lastMagnitude_ !== undefined) {\n      this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;\n    }\n    this.lastMagnitude_ = magnitude;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragRotateAndZoom.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    var direction = this.lastScaleDelta_ - 1;\n    rotate(view, view.getRotation());\n    zoom(view, view.getResolution(), undefined, this.duration_, direction);\n    this.lastScaleDelta_ = 0;\n    return false;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragRotateAndZoom.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n    if (this.condition_(mapBrowserEvent)) {\n      mapBrowserEvent.map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      this.lastMagnitude_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragRotateAndZoom;\n}(PointerInteraction);\nexport default DragRotateAndZoom;","map":{"version":3,"names":["disable","ViewHint","shiftKeyOnly","mouseOnly","rotate","rotateWithoutConstraints","zoom","zoomWithoutConstraints","PointerInteraction","DragRotateAndZoom","opt_options","options","call","condition_","condition","lastAngle_","undefined","lastMagnitude_","lastScaleDelta_","duration_","duration","handleDragEvent","mapBrowserEvent","map","size","getSize","offset","pixel","deltaX","deltaY","theta","Math","atan2","magnitude","sqrt","view","getView","getConstraints","rotation","angleDelta","getRotation","resolution","getResolution","handleUpEvent","setHint","INTERACTING","direction","handleDownEvent"],"sources":["../../../src/ol/interaction/DragRotateAndZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/DragRotateAndZoom\n */\nimport {disable} from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport {shiftKeyOnly, mouseOnly} from '../events/condition.js';\nimport {rotate, rotateWithoutConstraints, zoom, zoomWithoutConstraints} from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~shiftKeyOnly}.\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom and rotate the map by clicking and dragging\n * on the map.  By default, this interaction is limited to when the shift\n * key is held down.\n *\n * This interaction is only supported for mouse devices.\n *\n * And this interaction is not included in the default interactions.\n * @api\n */\nclass DragRotateAndZoom extends PointerInteraction {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : shiftKeyOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastMagnitude_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const deltaX = offset[0] - size[0] / 2;\n    const deltaY = size[1] / 2 - offset[1];\n    const theta = Math.atan2(deltaY, deltaX);\n    const magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const view = map.getView();\n    if (view.getConstraints().rotation !== disable && this.lastAngle_ !== undefined) {\n      const angleDelta = theta - this.lastAngle_;\n      rotateWithoutConstraints(view, view.getRotation() - angleDelta);\n    }\n    this.lastAngle_ = theta;\n    if (this.lastMagnitude_ !== undefined) {\n      const resolution = this.lastMagnitude_ * (view.getResolution() / magnitude);\n      zoomWithoutConstraints(view, resolution);\n    }\n    if (this.lastMagnitude_ !== undefined) {\n      this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;\n    }\n    this.lastMagnitude_ = magnitude;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    const direction = this.lastScaleDelta_ - 1;\n    rotate(view, view.getRotation());\n    zoom(view, view.getResolution(), undefined, this.duration_, direction);\n    this.lastScaleDelta_ = 0;\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (this.condition_(mapBrowserEvent)) {\n      mapBrowserEvent.map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      this.lastMagnitude_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragRotateAndZoom;\n"],"mappings":"AAAA;;;AAGA,SAAQA,OAAO,QAAO,0BAA0B;AAChD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,SAAQC,YAAY,EAAEC,SAAS,QAAO,wBAAwB;AAC9D,SAAQC,MAAM,EAAEC,wBAAwB,EAAEC,IAAI,EAAEC,sBAAsB,QAAO,kBAAkB;AAC/F,OAAOC,kBAAkB,MAAM,cAAc;;;;;;;;;;;;;;;;;;;;;;AAwB7C,IAAMC,iBAAiB,GAA2B,uBAAAD,kBAAA;EAKhD,SAAAC,iBAAWA,CAACC,WAAW,EAAE;IAEvB,IAAMC,OAAO,GAAGD,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9CF,kBAAA,CAAAI,IAAK,qDAAgDD,OAAO,CAAE;;;;;;IAM9D,IAAI,CAACE,UAAU,GAAGF,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACG,SAAS,GAAGZ,YAAY;;;;;;IAMtE,IAAI,CAACa,UAAU,GAAGC,SAAS;;;;;;IAM3B,IAAI,CAACC,cAAc,GAAGD,SAAS;;;;;;IAM/B,IAAI,CAACE,eAAe,GAAG,CAAC;;;;;;IAMxB,IAAI,CAACC,SAAS,GAAGR,OAAO,CAACS,QAAQ,KAAKJ,SAAS,GAAGL,OAAO,CAACS,QAAQ,GAAG,GAAG;;;;;;;;;8BAO1EC,eAAA,YAAAA,gBAAgBC,eAAe,EAAE;IAC/B,IAAI,CAACnB,SAAS,CAACmB,eAAe,CAAC,EAAE;MAC/B;;IAGF,IAAMC,GAAG,GAAGD,eAAe,CAACC,GAAG;IAC/B,IAAMC,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;IAC1B,IAAMC,MAAM,GAAGJ,eAAe,CAACK,KAAK;IACpC,IAAMC,MAAM,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;IACtC,IAAMK,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGE,MAAM,CAAC,CAAC,CAAC;IACtC,IAAMI,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,EAAED,MAAM,CAAC;IACxC,IAAMK,SAAS,GAAGF,IAAI,CAACG,IAAI,CAACN,MAAM,GAAGA,MAAM,GAAGC,MAAM,GAAGA,MAAM,CAAC;IAC9D,IAAMM,IAAI,GAAGZ,GAAG,CAACa,OAAO,EAAE;IAC1B,IAAID,IAAI,CAACE,cAAc,EAAE,CAACC,QAAQ,KAAKtC,OAAO,IAAI,IAAI,CAACe,UAAU,KAAKC,SAAS,EAAE;MAC/E,IAAMuB,UAAU,GAAGT,KAAK,GAAG,IAAI,CAACf,UAAU;MAC1CV,wBAAwB,CAAC8B,IAAI,EAAEA,IAAI,CAACK,WAAW,EAAE,GAAGD,UAAU,CAAC;;IAEjE,IAAI,CAACxB,UAAU,GAAGe,KAAK;IACvB,IAAI,IAAI,CAACb,cAAc,KAAKD,SAAS,EAAE;MACrC,IAAMyB,UAAU,GAAG,IAAI,CAACxB,cAAc,IAAIkB,IAAI,CAACO,aAAa,EAAE,GAAGT,SAAS,CAAC;MAC3E1B,sBAAsB,CAAC4B,IAAI,EAAEM,UAAU,CAAC;;IAE1C,IAAI,IAAI,CAACxB,cAAc,KAAKD,SAAS,EAAE;MACrC,IAAI,CAACE,eAAe,GAAG,IAAI,CAACD,cAAc,GAAGgB,SAAS;;IAExD,IAAI,CAAChB,cAAc,GAAGgB,SAAS;;;;;;8BAMjCU,aAAA,YAAAA,cAAcrB,eAAe,EAAE;IAC7B,IAAI,CAACnB,SAAS,CAACmB,eAAe,CAAC,EAAE;MAC/B,OAAO,IAAI;;IAGb,IAAMC,GAAG,GAAGD,eAAe,CAACC,GAAG;IAC/B,IAAMY,IAAI,GAAGZ,GAAG,CAACa,OAAO,EAAE;IAC1BD,IAAI,CAACS,OAAO,CAAC3C,QAAQ,CAAC4C,WAAW,EAAE,CAAC,CAAC,CAAC;IACtC,IAAMC,SAAS,GAAG,IAAI,CAAC5B,eAAe,GAAG,CAAC;IAC1Cd,MAAM,CAAC+B,IAAI,EAAEA,IAAI,CAACK,WAAW,EAAE,CAAC;IAChClC,IAAI,CAAC6B,IAAI,EAAEA,IAAI,CAACO,aAAa,EAAE,EAAE1B,SAAS,EAAE,IAAI,CAACG,SAAS,EAAE2B,SAAS,CAAC;IACtE,IAAI,CAAC5B,eAAe,GAAG,CAAC;IACxB,OAAO,KAAK;;;;;;8BAMd6B,eAAA,YAAAA,gBAAgBzB,eAAe,EAAE;IAC/B,IAAI,CAACnB,SAAS,CAACmB,eAAe,CAAC,EAAE;MAC/B,OAAO,KAAK;;IAGd,IAAI,IAAI,CAACT,UAAU,CAACS,eAAe,CAAC,EAAE;MACpCA,eAAe,CAACC,GAAG,CAACa,OAAO,EAAE,CAACQ,OAAO,CAAC3C,QAAQ,CAAC4C,WAAW,EAAE,CAAC,CAAC;MAC9D,IAAI,CAAC9B,UAAU,GAAGC,SAAS;MAC3B,IAAI,CAACC,cAAc,GAAGD,SAAS;MAC/B,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,KAAK;;GAEf;;EA5G6BR,kBAAA;AA+GhC,eAAeC,iBAAiB"},"metadata":{},"sourceType":"module"}