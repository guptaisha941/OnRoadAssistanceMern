{"ast":null,"code":"/**\n * @module ol/geom/SimpleGeometry\n */\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { rotate, scale, translate, transform2D } from './flat/transform.js';\nimport { clear } from '../obj.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = /*@__PURE__*/function (Geometry) {\n  function SimpleGeometry() {\n    Geometry.call(this);\n\n    /**\n     * @protected\n     * @type {GeometryLayout}\n     */\n    this.layout = GeometryLayout.XY;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n  if (Geometry) SimpleGeometry.__proto__ = Geometry;\n  SimpleGeometry.prototype = Object.create(Geometry && Geometry.prototype);\n  SimpleGeometry.prototype.constructor = SimpleGeometry;\n\n  /**\n   * @inheritDoc\n   */\n  SimpleGeometry.prototype.computeExtent = function computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n\n  /**\n   * @abstract\n   * @return {Array} Coordinates.\n   */\n  SimpleGeometry.prototype.getCoordinates = function getCoordinates() {\n    return abstract();\n  };\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  SimpleGeometry.prototype.getFirstCoordinate = function getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  SimpleGeometry.prototype.getFlatCoordinates = function getFlatCoordinates() {\n    return this.flatCoordinates;\n  };\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  SimpleGeometry.prototype.getLastCoordinate = function getLastCoordinate() {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  };\n\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {GeometryLayout} Layout.\n   * @api\n   */\n  SimpleGeometry.prototype.getLayout = function getLayout() {\n    return this.layout;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    var key = squaredTolerance.toString();\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n      var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n      if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n        this.simplifiedGeometryCache[key] = simplifiedGeometry;\n        return simplifiedGeometry;\n      } else {\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  };\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  };\n\n  /**\n   * @return {number} Stride.\n   */\n  SimpleGeometry.prototype.getStride = function getStride() {\n    return this.stride;\n  };\n\n  /**\n   * @param {GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  SimpleGeometry.prototype.setFlatCoordinates = function setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  };\n\n  /**\n   * @abstract\n   * @param {!Array} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   */\n  SimpleGeometry.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    abstract();\n  };\n\n  /**\n   * @param {GeometryLayout|undefined} layout Layout.\n   * @param {Array} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  SimpleGeometry.prototype.setLayout = function setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    var stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (var i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */coordinates[0];\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.applyTransform = function applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.rotate = function rotate$1(angle, anchor) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.scale = function scale$1(sx, opt_sy, opt_anchor) {\n    var sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    var anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.translate = function translate$1(deltaX, deltaY) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  };\n  return SimpleGeometry;\n}(Geometry);\n\n/**\n * @param {number} stride Stride.\n * @return {GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  var layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return (/** @type {GeometryLayout} */layout\n  );\n}\n\n/**\n * @param {GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  var stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return (/** @type {number} */stride\n  );\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  var flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    var stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n  }\n}\nexport default SimpleGeometry;","map":{"version":3,"names":["abstract","createOrUpdateFromFlatCoordinates","getCenter","Geometry","GeometryLayout","rotate","scale","translate","transform2D","clear","SimpleGeometry","call","layout","XY","stride","flatCoordinates","computeExtent","extent","length","getCoordinates","getFirstCoordinate","slice","getFlatCoordinates","getLastCoordinate","getLayout","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryCache","simplifiedGeometryMaxMinSquaredTolerance","key","toString","hasOwnProperty","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","getStrideForLayout","setCoordinates","coordinates","opt_layout","setLayout","nesting","i","getLayoutForStride","applyTransform","transformFn","changed","rotate$1","angle","anchor","scale$1","sx","opt_sy","opt_anchor","sy","undefined","getExtent","translate$1","deltaX","deltaY","XYZ","XYZM","XYM","transformGeom2D","simpleGeometry","transform","opt_dest"],"sources":["../../../src/ol/geom/SimpleGeometry.js"],"sourcesContent":["/**\n * @module ol/geom/SimpleGeometry\n */\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport {rotate, scale, translate, transform2D} from './flat/transform.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n\n    super();\n\n    /**\n     * @protected\n     * @type {GeometryLayout}\n     */\n    this.layout = GeometryLayout.XY;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates,\n      0, this.flatCoordinates.length, this.stride, extent);\n  }\n\n  /**\n   * @abstract\n   * @return {Array} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  }\n\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (squaredTolerance < 0 ||\n        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n         squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {\n      return this;\n    }\n    const key = squaredTolerance.toString();\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      const simplifiedGeometry =\n          this.getSimplifiedGeometryInternal(squaredTolerance);\n      const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n      if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n        this.simplifiedGeometryCache[key] = simplifiedGeometry;\n        return simplifiedGeometry;\n      } else {\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   */\n  setCoordinates(coordinates, opt_layout) {\n    abstract();\n  }\n\n  /**\n   * @param {GeometryLayout|undefined} layout Layout.\n   * @param {Array} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */ (coordinates[0]);\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates, 0, flatCoordinates.length,\n        stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates, 0, flatCoordinates.length,\n        stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates, 0, flatCoordinates.length, stride,\n        deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  }\n}\n\n\n/**\n * @param {number} stride Stride.\n * @return {GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return (\n    /** @type {GeometryLayout} */ (layout)\n  );\n}\n\n\n/**\n * @param {GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    const stride = simpleGeometry.getStride();\n    return transform2D(\n      flatCoordinates, 0, flatCoordinates.length, stride,\n      transform, opt_dest);\n  }\n}\n\nexport default SimpleGeometry;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}