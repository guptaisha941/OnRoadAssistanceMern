{"ast":null,"code":"/**\n * @module ol/interaction/PinchRotate\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { rotate, rotateWithoutConstraints } from './Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { disable } from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = /*@__PURE__*/function (PointerInteraction) {\n  function PinchRotate(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    PointerInteraction.call(this, pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n  if (PointerInteraction) PinchRotate.__proto__ = PointerInteraction;\n  PinchRotate.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchRotate.prototype.constructor = PinchRotate;\n\n  /**\n   * @inheritDoc\n   */\n  PinchRotate.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    var rotationDelta = 0.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n\n    // angle between touches\n    var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n    if (this.lastAngle_ !== undefined) {\n      var delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      var rotation = view.getRotation();\n      map.render();\n      rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchRotate.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      if (this.rotating_) {\n        var rotation = view.getRotation();\n        rotate(view, rotation, this.anchor_, this.duration_);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchRotate.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return PinchRotate;\n}(PointerInteraction);\nexport default PinchRotate;","map":{"version":3,"names":["ViewHint","FALSE","rotate","rotateWithoutConstraints","PointerInteraction","centroid","centroidFromPointers","disable","PinchRotate","opt_options","options","pointerOptions","stopDown","call","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","handleDragEvent","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixel","getRotation","render","handleUpEvent","length","setHint","INTERACTING","handleDownEvent","handlingDownUpSequence"],"sources":["../../../src/ol/interaction/PinchRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/PinchRotate\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {rotate, rotateWithoutConstraints} from './Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from './Pointer.js';\nimport {disable} from '../rotationconstraint.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX);\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ &&\n          Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      const rotation = view.getRotation();\n      map.render();\n      rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      if (this.rotating_) {\n        const rotation = view.getRotation();\n        rotate(view, rotation, this.anchor_, this.duration_);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchRotate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}