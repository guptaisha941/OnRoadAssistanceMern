{"ast":null,"code":"/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { zoom, zoomWithoutConstraints } from './Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchZoom = /*@__PURE__*/function (PointerInteraction) {\n  function PinchZoom(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    PointerInteraction.call(this, pointerOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ = options.constrainResolution || false;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n  }\n  if (PointerInteraction) PinchZoom.__proto__ = PointerInteraction;\n  PinchZoom.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchZoom.prototype.constructor = PinchZoom;\n\n  /**\n   * @inheritDoc\n   */\n  PinchZoom.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    var scaleDelta = 1.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n    var dx = touch0.clientX - touch1.clientX;\n    var dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    var distance = Math.sqrt(dx * dx + dy * dy);\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    var resolution = view.getResolution();\n    var maxResolution = view.getMaxResolution();\n    var minResolution = view.getMinResolution();\n    var newResolution = resolution * scaleDelta;\n    if (newResolution > maxResolution) {\n      scaleDelta = maxResolution / resolution;\n      newResolution = maxResolution;\n    } else if (newResolution < minResolution) {\n      scaleDelta = minResolution / resolution;\n      newResolution = minResolution;\n    }\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // scale, bypass the resolution constraint\n    map.render();\n    zoomWithoutConstraints(view, newResolution, this.anchor_);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchZoom.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      var resolution = view.getResolution();\n      if (this.constrainResolution_ || resolution < view.getMinResolution() || resolution > view.getMaxResolution()) {\n        // Zoom to final resolution, with an animation, and provide a\n        // direction not to zoom out/in if user was pinching in/out.\n        // Direction is > 0 if pinching out, and < 0 if pinching in.\n        var direction = this.lastScaleDelta_ - 1;\n        zoom(view, resolution, this.anchor_, this.duration_, direction);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchZoom.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return PinchZoom;\n}(PointerInteraction);\nexport default PinchZoom;","map":{"version":3,"names":["ViewHint","FALSE","zoom","zoomWithoutConstraints","PointerInteraction","centroid","centroidFromPointers","PinchZoom","opt_options","options","pointerOptions","stopDown","call","constrainResolution_","constrainResolution","anchor_","duration_","duration","undefined","lastDistance_","lastScaleDelta_","handleDragEvent","mapBrowserEvent","scaleDelta","touch0","targetPointers","touch1","dx","clientX","dy","clientY","distance","Math","sqrt","map","view","getView","resolution","getResolution","maxResolution","getMaxResolution","minResolution","getMinResolution","newResolution","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixel","render","handleUpEvent","length","setHint","INTERACTING","direction","handleDownEvent","handlingDownUpSequence"],"sources":["../../../src/ol/interaction/PinchZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {zoom, zoomWithoutConstraints} from './Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ = options.constrainResolution || false;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    const resolution = view.getResolution();\n    const maxResolution = view.getMaxResolution();\n    const minResolution = view.getMinResolution();\n    let newResolution = resolution * scaleDelta;\n    if (newResolution > maxResolution) {\n      scaleDelta = maxResolution / resolution;\n      newResolution = maxResolution;\n    } else if (newResolution < minResolution) {\n      scaleDelta = minResolution / resolution;\n      newResolution = minResolution;\n    }\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // scale, bypass the resolution constraint\n    map.render();\n    zoomWithoutConstraints(view, newResolution, this.anchor_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      const resolution = view.getResolution();\n      if (this.constrainResolution_ ||\n          resolution < view.getMinResolution() ||\n          resolution > view.getMaxResolution()) {\n        // Zoom to final resolution, with an animation, and provide a\n        // direction not to zoom out/in if user was pinching in/out.\n        // Direction is > 0 if pinching out, and < 0 if pinching in.\n        const direction = this.lastScaleDelta_ - 1;\n        zoom(view, resolution, this.anchor_, this.duration_, direction);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchZoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}