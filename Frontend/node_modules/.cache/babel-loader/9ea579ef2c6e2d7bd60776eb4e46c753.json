{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movies\\\\frontend_ora\\\\react-website-v1\\\\src\\\\components\\\\pages\\\\MapWithLocation.js\";\n// import React, { useEffect, useState } from \"react\";\n// import Map from \"ol/Map\";\n// import View from \"ol/View\";\n// import TileLayer from \"ol/layer/Tile\";\n// import OSM from \"ol/source/OSM\";\n// import Feature from \"ol/Feature\";\n// import Point from \"ol/geom/Point\";\n// import { fromLonLat } from \"ol/proj\";\n// import VectorLayer from \"ol/layer/Vector\";\n// import VectorSource from \"ol/source/Vector\";\n// // import { Icon } from 'ol/style';\n// import { Icon, Style } from 'ol/style';  // Import Style and Icon from ol/style\n\n// const MapWithLocation = () => {\n//   const [map, setMap] = useState(null);\n\n//   useEffect(() => {\n//     const initialMap = new Map({\n//       target: \"map-container\",\n//       layers: [\n//         new TileLayer({\n//           source: new OSM(),\n//         }),\n//       ],\n//       view: new View({\n//         center: fromLonLat([0, 0]),\n//         zoom: 2,\n//       }),\n//     });\n//     setMap(initialMap);\n//   }, []);\n\n//   useEffect(() => {\n//     if (map) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const longitude = position.coords.longitude;\n//           const latitude = position.coords.latitude;\n\n//           // Create a marker for your location\n//           const marker = new Feature({\n//             geometry: new Point(fromLonLat([longitude, latitude])),\n//           });\n\n//           // Create a new style for the marker using IconStyle\n//           const iconStyle = new Style({\n//             image: new Icon({\n//               src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\n//             }),\n//           });\n\n//           // Create a vector source and add the marker feature to it\n//           const vectorSource = new VectorSource({\n//             features: [marker],\n//           });\n//           marker.setStyle(iconStyle);\n\n//           // Add the vector layer to the map\n//           const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//           });\n//           map.addLayer(vectorLayer);\n\n//           // Set the view to your location\n//           map.getView().setCenter(fromLonLat([longitude, latitude]));\n//           map.getView().setZoom(15);\n//         },\n//         (error) => {\n//           console.error(error);\n//         }\n//       );\n//     }\n//   }, [map]);\n\n//   return <div id=\"map-container\" style={{ height: \"500px\" }}></div>;\n// };\n\n// export default MapWithLocation;\n\n// *********************************OPEN LAYERS CODE********************************************************\n\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport axios from 'axios';\nclass MapWithLocation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: null,\n      lng: null,\n      locations: [],\n      hospitals: [],\n      garages: [],\n      query: '',\n      filteredLocations: []\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n  componentDidMount() {\n    this._isMounted = true;\n    navigator.geolocation.getCurrentPosition(position => {\n      if (this._isMounted) {\n        this.setState({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }\n    }, () => {\n      console.log('Error getting current position');\n    });\n    axios.get('http://localhost:5000/api/locations').then(response => {\n      if (this._isMounted) {\n        this.setState({\n          locations: response.data,\n          filteredLocations: response.data\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n  handleSearch(event) {\n    const query = event.target.value;\n    const {\n      locations\n    } = this.state;\n    const filteredLocations = locations.filter(location => location.name.toLowerCase().includes(query.toLowerCase()));\n    this.setState({\n      query: query,\n      filteredLocations: filteredLocations\n    });\n  }\n  render() {\n    const {\n      google\n    } = this.props;\n    const {\n      lat,\n      lng,\n      filteredLocations\n    } = this.state;\n    if (!lat || !lng) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n    const mapStyles = {\n      width: '70%',\n      height: '100%',\n      position: 'absolute',\n      right: 0,\n      top: 0\n    };\n    const mapOptions = {\n      center: {\n        lat,\n        lng\n      },\n      zoom: 16\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        height: '100vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        flex: 1,\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a location\",\n      value: this.state.query,\n      onChange: this.handleSearch,\n      style: {\n        width: '100%',\n        padding: '10px',\n        marginBottom: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '0%',\n        height: '100vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat,\n        lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, filteredLocations.map((location, index) => /*#__PURE__*/React.createElement(Marker, {\n      key: index,\n      position: {\n        lat: location.lat,\n        lng: location.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    })))));\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC_9cAGZnlvSGLKRUMCxIgteTpaMvE83oY'\n})(MapWithLocation);","map":{"version":3,"names":["React","Component","Map","GoogleApiWrapper","Marker","axios","MapWithLocation","constructor","props","state","lat","lng","locations","hospitals","garages","query","filteredLocations","handleSearch","bind","componentDidMount","_isMounted","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","console","log","get","then","response","data","catch","error","componentWillUnmount","event","target","value","filter","location","name","toLowerCase","includes","render","google","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapStyles","width","height","right","top","mapOptions","center","zoom","style","display","flex","type","placeholder","onChange","padding","marginBottom","initialCenter","map","index","key","apiKey"],"sources":["D:/Movies/frontend_ora/react-website-v1/src/components/pages/MapWithLocation.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import Map from \"ol/Map\";\r\n// import View from \"ol/View\";\r\n// import TileLayer from \"ol/layer/Tile\";\r\n// import OSM from \"ol/source/OSM\";\r\n// import Feature from \"ol/Feature\";\r\n// import Point from \"ol/geom/Point\";\r\n// import { fromLonLat } from \"ol/proj\";\r\n// import VectorLayer from \"ol/layer/Vector\";\r\n// import VectorSource from \"ol/source/Vector\";\r\n// // import { Icon } from 'ol/style';\r\n// import { Icon, Style } from 'ol/style';  // Import Style and Icon from ol/style\r\n\r\n// const MapWithLocation = () => {\r\n//   const [map, setMap] = useState(null);\r\n  \r\n\r\n//   useEffect(() => {\r\n//     const initialMap = new Map({\r\n//       target: \"map-container\",\r\n//       layers: [\r\n//         new TileLayer({\r\n//           source: new OSM(),\r\n//         }),\r\n//       ],\r\n//       view: new View({\r\n//         center: fromLonLat([0, 0]),\r\n//         zoom: 2,\r\n//       }),\r\n//     });\r\n//     setMap(initialMap);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (map) {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           const longitude = position.coords.longitude;\r\n//           const latitude = position.coords.latitude;\r\n\r\n//           // Create a marker for your location\r\n//           const marker = new Feature({\r\n//             geometry: new Point(fromLonLat([longitude, latitude])),\r\n//           });\r\n\r\n//           // Create a new style for the marker using IconStyle\r\n//           const iconStyle = new Style({\r\n//             image: new Icon({\r\n//               src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\r\n//             }),\r\n//           });\r\n\r\n//           // Create a vector source and add the marker feature to it\r\n//           const vectorSource = new VectorSource({\r\n//             features: [marker],\r\n//           });\r\n//           marker.setStyle(iconStyle);\r\n\r\n//           // Add the vector layer to the map\r\n//           const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//           });\r\n//           map.addLayer(vectorLayer);\r\n\r\n//           // Set the view to your location\r\n//           map.getView().setCenter(fromLonLat([longitude, latitude]));\r\n//           map.getView().setZoom(15);\r\n//         },\r\n//         (error) => {\r\n//           console.error(error);\r\n//         }\r\n//       );\r\n//     }\r\n//   }, [map]);\r\n\r\n\r\n//   return <div id=\"map-container\" style={{ height: \"500px\" }}></div>;\r\n// };\r\n\r\n// export default MapWithLocation;\r\n\r\n// *********************************OPEN LAYERS CODE********************************************************\r\n\r\nimport React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\nimport axios from 'axios';\r\n\r\nclass MapWithLocation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lat: null,\r\n      lng: null,\r\n      locations:[],\r\n      hospitals: [\r\n      ],\r\n      garages: [\r\n      ],\r\n      query: '',\r\n      filteredLocations: [],\r\n    };\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        if(this._isMounted) {\r\n          this.setState({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        }\r\n      },\r\n      () => {\r\n        console.log('Error getting current position');\r\n      }\r\n    );\r\n\r\n    axios.get('http://localhost:5000/api/locations')\r\n      .then(response => {\r\n        if (this._isMounted){\r\n          this.setState({\r\n            locations: response.data,\r\n            filteredLocations: response.data,\r\n          });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  handleSearch(event) {\r\n    const query = event.target.value;\r\n    const { locations } = this.state;\r\n    const filteredLocations = locations.filter((location) =>\r\n      location.name.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    this.setState({\r\n      query: query,\r\n      filteredLocations: filteredLocations,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { google } = this.props;\r\n    const { lat, lng, filteredLocations } = this.state;\r\n\r\n    if (!lat || !lng) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    const mapStyles = {\r\n      width: '70%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      right: 0,\r\n      top: 0,\r\n    };\r\n\r\n    const mapOptions = {\r\n      center: { lat, lng },\r\n      zoom: 16,\r\n    };\r\n\r\n    return (\r\n      <div style={{ display: 'flex', height: '100vh' }}>\r\n        <div style={{ flex: 1, position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search for a location\"\r\n            value={this.state.query}\r\n            onChange={this.handleSearch}\r\n            style={{ width: '100%', padding: '10px', marginBottom: '10px' }}\r\n          />\r\n        </div>\r\n\r\n        <div style={{ width: '0%', height: '100vh' }}>\r\n        <Map\r\n          google={google}\r\n          zoom={14}\r\n          style={mapStyles}\r\n          initialCenter={{ lat, lng }}\r\n        >\r\n          {filteredLocations.map((location, index) => (\r\n            <Marker key={index} position={{ lat: location.lat, lng: location.lng }} />\r\n          ))}\r\n        </Map>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n              \r\n\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyC_9cAGZnlvSGLKRUMCxIgteTpaMvE83oY',\r\n})(MapWithLocation);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}