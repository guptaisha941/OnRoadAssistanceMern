{"ast":null,"code":"/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport { boundingExtent, getArea } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\nvar ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~ExtentInteraction} instances are\n * instances of this type.\n */\nvar ExtentInteractionEvent = /*@__PURE__*/function (Event) {\n  function ExtentInteractionEvent(extent) {\n    Event.call(this, ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n  if (Event) ExtentInteractionEvent.__proto__ = Event;\n  ExtentInteractionEvent.prototype = Object.create(Event && Event.prototype);\n  ExtentInteractionEvent.prototype.constructor = ExtentInteractionEvent;\n  return ExtentInteractionEvent;\n}(Event);\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires Event\n * @api\n */\nvar ExtentInteraction = /*@__PURE__*/function (PointerInteraction) {\n  function ExtentInteraction(opt_options) {\n    var options = opt_options || {};\n    PointerInteraction.call( /** @type {import(\"./Pointer.js\").Options} */this, options);\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n  if (PointerInteraction) ExtentInteraction.__proto__ = PointerInteraction;\n  ExtentInteraction.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  ExtentInteraction.prototype.constructor = ExtentInteraction;\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../PluggableMap.js\").default} map map\n   * @returns {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  ExtentInteraction.prototype.snapToVertex_ = function snapToVertex_(pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    var sortByDistance = function (a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) - squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    var extent = this.getExtent();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      var segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      var closestSegment = segments[0];\n      var vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  ExtentInteraction.prototype.handlePointerMove_ = function handlePointerMove_(mapBrowserEvent) {\n    var pixel = mapBrowserEvent.pixel;\n    var map = mapBrowserEvent.map;\n    var vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixel(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  };\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @returns {Feature} extent as featrue\n   * @private\n   */\n  ExtentInteraction.prototype.createOrUpdateExtentFeature_ = function createOrUpdateExtentFeature_(extent) {\n    var extentFeature = this.extentFeature_;\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      /** @type {VectorSource} */\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  };\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @returns {Feature} vertex as feature\n   * @private\n   */\n  ExtentInteraction.prototype.createOrUpdatePointerFeature_ = function createOrUpdatePointerFeature_(vertex) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = /** @type {Point} */vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ExtentInteraction.prototype.handleEvent = function handleEvent(mapBrowserEvent) {\n    if (! /** @type {import(\"../MapBrowserPointerEvent.js\").default} */mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    PointerInteraction.prototype.handleEvent.call(this, mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ExtentInteraction.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    var pixel = mapBrowserEvent.pixel;\n    var map = mapBrowserEvent.map;\n    var extent = this.getExtent();\n    var vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    var getOpposingPoint = function (point) {\n      var x_ = null;\n      var y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      var x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      var y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n        //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([x, extent[1]]), getOpposingPoint([x, extent[3]]));\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(getOpposingPoint([extent[0], y]), getOpposingPoint([extent[2], y]));\n      }\n      //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixel(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ExtentInteraction.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      var pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n    return true;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ExtentInteraction.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    var extent = this.getExtent();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ExtentInteraction.prototype.setMap = function setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  ExtentInteraction.prototype.getExtent = function getExtent() {\n    return this.extent_;\n  };\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  ExtentInteraction.prototype.setExtent = function setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n  };\n  return ExtentInteraction;\n}(PointerInteraction);\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @returns {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [[[extent[0], extent[1]], [extent[0], extent[3]]], [[extent[0], extent[3]], [extent[2], extent[3]]], [[extent[2], extent[3]], [extent[2], extent[1]]], [[extent[2], extent[1]], [extent[0], extent[1]]]];\n}\nexport default ExtentInteraction;","map":{"version":3,"names":["Feature","MapBrowserEventType","squaredDistanceToSegment","closestOnSegment","distance","coordinateDistance","squaredDistance","squaredCoordinateDistance","Event","boundingExtent","getArea","GeometryType","Point","fromExtent","polygonFromExtent","PointerInteraction","VectorLayer","VectorSource","createEditingStyle","ExtentEventType","EXTENTCHANGED","ExtentInteractionEvent","extent","call","prototype","constructor","ExtentInteraction","opt_options","options","extent_","pointerHandler_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","style","boxStyle","getDefaultExtentStyleFunction","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixel","sortByDistance","a","b","getExtent","segments","getSegments","sort","closestSegment","vertex","vertexPixel","getPixelFromCoordinate","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","extentFeature","getSource","addFeature","setGeometry","vertexFeature","geometry","getGeometry","setCoordinates","handleEvent","pointerEvent","type","POINTERMOVE","handlingDownUpSequence","handleDownEvent","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","handleDragEvent","coordinate","handleUpEvent","setMap","dispatchEvent","feature","resolution","POLYGON","POINT","fixedPoint","fixedP1","fixedP2"],"sources":["../../../src/ol/interaction/Extent.js"],"sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~ExtentInteraction} instances are\n * instances of this type.\n */\nclass ExtentInteractionEvent extends Event {\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n\n}\n\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires Event\n * @api\n */\nclass ExtentInteraction extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../PluggableMap.js\").default} map map\n   * @returns {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    const sortByDistance = function(a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) -\n          squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    const extent = this.getExtent();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = (closestOnSegment(pixelCoordinate,\n        closestSegment));\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ?\n            closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixel(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @returns {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      /** @type {VectorSource} */ (this.extentOverlay_.getSource()).addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @returns {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */ (this.vertexOverlay_.getSource()).addFeature(vertexFeature);\n    } else {\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    const extent = this.getExtent();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function(point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;\n      const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n      //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([x, extent[1]]),\n          getOpposingPoint([x, extent[3]])\n        );\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([extent[0], y]),\n          getOpposingPoint([extent[2], y])\n        );\n      }\n    //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixel(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtent();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function(point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @returns {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [[extent[0], extent[1]], [extent[0], extent[3]]],\n    [[extent[0], extent[3]], [extent[2], extent[3]]],\n    [[extent[2], extent[3]], [extent[2], extent[1]]],\n    [[extent[2], extent[1]], [extent[0], extent[1]]]\n  ];\n}\n\n\nexport default ExtentInteraction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}