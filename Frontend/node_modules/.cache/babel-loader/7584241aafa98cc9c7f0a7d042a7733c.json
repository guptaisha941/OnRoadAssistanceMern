{"ast":null,"code":"import _ol_asserts_ from './asserts.js';\nimport _ol_math_ from './math.js';\nvar _ol_color_ = {};\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n_ol_color_.HEX_COLOR_RE_ = /^#(?:[0-9a-f]{3,4}){1,2}$/i;\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n_ol_color_.NAMED_COLOR_RE_ = /^([a-z]*)$/i;\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {ol.Color|string} color Color.\n * @return {ol.Color} Color.\n * @api\n */\n_ol_color_.asArray = function (color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return _ol_color_.fromString( /** @type {string} */color);\n  }\n};\n\n/**\n * Return the color as an rgba string.\n * @param {ol.Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n_ol_color_.asString = function (color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return _ol_color_.toString(color);\n  }\n};\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n_ol_color_.fromNamed = function (color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n  document.body.appendChild(el);\n  var rgb = getComputedStyle(el).color;\n  document.body.removeChild(el);\n  return rgb;\n};\n\n/**\n * @param {string} s String.\n * @return {ol.Color} Color.\n */\n_ol_color_.fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  var MAX_CACHE_SIZE = 1024;\n\n  /**\n   * @type {Object.<string, ol.Color>}\n   */\n  var cache = {};\n\n  /**\n   * @type {number}\n   */\n  var cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {ol.Color} Color.\n     */\n    function (s) {\n      var color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          var i = 0;\n          var key;\n          for (key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = _ol_color_.fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n}();\n\n/**\n * @param {string} s String.\n * @private\n * @return {ol.Color} Color.\n */\n_ol_color_.fromStringInternal_ = function (s) {\n  var r, g, b, a, color, parts;\n  if (_ol_color_.NAMED_COLOR_RE_.exec(s)) {\n    s = _ol_color_.fromNamed(s);\n  }\n  if (_ol_color_.HEX_COLOR_RE_.exec(s)) {\n    // hex\n    var n = s.length - 1; // number of hex digits\n    var d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    parts = s.slice(5, -1).split(',').map(Number);\n    color = _ol_color_.normalize(parts);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    parts = s.slice(4, -1).split(',').map(Number);\n    parts.push(1);\n    color = _ol_color_.normalize(parts);\n  } else {\n    _ol_asserts_.assert(false, 14); // Invalid color\n  }\n\n  return (/** @type {ol.Color} */color\n  );\n};\n\n/**\n * @param {ol.Color} color Color.\n * @param {ol.Color=} opt_color Color.\n * @return {ol.Color} Clamped color.\n */\n_ol_color_.normalize = function (color, opt_color) {\n  var result = opt_color || [];\n  result[0] = _ol_math_.clamp(color[0] + 0.5 | 0, 0, 255);\n  result[1] = _ol_math_.clamp(color[1] + 0.5 | 0, 0, 255);\n  result[2] = _ol_math_.clamp(color[2] + 0.5 | 0, 0, 255);\n  result[3] = _ol_math_.clamp(color[3], 0, 1);\n  return result;\n};\n\n/**\n * @param {ol.Color} color Color.\n * @return {string} String.\n */\n_ol_color_.toString = function (color) {\n  var r = color[0];\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n  var g = color[1];\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n  var b = color[2];\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n  var a = color[3] === undefined ? 1 : color[3];\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n};\nexport default _ol_color_;","map":{"version":3,"names":["_ol_asserts_","_ol_math_","_ol_color_","HEX_COLOR_RE_","NAMED_COLOR_RE_","asArray","color","Array","isArray","fromString","asString","toString","fromNamed","el","document","createElement","style","body","appendChild","rgb","getComputedStyle","removeChild","MAX_CACHE_SIZE","cache","cacheSize","s","hasOwnProperty","i","key","fromStringInternal_","r","g","b","a","parts","exec","n","length","d","hasAlpha","parseInt","substr","indexOf","slice","split","map","Number","normalize","push","assert","opt_color","result","clamp","undefined"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/color.js"],"sourcesContent":["import _ol_asserts_ from './asserts.js';\nimport _ol_math_ from './math.js';\nvar _ol_color_ = {};\n\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n_ol_color_.HEX_COLOR_RE_ = /^#(?:[0-9a-f]{3,4}){1,2}$/i;\n\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n_ol_color_.NAMED_COLOR_RE_ = /^([a-z]*)$/i;\n\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {ol.Color|string} color Color.\n * @return {ol.Color} Color.\n * @api\n */\n_ol_color_.asArray = function(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return _ol_color_.fromString(/** @type {string} */ (color));\n  }\n};\n\n\n/**\n * Return the color as an rgba string.\n * @param {ol.Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n_ol_color_.asString = function(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return _ol_color_.toString(color);\n  }\n};\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n_ol_color_.fromNamed = function(color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n  document.body.appendChild(el);\n  var rgb = getComputedStyle(el).color;\n  document.body.removeChild(el);\n  return rgb;\n};\n\n\n/**\n * @param {string} s String.\n * @return {ol.Color} Color.\n */\n_ol_color_.fromString = (\n  function() {\n\n    // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n    // semantics, whenever the cache grows too large we simply delete an\n    // arbitrary 25% of the entries.\n\n    /**\n     * @const\n     * @type {number}\n     */\n    var MAX_CACHE_SIZE = 1024;\n\n    /**\n     * @type {Object.<string, ol.Color>}\n     */\n    var cache = {};\n\n    /**\n     * @type {number}\n     */\n    var cacheSize = 0;\n\n    return (\n      /**\n       * @param {string} s String.\n       * @return {ol.Color} Color.\n       */\n      function(s) {\n        var color;\n        if (cache.hasOwnProperty(s)) {\n          color = cache[s];\n        } else {\n          if (cacheSize >= MAX_CACHE_SIZE) {\n            var i = 0;\n            var key;\n            for (key in cache) {\n              if ((i++ & 3) === 0) {\n                delete cache[key];\n                --cacheSize;\n              }\n            }\n          }\n          color = _ol_color_.fromStringInternal_(s);\n          cache[s] = color;\n          ++cacheSize;\n        }\n        return color;\n      }\n    );\n\n  })();\n\n\n/**\n * @param {string} s String.\n * @private\n * @return {ol.Color} Color.\n */\n_ol_color_.fromStringInternal_ = function(s) {\n  var r, g, b, a, color, parts;\n\n  if (_ol_color_.NAMED_COLOR_RE_.exec(s)) {\n    s = _ol_color_.fromNamed(s);\n  }\n\n  if (_ol_color_.HEX_COLOR_RE_.exec(s)) { // hex\n    var n = s.length - 1; // number of hex digits\n    var d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) { // rgba()\n    parts = s.slice(5, -1).split(',').map(Number);\n    color = _ol_color_.normalize(parts);\n  } else if (s.indexOf('rgb(') == 0) { // rgb()\n    parts = s.slice(4, -1).split(',').map(Number);\n    parts.push(1);\n    color = _ol_color_.normalize(parts);\n  } else {\n    _ol_asserts_.assert(false, 14); // Invalid color\n  }\n  return /** @type {ol.Color} */ (color);\n};\n\n\n/**\n * @param {ol.Color} color Color.\n * @param {ol.Color=} opt_color Color.\n * @return {ol.Color} Clamped color.\n */\n_ol_color_.normalize = function(color, opt_color) {\n  var result = opt_color || [];\n  result[0] = _ol_math_.clamp((color[0] + 0.5) | 0, 0, 255);\n  result[1] = _ol_math_.clamp((color[1] + 0.5) | 0, 0, 255);\n  result[2] = _ol_math_.clamp((color[2] + 0.5) | 0, 0, 255);\n  result[3] = _ol_math_.clamp(color[3], 0, 1);\n  return result;\n};\n\n\n/**\n * @param {ol.Color} color Color.\n * @return {string} String.\n */\n_ol_color_.toString = function(color) {\n  var r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  var g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  var b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  var a = color[3] === undefined ? 1 : color[3];\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n};\nexport default _ol_color_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}