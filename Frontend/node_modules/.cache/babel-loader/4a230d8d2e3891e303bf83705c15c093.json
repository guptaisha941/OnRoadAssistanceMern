{"ast":null,"code":"/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport BaseObject from './Object.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  LENGTH: 'length'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n */\nexport var CollectionEvent = /*@__PURE__*/function (Event) {\n  function CollectionEvent(type, opt_element) {\n    Event.call(this, type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {*}\n     * @api\n     */\n    this.element = opt_element;\n  }\n  if (Event) CollectionEvent.__proto__ = Event;\n  CollectionEvent.prototype = Object.create(Event && Event.prototype);\n  CollectionEvent.prototype.constructor = CollectionEvent;\n  return CollectionEvent;\n}(Event);\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nvar Collection = /*@__PURE__*/function (BaseObject) {\n  function Collection(opt_array, opt_options) {\n    BaseObject.call(this);\n    var options = opt_options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = opt_array ? opt_array : [];\n    if (this.unique_) {\n      for (var i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n    this.updateLength_();\n  }\n  if (BaseObject) Collection.__proto__ = BaseObject;\n  Collection.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Collection.prototype.constructor = Collection;\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  Collection.prototype.clear = function clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  };\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  Collection.prototype.extend = function extend(arr) {\n    for (var i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  Collection.prototype.forEach = function forEach(f) {\n    var array = this.array_;\n    for (var i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  };\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  Collection.prototype.getArray = function getArray() {\n    return this.array_;\n  };\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  Collection.prototype.item = function item(index) {\n    return this.array_[index];\n  };\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  Collection.prototype.getLength = function getLength() {\n    return this.get(Property.LENGTH);\n  };\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  Collection.prototype.insertAt = function insertAt(index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem));\n  };\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  Collection.prototype.pop = function pop() {\n    return this.removeAt(this.getLength() - 1);\n  };\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  Collection.prototype.push = function push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    var n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  };\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  Collection.prototype.remove = function remove(elem) {\n    var arr = this.array_;\n    for (var i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  };\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  Collection.prototype.removeAt = function removeAt(index) {\n    var prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));\n    return prev;\n  };\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  Collection.prototype.setAt = function setAt(index, elem) {\n    var n = this.getLength();\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n      var prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem));\n    } else {\n      for (var j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n      this.insertAt(index, elem);\n    }\n  };\n\n  /**\n   * @private\n   */\n  Collection.prototype.updateLength_ = function updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  };\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number=} opt_except Optional index to ignore.\n   */\n  Collection.prototype.assertUnique_ = function assertUnique_(elem, opt_except) {\n    for (var i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  };\n  return Collection;\n}(BaseObject);\nexport default Collection;","map":{"version":3,"names":["AssertionError","CollectionEventType","BaseObject","Event","Property","LENGTH","CollectionEvent","type","opt_element","call","element","prototype","constructor","Collection","opt_array","opt_options","options","unique_","unique","array_","i","ii","length","assertUnique_","updateLength_","clear","getLength","pop","extend","arr","push","forEach","f","array","getArray","item","index","get","insertAt","elem","splice","dispatchEvent","ADD","removeAt","n","remove","undefined","prev","REMOVE","setAt","j","set","opt_except"],"sources":["../../src/ol/Collection.js"],"sourcesContent":["/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport BaseObject from './Object.js';\nimport Event from './events/Event.js';\n\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n */\nexport class CollectionEvent extends Event {\n\n  /**\n   * @param {CollectionEventType} type Type.\n   * @param {*=} opt_element Element.\n   */\n  constructor(type, opt_element) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {*}\n     * @api\n     */\n    this.element = opt_element;\n\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n\n  /**\n   * @param {Array<T>=} opt_array Array.\n   * @param {Options=} opt_options Collection options.\n   */\n  constructor(opt_array, opt_options) {\n\n    super();\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = opt_array ? opt_array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem));\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev));\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n      const prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.REMOVE, prev));\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.ADD, elem));\n    } else {\n      for (let j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n      this.insertAt(index, elem);\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number=} opt_except Optional index to ignore.\n   */\n  assertUnique_(elem, opt_except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n}\n\n\nexport default Collection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}