{"ast":null,"code":"/**\n * @module ol/layer/Layer\n */\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getUid } from '../util.js';\nimport { getChangeEventType } from '../Object.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\nimport { assign } from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Base.js\").default} layer\n * @property {number} opacity\n * @property {SourceState} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nvar Layer = /*@__PURE__*/function (BaseLayer) {\n  function Layer(options) {\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    BaseLayer.call(this, baseOptions);\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n    if (options.map) {\n      this.setMap(options.map);\n    }\n    listen(this, getChangeEventType(LayerProperty.SOURCE), this.handleSourcePropertyChange_, this);\n    var source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n  if (BaseLayer) Layer.__proto__ = BaseLayer;\n  Layer.prototype = Object.create(BaseLayer && BaseLayer.prototype);\n  Layer.prototype.constructor = Layer;\n\n  /**\n   * @inheritDoc\n   */\n  Layer.prototype.getLayersArray = function getLayersArray(opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Layer.prototype.getLayerStatesArray = function getLayerStatesArray(opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n\n  /**\n   * Get the layer source.\n   * @return {import(\"../source/Source.js\").default} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  Layer.prototype.getSource = function getSource() {\n    var source = this.get(LayerProperty.SOURCE);\n    return (/** @type {import(\"../source/Source.js\").default} */source || null\n    );\n  };\n\n  /**\n    * @inheritDoc\n    */\n  Layer.prototype.getSourceState = function getSourceState() {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourceChange_ = function handleSourceChange_() {\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    var source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  };\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  Layer.prototype.setMap = function setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent = /** @type {import(\"../render/Event.js\").default} */evt;\n        var layerState = this.getLayerState();\n        layerState.managed = false;\n        if (this.getZIndex() === undefined) {\n          layerState.zIndex = Infinity;\n        }\n        renderEvent.frameState.layerStatesArray.push(layerState);\n        renderEvent.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n\n  /**\n   * Set the layer source.\n   * @param {import(\"../source/Source.js\").default} source The layer source.\n   * @observable\n   * @api\n   */\n  Layer.prototype.setSource = function setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  return Layer;\n}(BaseLayer);\n\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution && resolution < layerState.maxResolution;\n}\nexport default Layer;","map":{"version":3,"names":["listen","unlistenByKey","EventType","getUid","getChangeEventType","BaseLayer","LayerProperty","assign","RenderEventType","SourceState","Layer","options","baseOptions","source","call","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","map","setMap","SOURCE","handleSourcePropertyChange_","setSource","getLayersArray","opt_array","array","push","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getSourceState","UNDEFINED","getState","handleSourceChange_","changed","CHANGE","PRECOMPOSE","evt","renderEvent","layerState","managed","getZIndex","undefined","zIndex","Infinity","frameState","layerStatesArray","layerStates","render","set","visibleAtResolution","resolution","visible","minResolution","maxResolution"],"sources":["../../../src/ol/layer/Layer.js"],"sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getUid} from '../util.js';\nimport {getChangeEventType} from '../Object.js';\nimport BaseLayer from './Base.js';\nimport LayerProperty from './Property.js';\nimport {assign} from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Base.js\").default} layer\n * @property {number} opacity\n * @property {SourceState} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n\n    const baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    listen(this,\n      getChangeEventType(LayerProperty.SOURCE),\n      this.handleSourcePropertyChange_, this);\n\n    const source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {import(\"../source/Source.js\").default} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    const source = this.get(LayerProperty.SOURCE);\n    return (\n      /** @type {import(\"../source/Source.js\").default} */ (source) || null\n    );\n  }\n\n  /**\n    * @inheritDoc\n    */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source,\n        EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {\n        const renderEvent = /** @type {import(\"../render/Event.js\").default} */ (evt);\n        const layerState = this.getLayerState();\n        layerState.managed = false;\n        if (this.getZIndex() === undefined) {\n          layerState.zIndex = Infinity;\n        }\n        renderEvent.frameState.layerStatesArray.push(layerState);\n        renderEvent.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {import(\"../source/Source.js\").default} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n}\n\n\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution &&\n      resolution < layerState.maxResolution;\n}\n\n\nexport default Layer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}