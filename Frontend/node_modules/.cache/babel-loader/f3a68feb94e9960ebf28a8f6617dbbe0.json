{"ast":null,"code":"/**\n * @module ol/View\n */\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { getUid } from './util.js';\nimport { VOID } from './functions.js';\nimport { createExtent, none as centerNone } from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport { createSnapToResolutions, createSnapToPower } from './resolutionconstraint.js';\nimport { createSnapToZero, createSnapToN, none as rotationNone, disable } from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { linearFindNearest } from './array.js';\nimport { assert } from './asserts.js';\nimport { add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual } from './coordinate.js';\nimport { inAndOut } from './easing.js';\nimport { getForViewAndSize, getCenter, getHeight, getWidth, isEmpty } from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\nimport { clamp, modulo } from './math.js';\nimport { assign } from './obj.js';\nimport { createProjection, METERS_PER_UNIT } from './proj.js';\nimport Units from './proj/Units.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\nvar View = /*@__PURE__*/function (BaseObject) {\n  function View(opt_options) {\n    BaseObject.call(this);\n    var options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n    this.applyOptions_(options);\n  }\n  if (BaseObject) View.__proto__ = BaseObject;\n  View.prototype = Object.create(BaseObject && BaseObject.prototype);\n  View.prototype.constructor = View;\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  View.prototype.applyOptions_ = function applyOptions_(options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ? options.center : null;\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_);\n      if (this.resolutions_) {\n        // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(Number(this.getResolution() || properties[ViewProperty.RESOLUTION]), this.minResolution_, this.maxResolution_);\n      }\n    }\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n  };\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  View.prototype.getUpdatedOptions_ = function getUpdatedOptions_(newOptions) {\n    var options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenter();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n    return assign({}, options, newOptions);\n  };\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  View.prototype.animate = function animate(var_args) {\n    var arguments$1 = arguments;\n    var animationCount = arguments.length;\n    var callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    var start = Date.now();\n    var center = this.getCenter().slice();\n    var resolution = this.getResolution();\n    var rotation = this.getRotation();\n    var series = [];\n    for (var i = 0; i < animationCount; ++i) {\n      var options = /** @type {AnimationOptions} */arguments$1[i];\n      var animation = /** @type {Animation} */{\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      };\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n      animation.callback = callback;\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  View.prototype.getAnimating = function getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  View.prototype.getInteracting = function getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  View.prototype.cancelAnimations = function cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n    this.animations_.length = 0;\n  };\n\n  /**\n   * Update all animations.\n   */\n  View.prototype.updateAnimations_ = function updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    var now = Date.now();\n    var more = false;\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        var progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER, this.calculateCenterZoom(resolution, animation.anchor));\n          }\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER, this.calculateCenterRotate(rotation, animation.anchor));\n          }\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        var callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  };\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  View.prototype.calculateCenterRotate = function calculateCenterRotate(rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  };\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  View.prototype.calculateCenterZoom = function calculateCenterZoom(resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    var currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  };\n\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  View.prototype.getSizeFromViewport_ = function getSizeFromViewport_() {\n    var size = [100, 100];\n    var selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    var element = document.querySelector(selector);\n    if (element) {\n      var metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n    return size;\n  };\n\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n  View.prototype.constrainCenter = function constrainCenter(center) {\n    return this.constraints_.center(center);\n  };\n\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n  View.prototype.constrainResolution = function constrainResolution(resolution, opt_delta, opt_direction) {\n    var delta = opt_delta || 0;\n    var direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  };\n\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n  View.prototype.constrainRotation = function constrainRotation(rotation, opt_delta) {\n    var delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  };\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getCenter = function getCenter() {\n    return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(ViewProperty.CENTER)\n    );\n  };\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  View.prototype.getConstraints = function getConstraints() {\n    return this.constraints_;\n  };\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  View.prototype.getHints = function getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  View.prototype.calculateExtent = function calculateExtent(opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var center = /** @type {!import(\"./coordinate.js\").Coordinate} */this.getCenter();\n    assert(center, 1); // The view center is not defined\n    var resolution = /** @type {!number} */this.getResolution();\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    var rotation = /** @type {!number} */this.getRotation();\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  View.prototype.getMaxResolution = function getMaxResolution() {\n    return this.maxResolution_;\n  };\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  View.prototype.getMinResolution = function getMinResolution() {\n    return this.minResolution_;\n  };\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  View.prototype.getMaxZoom = function getMaxZoom() {\n    return (/** @type {number} */this.getZoomForResolution(this.minResolution_)\n    );\n  };\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  View.prototype.setMaxZoom = function setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  };\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  View.prototype.getMinZoom = function getMinZoom() {\n    return (/** @type {number} */this.getZoomForResolution(this.maxResolution_)\n    );\n  };\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  View.prototype.setMinZoom = function setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  };\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  View.prototype.getProjection = function getProjection() {\n    return this.projection_;\n  };\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getResolution = function getResolution() {\n    return (/** @type {number|undefined} */this.get(ViewProperty.RESOLUTION)\n    );\n  };\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  View.prototype.getResolutions = function getResolutions() {\n    return this.resolutions_;\n  };\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  View.prototype.getResolutionForExtent = function getResolutionForExtent(extent, opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  View.prototype.getResolutionForValueFunction = function getResolutionForValueFunction(opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  };\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.getRotation = function getRotation() {\n    return (/** @type {number} */this.get(ViewProperty.ROTATION)\n    );\n  };\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  View.prototype.getValueForResolutionFunction = function getValueForResolutionFunction(opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        var value = Math.log(maxResolution / resolution) / Math.log(power) / max;\n        return value;\n      }\n    );\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n  View.prototype.getState = function getState(pixelRatio) {\n    var center = /** @type {import(\"./coordinate.js\").Coordinate} */this.getCenter();\n    var projection = this.getProjection();\n    var resolution = /** @type {number} */this.getResolution();\n    var pixelResolution = resolution / pixelRatio;\n    var rotation = this.getRotation();\n    return (/** @type {State} */{\n        center: [Math.round(center[0] / pixelResolution) * pixelResolution, Math.round(center[1] / pixelResolution) * pixelResolution],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      }\n    );\n  };\n\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  View.prototype.getZoom = function getZoom() {\n    var zoom;\n    var resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  };\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  View.prototype.getZoomForResolution = function getZoomForResolution(resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  View.prototype.getResolutionForZoom = function getResolutionForZoom(zoom) {\n    return (/** @type {number} */this.constrainResolution(this.maxResolution_, zoom - this.minZoom_, 0)\n    );\n  };\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  View.prototype.fit = function fit(geometryOrExtent, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var constrainResolution = options.constrainResolution !== undefined ? options.constrainResolution : true;\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n    var coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n    var stride = geometry.getStride();\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    var resolution = this.getResolutionForExtent([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n    if (constrainResolution) {\n      var constrainedResolution = this.constrainResolution(resolution, 0, 0);\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(constrainedResolution, -1, 0);\n      }\n      resolution = constrainedResolution;\n    }\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerRotX = (minRotX + maxRotX) / 2;\n    var centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    var center = [centerX, centerY];\n    var callback = options.callback ? options.callback : VOID;\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  };\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  View.prototype.centerOn = function centerOn(coordinate, size, position) {\n    // calculate rotated position\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    var resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n    this.setCenter([centerX, centerY]);\n  };\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  View.prototype.isDef = function isDef() {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  };\n\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  View.prototype.rotate = function rotate(rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      var center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n    this.setRotation(rotation);\n  };\n\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setCenter = function setCenter(center) {\n    this.set(ViewProperty.CENTER, center);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  View.prototype.setHint = function setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setResolution = function setResolution(resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.setRotation = function setRotation(rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  View.prototype.setZoom = function setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n  return View;\n}(BaseObject);\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(resolutions);\n  } else {\n    // calculate the default min and max resolution\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    var extent = projection.getExtent();\n    var size = !extent ?\n    // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit() : Math.max(getWidth(extent), getHeight(extent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\nexport default View;","map":{"version":3,"names":["DEFAULT_TILE_SIZE","getUid","VOID","createExtent","none","centerNone","BaseObject","createSnapToResolutions","createSnapToPower","createSnapToZero","createSnapToN","rotationNone","disable","ViewHint","ViewProperty","linearFindNearest","assert","add","addCoordinate","rotate","rotateCoordinate","equals","coordinatesEqual","inAndOut","getForViewAndSize","getCenter","getHeight","getWidth","isEmpty","GeometryType","fromExtent","polygonFromExtent","clamp","modulo","assign","createProjection","METERS_PER_UNIT","Units","DEFAULT_MIN_ZOOM","View","opt_options","call","options","hints_","animations_","updateAnimationKey_","updateAnimations_","bind","projection_","projection","applyOptions_","properties","CENTER","center","undefined","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","RESOLUTION","zoom","constrainResolution","Number","getResolution","ROTATION","setProperties","options_","getUpdatedOptions_","newOptions","getZoom","getRotation","animate","var_args","animationCount","arguments","length","callback","isDef","state","setCenter","setZoom","setRotation","animationCallback","start","Date","now","slice","series","i","arguments$1","animation","complete","anchor","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","sourceRotation","delta","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","getAnimating","getInteracting","INTERACTING","cancelAnimations","ii","cancelAnimationFrame","more","seriesComplete","j","jj","elapsed","fraction","progress","x0","y0","x1","y1","x","y","set","calculateCenterZoom","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","currentResolution","getSizeFromViewport_","size","selector","element","document","querySelector","metrics","getComputedStyle","parseInt","width","height","constrainCenter","opt_delta","opt_direction","direction","constrainRotation","get","getConstraints","getHints","opt_hints","calculateExtent","opt_size","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","getProjection","getResolutions","getResolutionForExtent","extent","xResolution","yResolution","max","getResolutionForValueFunction","opt_power","power","log","value","pow","getValueForResolutionFunction","getState","pixelRatio","pixelResolution","round","offset","nearest","getResolutionForZoom","fit","geometryOrExtent","geometry","Array","isArray","getSimplifiedGeometry","getType","CIRCLE","getExtent","padding","coords","getFlatCoordinates","cosAngle","cos","sinAngle","sin","minRotX","Infinity","minRotY","maxRotX","maxRotY","stride","getStride","rotX","rotY","min","isNaN","constrainedResolution","centerRotX","centerRotY","centerX","centerY","setResolution","centerOn","coordinate","position","opt_anchor","hint","changed","returnValue","setTimeout","defaultMaxZoom","defaultZoomFactor","DEGREES","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","floor","enableRotation"],"sources":["../../src/ol/View.js"],"sourcesContent":["/**\n * @module ol/View\n */\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {getUid} from './util.js';\nimport {VOID} from './functions.js';\nimport {createExtent, none as centerNone} from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport {createSnapToResolutions, createSnapToPower} from './resolutionconstraint.js';\nimport {createSnapToZero, createSnapToN, none as rotationNone, disable} from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {linearFindNearest} from './array.js';\nimport {assert} from './asserts.js';\nimport {add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual} from './coordinate.js';\nimport {inAndOut} from './easing.js';\nimport {getForViewAndSize, getCenter, getHeight, getWidth, isEmpty} from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\nimport {clamp, modulo} from './math.js';\nimport {assign} from './obj.js';\nimport {createProjection, METERS_PER_UNIT} from './proj.js';\nimport Units from './proj/Units.js';\n\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\nclass View extends BaseObject {\n\n  /**\n   * @param {ViewOptions=} opt_options View options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ?\n      options.center : null;\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(\n        this.maxResolution_, options.zoom - this.minZoom_);\n\n      if (this.resolutions_) { // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(\n          Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),\n          this.minResolution_, this.maxResolution_);\n      }\n    }\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenter();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    let start = Date.now();\n    let center = this.getCenter().slice();\n    let resolution = this.getResolution();\n    let rotation = this.getRotation();\n    const series = [];\n    for (let i = 0; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = /** @type {Animation} */ ({\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      });\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(\n          this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      animation.callback = callback;\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n    this.animations_.length = 0;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution = progress === 1 ?\n            animation.targetResolution :\n            animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterZoom(resolution, animation.anchor));\n          }\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          const rotation = progress === 1 ?\n            modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :\n            animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterRotate(rotation, animation.anchor));\n          }\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenter();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenter();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getSizeFromViewport_() {\n    const size = [100, 100];\n    const selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    const element = document.querySelector(selector);\n    if (element) {\n      const metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n    return size;\n  }\n\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n  constrainCenter(center) {\n    return this.constraints_.center(center);\n  }\n\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n  constrainResolution(resolution, opt_delta, opt_direction) {\n    const delta = opt_delta || 0;\n    const direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  }\n\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n  constrainRotation(rotation, opt_delta) {\n    const delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(opt_size) {\n    const size = opt_size || this.getSizeFromViewport_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, opt_size) {\n    const size = opt_size || this.getSizeFromViewport_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.maxResolution_;\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function(value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      });\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.maxResolution_;\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function(resolution) {\n        const value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;\n        return value;\n      });\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n  getState(pixelRatio) {\n    const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    const projection = this.getProjection();\n    const resolution = /** @type {number} */ (this.getResolution());\n    const pixelResolution = resolution / pixelRatio;\n    const rotation = this.getRotation();\n    return (\n      /** @type {State} */ ({\n        center: [\n          Math.round(center[0] / pixelResolution) * pixelResolution,\n          Math.round(center[1] / pixelResolution) * pixelResolution\n        ],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      })\n    );\n  }\n\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    return /** @type {number} */ (this.constrainResolution(\n      this.maxResolution_, zoom - this.minZoom_, 0));\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  fit(geometryOrExtent, opt_options) {\n    const options = opt_options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',\n      24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent),\n        25); // Cannot fit empty extent provided as `geometry`\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n\n    const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const constrainResolution = options.constrainResolution !== undefined ?\n      options.constrainResolution : true;\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(\n        this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n    const coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    const stride = geometry.getStride();\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtent(\n      [minRotX, minRotY, maxRotX, maxRotY],\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution :\n      Math.max(resolution, minResolution);\n    if (constrainResolution) {\n      let constrainedResolution = this.constrainResolution(resolution, 0, 0);\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(\n          constrainedResolution, -1, 0);\n      }\n      resolution = constrainedResolution;\n    }\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    let centerRotX = (minRotX + maxRotX) / 2;\n    let centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    const centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    const centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    const center = [centerX, centerY];\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    // calculate rotated position\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    const resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n\n    this.setCenter([centerX, centerY]);\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  rotate(rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      const center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n    this.setRotation(rotation);\n  }\n\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.set(ViewProperty.CENTER, center);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n}\n\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function() {\n    callback(returnValue);\n  }, 0);\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom = options.minZoom !== undefined ?\n    options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom = options.maxZoom !== undefined ?\n    options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor = options.zoomFactor !== undefined ?\n    options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ?\n      resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(\n      resolutions);\n  } else {\n    // calculate the default min and max resolution\n    const projection = createProjection(options.projection, 'EPSG:3857');\n    const extent = projection.getExtent();\n    const size = !extent ?\n      // use an extent that can fit the whole world if need be\n      360 * METERS_PER_UNIT[Units.DEGREES] /\n            projection.getMetersPerUnit() :\n      Math.max(getWidth(extent), getHeight(extent));\n\n    const defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(\n      defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution = defaultMaxResolution / Math.pow(\n      defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(\n      Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    resolutionConstraint = createSnapToPower(\n      zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {constraint: resolutionConstraint, maxResolution: maxResolution,\n    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation = options.enableRotation !== undefined ?\n    options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\nexport default View;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}