{"ast":null,"code":"/**\n * @module ol/interaction/DragPan\n */\nimport ViewHint from '../ViewHint.js';\nimport { scale as scaleCoordinate, rotate as rotateCoordinate, add as addCoordinate } from '../coordinate.js';\nimport { easeOut } from '../easing.js';\nimport { noModifierKeys } from '../events/condition.js';\nimport { FALSE } from '../functions.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~noModifierKeys}.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nvar DragPan = /*@__PURE__*/function (PointerInteraction) {\n  function DragPan(opt_options) {\n    PointerInteraction.call(this, {\n      stopDown: FALSE\n    });\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n  if (PointerInteraction) DragPan.__proto__ = PointerInteraction;\n  DragPan.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  DragPan.prototype.constructor = DragPan;\n\n  /**\n   * @inheritDoc\n   */\n  DragPan.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().setHint(ViewHint.INTERACTING, 1);\n    }\n    var targetPointers = this.targetPointers;\n    var centroid = centroidFromPointers(targetPointers);\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        var deltaX = this.lastCentroid[0] - centroid[0];\n        var deltaY = centroid[1] - this.lastCentroid[1];\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        var center = [deltaX, deltaY];\n        scaleCoordinate(center, view.getResolution());\n        rotateCoordinate(center, view.getRotation());\n        addCoordinate(center, view.getCenter());\n        center = view.constrainCenter(center);\n        view.setCenter(center);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragPan.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        var distance = this.kinetic_.getDistance();\n        var angle = this.kinetic_.getAngle();\n        var center = /** @type {!import(\"../coordinate.js\").Coordinate} */view.getCenter();\n        var centerpx = map.getPixelFromCoordinate(center);\n        var dest = map.getCoordinateFromPixel([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animate({\n          center: view.constrainCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.setHint(ViewHint.INTERACTING, -1);\n      }\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n      this.lastCentroid = null;\n      return true;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragPan.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.setCenter(mapBrowserEvent.frameState.viewState.center);\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragPan;\n}(PointerInteraction);\nexport default DragPan;","map":{"version":3,"names":["ViewHint","scale","scaleCoordinate","rotate","rotateCoordinate","add","addCoordinate","easeOut","noModifierKeys","FALSE","PointerInteraction","centroid","centroidFromPointers","DragPan","opt_options","call","stopDown","options","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition_","condition","noKinetic_","handleDragEvent","mapBrowserEvent","getMap","getView","setHint","INTERACTING","targetPointers","length","update","deltaX","deltaY","map","view","center","getResolution","getRotation","getCenter","constrainCenter","setCenter","begin","handleUpEvent","end","distance","getDistance","angle","getAngle","centerpx","getPixelFromCoordinate","dest","getCoordinateFromPixel","Math","cos","sin","animate","duration","easing","handleDownEvent","getAnimating","frameState","viewState"],"sources":["../../../src/ol/interaction/DragPan.js"],"sourcesContent":["/**\n * @module ol/interaction/DragPan\n */\nimport ViewHint from '../ViewHint.js';\nimport {scale as scaleCoordinate, rotate as rotateCoordinate, add as addCoordinate} from '../coordinate.js';\nimport {easeOut} from '../easing.js';\nimport {noModifierKeys} from '../events/condition.js';\nimport {FALSE} from '../functions.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~noModifierKeys}.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      stopDown: FALSE\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().setHint(ViewHint.INTERACTING, 1);\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = centroidFromPointers(targetPointers);\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const deltaX = this.lastCentroid[0] - centroid[0];\n        const deltaY = centroid[1] - this.lastCentroid[1];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        let center = [deltaX, deltaY];\n        scaleCoordinate(center, view.getResolution());\n        rotateCoordinate(center, view.getRotation());\n        addCoordinate(center, view.getCenter());\n        center = view.constrainCenter(center);\n        view.setCenter(center);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = /** @type {!import(\"../coordinate.js\").Coordinate} */ (view.getCenter());\n        const centerpx = map.getPixelFromCoordinate(center);\n        const dest = map.getCoordinateFromPixel([\n          centerpx[0] - distance * Math.cos(angle),\n          centerpx[1] - distance * Math.sin(angle)\n        ]);\n        view.animate({\n          center: view.constrainCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.setHint(ViewHint.INTERACTING, -1);\n      }\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n      this.lastCentroid = null;\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.setCenter(mapBrowserEvent.frameState.viewState.center);\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragPan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}