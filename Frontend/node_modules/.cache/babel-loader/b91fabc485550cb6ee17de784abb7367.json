{"ast":null,"code":"/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport var METERS_PER_UNIT = Math.PI * RADIUS / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nvar EPSG4326Projection = /*@__PURE__*/function (Projection) {\n  function EPSG4326Projection(code, opt_axisOrientation) {\n    Projection.call(this, {\n      code: code,\n      units: Units.DEGREES,\n      extent: EXTENT,\n      axisOrientation: opt_axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT\n    });\n  }\n  if (Projection) EPSG4326Projection.__proto__ = Projection;\n  EPSG4326Projection.prototype = Object.create(Projection && Projection.prototype);\n  EPSG4326Projection.prototype.constructor = EPSG4326Projection;\n  return EPSG4326Projection;\n}(Projection);\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [new EPSG4326Projection('CRS:84'), new EPSG4326Projection('EPSG:4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'), new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'), new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'), new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'), new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')];","map":{"version":3,"names":["Projection","Units","RADIUS","EXTENT","METERS_PER_UNIT","Math","PI","EPSG4326Projection","code","opt_axisOrientation","call","units","DEGREES","extent","axisOrientation","global","metersPerUnit","worldExtent","prototype","constructor","PROJECTIONS"],"sources":["../../../src/ol/proj/epsg4326.js"],"sourcesContent":["/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = Math.PI * RADIUS / 180;\n\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n\n  /**\n   * @param {string} code Code.\n   * @param {string=} opt_axisOrientation Axis orientation.\n   */\n  constructor(code, opt_axisOrientation) {\n    super({\n      code: code,\n      units: Units.DEGREES,\n      extent: EXTENT,\n      axisOrientation: opt_axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT\n    });\n\n  }\n\n}\n\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')\n];\n"],"mappings":"AAAA;;;AAGA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,KAAK,MAAM,YAAY;;;;;;;;AAS9B,OAAO,IAAMC,MAAM,GAAG,OAAO;;;;;;;;AAS7B,OAAO,IAAMC,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;;;;;;AAO1C,OAAO,IAAMC,eAAe,GAAGC,IAAI,CAACC,EAAE,GAAGJ,MAAM,GAAG,GAAG;;;;;;;;;;AAWrD,IAAMK,kBAAkB,GAAmB,uBAAAP,UAAA;EAMzC,SAAAO,kBAAWA,CAACC,IAAI,EAAEC,mBAAmB,EAAE;IACrCT,UAAA,CAAAU,IAAK,OAAC;MACJF,IAAI,EAAEA,IAAI;MACVG,KAAK,EAAEV,KAAK,CAACW,OAAO;MACpBC,MAAM,EAAEV,MAAM;MACdW,eAAe,EAAEL,mBAAmB;MACpCM,MAAM,EAAE,IAAI;MACZC,aAAa,EAAEZ,eAAe;MAC9Ba,WAAW,EAAEd;KACd,CAAC;;;;oBAEH,CAAAe,SAAA,CAAAC,WAAA,GAAAZ,kBAAA;;EAjB8BP,UAAA;;;;;;;;AA4BjC,OAAO,IAAMoB,WAAW,GAAG,CACzB,IAAIb,kBAAkB,CAAC,QAAQ,CAAC,EAChC,IAAIA,kBAAkB,CAAC,WAAW,EAAE,KAAK,CAAC,EAC1C,IAAIA,kBAAkB,CAAC,4BAA4B,EAAE,KAAK,CAAC,EAC3D,IAAIA,kBAAkB,CAAC,+BAA+B,EAAE,KAAK,CAAC,EAC9D,IAAIA,kBAAkB,CAAC,+BAA+B,CAAC,EACvD,IAAIA,kBAAkB,CAAC,0BAA0B,CAAC,EAClD,IAAIA,kBAAkB,CAAC,8CAA8C,EAAE,KAAK,CAAC,EAC7E,IAAIA,kBAAkB,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAC7D"},"metadata":{},"sourceType":"module"}