{"ast":null,"code":"/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << z - 1;\n  var i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  var extent = tileGrid.getExtent();\n  var tileRange;\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}","map":{"version":3,"names":["createOrUpdate","z","x","y","opt_tileCoord","undefined","getKeyZXY","getKey","tileCoord","fromKey","key","split","map","Number","hash","quadKey","digits","Array","mask","i","charCode","String","fromCharCode","join","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","extent","getExtent","tileRange","getFullTileRange","getTileRangeForExtentAndZ","containsXY"],"sources":["../../src/ol/tilecoord.js"],"sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << (z - 1);\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const extent = tileGrid.getExtent();\n  let tileRange;\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}