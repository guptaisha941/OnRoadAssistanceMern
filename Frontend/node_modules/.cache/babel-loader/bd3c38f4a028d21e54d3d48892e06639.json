{"ast":null,"code":"/**\n * @module ol/math\n */\nimport { assert } from './asserts.js';\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport var cosh = function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function (x) {\n      var y = /** @type {Math} */Math.exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n}();\n\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\nexport function roundUpToPowerOfTwo(x) {\n  assert(0 < x, 29); // `x` must be greater than `0`\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  var n = mat.length;\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  var x = new Array(n);\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}","map":{"version":3,"names":["assert","clamp","value","min","max","Math","cosh","x","y","exp","roundUpToPowerOfTwo","pow","ceil","log","LN2","squaredSegmentDistance","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","length","i","maxRow","maxEl","abs","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","PI","toRadians","angleInDegrees","modulo","a","b","lerp"],"sources":["../../src/ol/math.js"],"sourcesContent":["/**\n * @module ol/math\n */\nimport {assert} from './asserts.js';\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport const cosh = (function() {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  let cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function(x) {\n      const y = /** @type {Math} */ (Math).exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n}());\n\n\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\nexport function roundUpToPowerOfTwo(x) {\n  assert(0 < x, 29); // `x` must be greater than `0`\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n}\n\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}