{"ast":null,"code":"import _ol_asserts_ from './asserts.js';\nvar _ol_math_ = {};\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\n_ol_math_.clamp = function (value, min, max) {\n  return Math.min(Math.max(value, min), max);\n};\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\n_ol_math_.cosh = function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function (x) {\n      var y = Math.exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n}();\n\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\n_ol_math_.roundUpToPowerOfTwo = function (x) {\n  _ol_asserts_.assert(0 < x, 29); // `x` must be greater than `0`\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n};\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n_ol_math_.squaredSegmentDistance = function (x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return _ol_math_.squaredDistance(x, y, x1, y1);\n};\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n_ol_math_.squaredDistance = function (x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n};\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array.<Array.<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array.<number>} The resulting vector.\n */\n_ol_math_.solveLinearSystem = function (mat) {\n  var n = mat.length;\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  var x = new Array(n);\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n};\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\n_ol_math_.toDegrees = function (angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\n_ol_math_.toRadians = function (angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n};\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\n_ol_math_.modulo = function (a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n};\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\n_ol_math_.lerp = function (a, b, x) {\n  return a + x * (b - a);\n};\nexport default _ol_math_;","map":{"version":3,"names":["_ol_asserts_","_ol_math_","clamp","value","min","max","Math","cosh","x","y","exp","roundUpToPowerOfTwo","assert","pow","ceil","log","LN2","squaredSegmentDistance","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","length","i","maxRow","maxEl","abs","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","PI","toRadians","angleInDegrees","modulo","a","b","lerp"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/math.js"],"sourcesContent":["import _ol_asserts_ from './asserts.js';\nvar _ol_math_ = {};\n\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\n_ol_math_.clamp = function(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n};\n\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\n_ol_math_.cosh = (function() {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function(x) {\n      var y = Math.exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n}());\n\n\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\n_ol_math_.roundUpToPowerOfTwo = function(x) {\n  _ol_asserts_.assert(0 < x, 29); // `x` must be greater than `0`\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n};\n\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n_ol_math_.squaredSegmentDistance = function(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return _ol_math_.squaredDistance(x, y, x1, y1);\n};\n\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n_ol_math_.squaredDistance = function(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array.<Array.<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array.<number>} The resulting vector.\n */\n_ol_math_.solveLinearSystem = function(mat) {\n  var n = mat.length;\n\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  var x = new Array(n);\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n};\n\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\n_ol_math_.toDegrees = function(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n};\n\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\n_ol_math_.toRadians = function(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n};\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\n_ol_math_.modulo = function(a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n};\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\n_ol_math_.lerp = function(a, b, x) {\n  return a + x * (b - a);\n};\nexport default _ol_math_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}