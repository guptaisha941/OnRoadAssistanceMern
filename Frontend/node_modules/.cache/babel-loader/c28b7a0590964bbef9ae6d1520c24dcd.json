{"ast":null,"code":"/**\n * @module ol/geom/flat/interpolate\n */\nimport { binarySearch } from '../../array.js';\nimport { lerp } from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {\n  var pointX = NaN;\n  var pointY = NaN;\n  var n = (end - offset) / stride;\n  if (n === 1) {\n    pointX = flatCoordinates[offset];\n    pointY = flatCoordinates[offset + 1];\n  } else if (n == 2) {\n    pointX = (1 - fraction) * flatCoordinates[offset] + fraction * flatCoordinates[offset + stride];\n    pointY = (1 - fraction) * flatCoordinates[offset + 1] + fraction * flatCoordinates[offset + stride + 1];\n  } else if (n !== 0) {\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    var length = 0;\n    var cumulativeLengths = [0];\n    for (var i = offset + stride; i < end; i += stride) {\n      var x2 = flatCoordinates[i];\n      var y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    var target = fraction * length;\n    var index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      var t = (target - cumulativeLengths[-index - 2]) / (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      var o = offset + (-index - 2) * stride;\n      pointX = lerp(flatCoordinates[o], flatCoordinates[o + stride], t);\n      pointY = lerp(flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);\n    } else {\n      pointX = flatCoordinates[offset + index * stride];\n      pointY = flatCoordinates[offset + index * stride + 1];\n    }\n  }\n  if (opt_dest) {\n    opt_dest[0] = pointX;\n    opt_dest[1] = pointY;\n    return opt_dest;\n  } else {\n    return [pointX, pointY];\n  }\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n  if (end == offset) {\n    return null;\n  }\n  var coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  var lo = offset / stride;\n  var hi = end / stride;\n  while (lo < hi) {\n    var mid = lo + hi >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  var m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  var m1 = flatCoordinates[(lo + 1) * stride - 1];\n  var t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (var i = 0; i < stride - 1; ++i) {\n    coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n  }\n  var coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);\n    }\n    offset = end;\n  }\n  return null;\n}","map":{"version":3,"names":["binarySearch","lerp","interpolatePoint","flatCoordinates","offset","end","stride","fraction","opt_dest","pointX","NaN","pointY","n","x1","y1","length","cumulativeLengths","i","x2","y2","Math","sqrt","push","target","index","t","o","lineStringCoordinateAtM","m","extrapolate","coordinate","slice","lo","hi","mid","m0","m1","lineStringsCoordinateAtM","ends","interpolate","ii"],"sources":["../../../../src/ol/geom/flat/interpolate.js"],"sourcesContent":["/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {\n  let pointX = NaN;\n  let pointY = NaN;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    pointX = flatCoordinates[offset];\n    pointY = flatCoordinates[offset + 1];\n  } else if (n == 2) {\n    pointX = (1 - fraction) * flatCoordinates[offset] +\n        fraction * flatCoordinates[offset + stride];\n    pointY = (1 - fraction) * flatCoordinates[offset + 1] +\n        fraction * flatCoordinates[offset + stride + 1];\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      const t = (target - cumulativeLengths[-index - 2]) /\n          (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      const o = offset + (-index - 2) * stride;\n      pointX = lerp(\n        flatCoordinates[o], flatCoordinates[o + stride], t);\n      pointY = lerp(\n        flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);\n    } else {\n      pointX = flatCoordinates[offset + index * stride];\n      pointY = flatCoordinates[offset + index * stride + 1];\n    }\n  }\n  if (opt_dest) {\n    opt_dest[0] = pointX;\n    opt_dest[1] = pointY;\n    return opt_dest;\n  } else {\n    return [pointX, pointY];\n  }\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i],\n      flatCoordinates[lo * stride + i], t));\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates, offset, end, stride, m, false);\n    }\n    offset = end;\n  }\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}