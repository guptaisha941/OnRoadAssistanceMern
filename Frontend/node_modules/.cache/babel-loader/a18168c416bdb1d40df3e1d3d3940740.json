{"ast":null,"code":"/**\n * @module ol/source/Tile\n */\nimport { abstract } from '../util.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport { equivalent } from '../proj.js';\nimport { toSize, scale as scaleSize } from '../size.js';\nimport Source from './Source.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { wrapX, getForProjection as getTileGridForProjection } from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nvar TileSource = /*@__PURE__*/function (Source) {\n  function TileSource(options) {\n    Source.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition\n    };\n  }\n  if (Source) TileSource.__proto__ = Source;\n  TileSource.prototype = Object.create(Source && Source.prototype);\n  TileSource.prototype.constructor = TileSource;\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  TileSource.prototype.canExpireCache = function canExpireCache() {\n    return this.tileCache.canExpireCache();\n  };\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, import(\"../TileRange.js\").default>} usedTiles Used tiles.\n   */\n  TileSource.prototype.expireCache = function expireCache(projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  TileSource.prototype.forEachLoadedTile = function forEachLoadedTile(projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  };\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  TileSource.prototype.getGutterForProjection = function getGutterForProjection(projection) {\n    return 0;\n  };\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  TileSource.prototype.getKey = function getKey() {\n    return this.key_;\n  };\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  TileSource.prototype.setKey = function setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  TileSource.prototype.getOpaque = function getOpaque(projection) {\n    return this.opaque_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileSource.prototype.getResolutions = function getResolutions() {\n    return this.tileGrid.getResolutions();\n  };\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  TileSource.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n  TileSource.prototype.getTileGrid = function getTileGrid() {\n    return this.tileGrid;\n  };\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  TileSource.prototype.getTileGridForProjection = function getTileGridForProjection$1(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  TileSource.prototype.getTileCacheForProjection = function getTileCacheForProjection(projection) {\n    var thisProj = this.getProjection();\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  };\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  TileSource.prototype.getTilePixelRatio = function getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  TileSource.prototype.getTilePixelSize = function getTilePixelSize(z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  TileSource.prototype.getTileCoordForTileUrlFunction = function getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileSource.prototype.refresh = function refresh() {\n    this.tileCache.clear();\n    this.changed();\n  };\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  TileSource.prototype.useTile = function useTile(z, x, y, projection) {};\n  return TileSource;\n}(Source);\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport var TileSourceEvent = /*@__PURE__*/function (Event) {\n  function TileSourceEvent(type, tile) {\n    Event.call(this, type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n  if (Event) TileSourceEvent.__proto__ = Event;\n  TileSourceEvent.prototype = Object.create(Event && Event.prototype);\n  TileSourceEvent.prototype.constructor = TileSourceEvent;\n  return TileSourceEvent;\n}(Event);\nexport default TileSource;","map":{"version":3,"names":["abstract","TileCache","TileState","Event","equivalent","toSize","scale","scaleSize","Source","getKeyZXY","withinExtentAndZ","wrapX","getForProjection","getTileGridForProjection","TileSource","options","call","attributions","attributionsCollapsible","projection","state","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileCache","cacheSize","tmpSize","key_","key","tileOptions","transition","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","getGutterForProjection","getKey","setKey","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","getTileGridForProjection$1","thisProj","getProjection","getTilePixelRatio","getTilePixelSize","tileSize","getTileSize","getTileCoordForTileUrlFunction","tileCoord","opt_projection","getWrapX","isGlobal","refresh","clear","useTile","TileSourceEvent","type","prototype","constructor"],"sources":["../../../src/ol/source/Tile.js"],"sourcesContent":["/**\n * @module ol/source/Tile\n */\nimport {abstract} from '../util.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport {equivalent} from '../proj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport Source from './Source.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {wrapX, getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?\n      options.tilePixelRatio : 1;\n\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {transition: options.transition};\n\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, import(\"../TileRange.js\").default>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (tileCache.get(tileCoordKey));\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = (callback(tile) !== false);\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getResolutions() {\n    return this.tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    const projection = opt_projection !== undefined ?\n      opt_projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.tileCache.clear();\n    this.changed();\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n\n}\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n\n  }\n\n}\n\nexport default TileSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}