{"ast":null,"code":"import _ol_asserts_ from './asserts.js';\nimport _ol_extent_Corner_ from './extent/corner.js';\nimport _ol_extent_Relationship_ from './extent/relationship.js';\nvar _ol_extent_ = {};\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Bounding extent.\n * @api\n */\n_ol_extent_.boundingExtent = function (coordinates) {\n  var extent = _ol_extent_.createEmpty();\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n};\n\n/**\n * @param {Array.<number>} xs Xs.\n * @param {Array.<number>} ys Ys.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @private\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.boundingExtentXYs_ = function (xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return _ol_extent_.createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n\n/**\n * Return extent increased by the provided value.\n * @param {ol.Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_extent_.buffer = function (extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n  }\n};\n\n/**\n * Creates a clone of an extent.\n *\n * @param {ol.Extent} extent Extent to clone.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} The clone.\n */\n_ol_extent_.clone = function (extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n_ol_extent_.closestSquaredDistanceXY = function (extent, x, y) {\n  var dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n};\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n_ol_extent_.containsCoordinate = function (extent, coordinate) {\n  return _ol_extent_.containsXY(extent, coordinate[0], coordinate[1]);\n};\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n_ol_extent_.containsExtent = function (extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n};\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n_ol_extent_.containsXY = function (extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n};\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} coordinate The coordinate.\n * @return {number} The relationship (bitwise compare with\n *     ol.extent.Relationship).\n */\n_ol_extent_.coordinateRelationship = function (extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = _ol_extent_Relationship_.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | _ol_extent_Relationship_.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | _ol_extent_Relationship_.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | _ol_extent_Relationship_.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | _ol_extent_Relationship_.ABOVE;\n  }\n  if (relationship === _ol_extent_Relationship_.UNKNOWN) {\n    relationship = _ol_extent_Relationship_.INTERSECTING;\n  }\n  return relationship;\n};\n\n/**\n * Create an empty extent.\n * @return {ol.Extent} Empty extent.\n * @api\n */\n_ol_extent_.createEmpty = function () {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n};\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdate = function (minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n};\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateEmpty = function (opt_extent) {\n  return _ol_extent_.createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n};\n\n/**\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromCoordinate = function (coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return _ol_extent_.createOrUpdate(x, y, x, y, opt_extent);\n};\n\n/**\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromCoordinates = function (coordinates, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendCoordinates(extent, coordinates);\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromFlatCoordinates = function (flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n};\n\n/**\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromRings = function (rings, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendRings(extent, rings);\n};\n\n/**\n * Determine if two extents are equivalent.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n_ol_extent_.equals = function (extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n};\n\n/**\n * Modify an extent to include another extent.\n * @param {ol.Extent} extent1 The extent to be modified.\n * @param {ol.Extent} extent2 The extent that will be included in the first.\n * @return {ol.Extent} A reference to the first (extended) extent.\n * @api\n */\n_ol_extent_.extend = function (extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n */\n_ol_extent_.extendCoordinate = function (extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendCoordinates = function (extent, coordinates) {\n  var i, ii;\n  for (i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendFlatCoordinates = function (extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    _ol_extent_.extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendRings = function (extent, rings) {\n  var i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n_ol_extent_.extendXY = function (extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n};\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {ol.Extent} extent Extent.\n * @param {function(this:T, ol.Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\n_ol_extent_.forEachCorner = function (extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, _ol_extent_.getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n};\n\n/**\n * Get the size of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n_ol_extent_.getArea = function (extent) {\n  var area = 0;\n  if (!_ol_extent_.isEmpty(extent)) {\n    area = _ol_extent_.getWidth(extent) * _ol_extent_.getHeight(extent);\n  }\n  return area;\n};\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom left coordinate.\n * @api\n */\n_ol_extent_.getBottomLeft = function (extent) {\n  return [extent[0], extent[1]];\n};\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom right coordinate.\n * @api\n */\n_ol_extent_.getBottomRight = function (extent) {\n  return [extent[2], extent[1]];\n};\n\n/**\n * Get the center coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Center.\n * @api\n */\n_ol_extent_.getCenter = function (extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n};\n\n/**\n * Get a corner coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.extent.Corner} corner Corner.\n * @return {ol.Coordinate} Corner coordinate.\n */\n_ol_extent_.getCorner = function (extent, corner) {\n  var coordinate;\n  if (corner === _ol_extent_Corner_.BOTTOM_LEFT) {\n    coordinate = _ol_extent_.getBottomLeft(extent);\n  } else if (corner === _ol_extent_Corner_.BOTTOM_RIGHT) {\n    coordinate = _ol_extent_.getBottomRight(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_LEFT) {\n    coordinate = _ol_extent_.getTopLeft(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_RIGHT) {\n    coordinate = _ol_extent_.getTopRight(extent);\n  } else {\n    _ol_asserts_.assert(false, 13); // Invalid corner\n  }\n\n  return (/** @type {!ol.Coordinate} */coordinate\n  );\n};\n\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n_ol_extent_.getEnlargedArea = function (extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n};\n\n/**\n * @param {ol.Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {ol.Size} size Size.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.getForViewAndSize = function (center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return _ol_extent_.createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n};\n\n/**\n * Get the height of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n_ol_extent_.getHeight = function (extent) {\n  return extent[3] - extent[1];\n};\n\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n_ol_extent_.getIntersectionArea = function (extent1, extent2) {\n  var intersection = _ol_extent_.getIntersection(extent1, extent2);\n  return _ol_extent_.getArea(intersection);\n};\n\n/**\n * Get the intersection of two extents.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @param {ol.Extent=} opt_extent Optional extent to populate with intersection.\n * @return {ol.Extent} Intersecting extent.\n * @api\n */\n_ol_extent_.getIntersection = function (extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : _ol_extent_.createEmpty();\n  if (_ol_extent_.intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  }\n  return intersection;\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @return {number} Margin.\n */\n_ol_extent_.getMargin = function (extent) {\n  return _ol_extent_.getWidth(extent) + _ol_extent_.getHeight(extent);\n};\n\n/**\n * Get the size (width, height) of an extent.\n * @param {ol.Extent} extent The extent.\n * @return {ol.Size} The extent size.\n * @api\n */\n_ol_extent_.getSize = function (extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n};\n\n/**\n * Get the top left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top left coordinate.\n * @api\n */\n_ol_extent_.getTopLeft = function (extent) {\n  return [extent[0], extent[3]];\n};\n\n/**\n * Get the top right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top right coordinate.\n * @api\n */\n_ol_extent_.getTopRight = function (extent) {\n  return [extent[2], extent[3]];\n};\n\n/**\n * Get the width of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n_ol_extent_.getWidth = function (extent) {\n  return extent[2] - extent[0];\n};\n\n/**\n * Determine if one extent intersects another.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n_ol_extent_.intersects = function (extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n};\n\n/**\n * Determine if an extent is empty.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n_ol_extent_.isEmpty = function (extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.returnOrUpdate = function (extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n};\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} value Value.\n */\n_ol_extent_.scaleFromCenter = function (extent, value) {\n  var deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  var deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n};\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} start Segment start coordinate.\n * @param {ol.Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n_ol_extent_.intersectsSegment = function (extent, start, end) {\n  var intersects = false;\n  var startRel = _ol_extent_.coordinateRelationship(extent, start);\n  var endRel = _ol_extent_.coordinateRelationship(extent, end);\n  if (startRel === _ol_extent_Relationship_.INTERSECTING || endRel === _ol_extent_Relationship_.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n    if (!!(endRel & _ol_extent_Relationship_.ABOVE) && !(startRel & _ol_extent_Relationship_.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.RIGHT) && !(startRel & _ol_extent_Relationship_.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.BELOW) && !(startRel & _ol_extent_Relationship_.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.LEFT) && !(startRel & _ol_extent_Relationship_.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n};\n\n/**\n * Apply a transform function to the extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.TransformFunction} transformFn Transform function.  Called with\n * [minX, minY, maxX, maxY] extent coordinates.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_extent_.applyTransform = function (extent, transformFn, opt_extent) {\n  var coordinates = [extent[0], extent[1], extent[0], extent[3], extent[2], extent[1], extent[2], extent[3]];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _ol_extent_.boundingExtentXYs_(xs, ys, opt_extent);\n};\nexport default _ol_extent_;","map":{"version":3,"names":["_ol_asserts_","_ol_extent_Corner_","_ol_extent_Relationship_","_ol_extent_","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","boundingExtentXYs_","xs","ys","opt_extent","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","extend","extendXY","forEachCorner","callback","opt_this","val","call","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","assert","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","x0","x1","x2","x3","y0","y1","y2","y3","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/extent.js"],"sourcesContent":["import _ol_asserts_ from './asserts.js';\nimport _ol_extent_Corner_ from './extent/corner.js';\nimport _ol_extent_Relationship_ from './extent/relationship.js';\nvar _ol_extent_ = {};\n\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Bounding extent.\n * @api\n */\n_ol_extent_.boundingExtent = function(coordinates) {\n  var extent = _ol_extent_.createEmpty();\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {Array.<number>} xs Xs.\n * @param {Array.<number>} ys Ys.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @private\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.boundingExtentXYs_ = function(xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return _ol_extent_.createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n\n\n/**\n * Return extent increased by the provided value.\n * @param {ol.Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_extent_.buffer = function(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [\n      extent[0] - value,\n      extent[1] - value,\n      extent[2] + value,\n      extent[3] + value\n    ];\n  }\n};\n\n\n/**\n * Creates a clone of an extent.\n *\n * @param {ol.Extent} extent Extent to clone.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} The clone.\n */\n_ol_extent_.clone = function(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n_ol_extent_.closestSquaredDistanceXY = function(extent, x, y) {\n  var dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n_ol_extent_.containsCoordinate = function(extent, coordinate) {\n  return _ol_extent_.containsXY(extent, coordinate[0], coordinate[1]);\n};\n\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n_ol_extent_.containsExtent = function(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&\n      extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n};\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {ol.Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n_ol_extent_.containsXY = function(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n};\n\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} coordinate The coordinate.\n * @return {number} The relationship (bitwise compare with\n *     ol.extent.Relationship).\n */\n_ol_extent_.coordinateRelationship = function(extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = _ol_extent_Relationship_.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | _ol_extent_Relationship_.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | _ol_extent_Relationship_.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | _ol_extent_Relationship_.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | _ol_extent_Relationship_.ABOVE;\n  }\n  if (relationship === _ol_extent_Relationship_.UNKNOWN) {\n    relationship = _ol_extent_Relationship_.INTERSECTING;\n  }\n  return relationship;\n};\n\n\n/**\n * Create an empty extent.\n * @return {ol.Extent} Empty extent.\n * @api\n */\n_ol_extent_.createEmpty = function() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n};\n\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdate = function(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n};\n\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateEmpty = function(opt_extent) {\n  return _ol_extent_.createOrUpdate(\n      Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n};\n\n\n/**\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromCoordinate = function(coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return _ol_extent_.createOrUpdate(x, y, x, y, opt_extent);\n};\n\n\n/**\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromCoordinates = function(coordinates, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendCoordinates(extent, coordinates);\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromFlatCoordinates = function(flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendFlatCoordinates(\n      extent, flatCoordinates, offset, end, stride);\n};\n\n\n/**\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.createOrUpdateFromRings = function(rings, opt_extent) {\n  var extent = _ol_extent_.createOrUpdateEmpty(opt_extent);\n  return _ol_extent_.extendRings(extent, rings);\n};\n\n\n/**\n * Determine if two extents are equivalent.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n_ol_extent_.equals = function(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&\n      extent1[1] == extent2[1] && extent1[3] == extent2[3];\n};\n\n\n/**\n * Modify an extent to include another extent.\n * @param {ol.Extent} extent1 The extent to be modified.\n * @param {ol.Extent} extent2 The extent that will be included in the first.\n * @return {ol.Extent} A reference to the first (extended) extent.\n * @api\n */\n_ol_extent_.extend = function(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Coordinate} coordinate Coordinate.\n */\n_ol_extent_.extendCoordinate = function(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendCoordinates = function(extent, coordinates) {\n  var i, ii;\n  for (i = 0, ii = coordinates.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendFlatCoordinates = function(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    _ol_extent_.extendXY(\n        extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {Array.<Array.<ol.Coordinate>>} rings Rings.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.extendRings = function(extent, rings) {\n  var i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    _ol_extent_.extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n_ol_extent_.extendXY = function(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n};\n\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {ol.Extent} extent Extent.\n * @param {function(this:T, ol.Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\n_ol_extent_.forEachCorner = function(extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, _ol_extent_.getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, _ol_extent_.getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n};\n\n\n/**\n * Get the size of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n_ol_extent_.getArea = function(extent) {\n  var area = 0;\n  if (!_ol_extent_.isEmpty(extent)) {\n    area = _ol_extent_.getWidth(extent) * _ol_extent_.getHeight(extent);\n  }\n  return area;\n};\n\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom left coordinate.\n * @api\n */\n_ol_extent_.getBottomLeft = function(extent) {\n  return [extent[0], extent[1]];\n};\n\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Bottom right coordinate.\n * @api\n */\n_ol_extent_.getBottomRight = function(extent) {\n  return [extent[2], extent[1]];\n};\n\n\n/**\n * Get the center coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Center.\n * @api\n */\n_ol_extent_.getCenter = function(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n};\n\n\n/**\n * Get a corner coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.extent.Corner} corner Corner.\n * @return {ol.Coordinate} Corner coordinate.\n */\n_ol_extent_.getCorner = function(extent, corner) {\n  var coordinate;\n  if (corner === _ol_extent_Corner_.BOTTOM_LEFT) {\n    coordinate = _ol_extent_.getBottomLeft(extent);\n  } else if (corner === _ol_extent_Corner_.BOTTOM_RIGHT) {\n    coordinate = _ol_extent_.getBottomRight(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_LEFT) {\n    coordinate = _ol_extent_.getTopLeft(extent);\n  } else if (corner === _ol_extent_Corner_.TOP_RIGHT) {\n    coordinate = _ol_extent_.getTopRight(extent);\n  } else {\n    _ol_asserts_.assert(false, 13); // Invalid corner\n  }\n  return /** @type {!ol.Coordinate} */ (coordinate);\n};\n\n\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n_ol_extent_.getEnlargedArea = function(extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n};\n\n\n/**\n * @param {ol.Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {ol.Size} size Size.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.getForViewAndSize = function(center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return _ol_extent_.createOrUpdate(\n      Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),\n      Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),\n      opt_extent);\n};\n\n\n/**\n * Get the height of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n_ol_extent_.getHeight = function(extent) {\n  return extent[3] - extent[1];\n};\n\n\n/**\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n_ol_extent_.getIntersectionArea = function(extent1, extent2) {\n  var intersection = _ol_extent_.getIntersection(extent1, extent2);\n  return _ol_extent_.getArea(intersection);\n};\n\n\n/**\n * Get the intersection of two extents.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent 2.\n * @param {ol.Extent=} opt_extent Optional extent to populate with intersection.\n * @return {ol.Extent} Intersecting extent.\n * @api\n */\n_ol_extent_.getIntersection = function(extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : _ol_extent_.createEmpty();\n  if (_ol_extent_.intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  }\n  return intersection;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @return {number} Margin.\n */\n_ol_extent_.getMargin = function(extent) {\n  return _ol_extent_.getWidth(extent) + _ol_extent_.getHeight(extent);\n};\n\n\n/**\n * Get the size (width, height) of an extent.\n * @param {ol.Extent} extent The extent.\n * @return {ol.Size} The extent size.\n * @api\n */\n_ol_extent_.getSize = function(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n};\n\n\n/**\n * Get the top left coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top left coordinate.\n * @api\n */\n_ol_extent_.getTopLeft = function(extent) {\n  return [extent[0], extent[3]];\n};\n\n\n/**\n * Get the top right coordinate of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {ol.Coordinate} Top right coordinate.\n * @api\n */\n_ol_extent_.getTopRight = function(extent) {\n  return [extent[2], extent[3]];\n};\n\n\n/**\n * Get the width of an extent.\n * @param {ol.Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n_ol_extent_.getWidth = function(extent) {\n  return extent[2] - extent[0];\n};\n\n\n/**\n * Determine if one extent intersects another.\n * @param {ol.Extent} extent1 Extent 1.\n * @param {ol.Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n_ol_extent_.intersects = function(extent1, extent2) {\n  return extent1[0] <= extent2[2] &&\n      extent1[2] >= extent2[0] &&\n      extent1[1] <= extent2[3] &&\n      extent1[3] >= extent2[1];\n};\n\n\n/**\n * Determine if an extent is empty.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n_ol_extent_.isEmpty = function(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Extent=} opt_extent Extent.\n * @return {ol.Extent} Extent.\n */\n_ol_extent_.returnOrUpdate = function(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {number} value Value.\n */\n_ol_extent_.scaleFromCenter = function(extent, value) {\n  var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n};\n\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {ol.Extent} extent The extent.\n * @param {ol.Coordinate} start Segment start coordinate.\n * @param {ol.Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n_ol_extent_.intersectsSegment = function(extent, start, end) {\n  var intersects = false;\n  var startRel = _ol_extent_.coordinateRelationship(extent, start);\n  var endRel = _ol_extent_.coordinateRelationship(extent, end);\n  if (startRel === _ol_extent_Relationship_.INTERSECTING ||\n      endRel === _ol_extent_Relationship_.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n    if (!!(endRel & _ol_extent_Relationship_.ABOVE) &&\n        !(startRel & _ol_extent_Relationship_.ABOVE)) {\n      // potentially intersects top\n      x = endX - ((endY - maxY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.RIGHT) &&\n        !(startRel & _ol_extent_Relationship_.RIGHT)) {\n      // potentially intersects right\n      y = endY - ((endX - maxX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.BELOW) &&\n        !(startRel & _ol_extent_Relationship_.BELOW)) {\n      // potentially intersects bottom\n      x = endX - ((endY - minY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & _ol_extent_Relationship_.LEFT) &&\n        !(startRel & _ol_extent_Relationship_.LEFT)) {\n      // potentially intersects left\n      y = endY - ((endX - minX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n\n  }\n  return intersects;\n};\n\n\n/**\n * Apply a transform function to the extent.\n * @param {ol.Extent} extent Extent.\n * @param {ol.TransformFunction} transformFn Transform function.  Called with\n * [minX, minY, maxX, maxY] extent coordinates.\n * @param {ol.Extent=} opt_extent Destination extent.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_extent_.applyTransform = function(extent, transformFn, opt_extent) {\n  var coordinates = [\n    extent[0], extent[1],\n    extent[0], extent[3],\n    extent[2], extent[1],\n    extent[2], extent[3]\n  ];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _ol_extent_.boundingExtentXYs_(xs, ys, opt_extent);\n};\nexport default _ol_extent_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}