{"ast":null,"code":"/**\n * @module ol/Observable\n */\nimport { listen, unlistenByKey, unlisten, listenOnce } from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\nvar Observable = /*@__PURE__*/function (EventTarget) {\n  function Observable() {\n    EventTarget.call(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n  if (EventTarget) Observable.__proto__ = EventTarget;\n  Observable.prototype = Object.create(EventTarget && EventTarget.prototype);\n  Observable.prototype.constructor = Observable;\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  Observable.prototype.changed = function changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  Observable.prototype.getRevision = function getRevision() {\n    return this.revision_;\n  };\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.on = function on(type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */type, listener);\n    }\n  };\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.once = function once(type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listenOnce(this, /** @type {string} */type, listener);\n    }\n  };\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  Observable.prototype.un = function un(type, listener) {\n    if (Array.isArray(type)) {\n      for (var i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n      return;\n    } else {\n      unlisten(this, /** @type {string} */type, listener);\n    }\n  };\n  return Observable;\n}(EventTarget);\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey( /** @type {import(\"./events.js\").EventsKey} */key);\n  }\n}\nexport default Observable;","map":{"version":3,"names":["listen","unlistenByKey","unlisten","listenOnce","EventTarget","EventType","Observable","call","revision_","changed","dispatchEvent","CHANGE","getRevision","on","type","listener","Array","isArray","len","length","keys","i","once","un","ii","unByKey","key"],"sources":["../../src/ol/Observable.js"],"sourcesContent":["/**\n * @module ol/Observable\n */\nimport {listen, unlistenByKey, unlisten, listenOnce} from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  on(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  once(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listenOnce(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  un(type, listener) {\n    if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n      return;\n    } else {\n      unlisten(this, /** @type {string} */ (type), listener);\n    }\n  }\n}\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\n\nexport default Observable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}