{"ast":null,"code":"/**\n * @module ol/extent\n */\nimport { assert } from './asserts.js';\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  var extent = createEmpty();\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent=} opt_extent Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n  }\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  var dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {Relationship} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return createOrUpdate(x, y, x, y, opt_extent);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (var i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(this:T, import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\nexport function forEachCorner(extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  var area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  var coordinate;\n  if (corner === Corner.BOTTOM_LEFT) {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === Corner.BOTTOM_RIGHT) {\n    coordinate = getBottomRight(extent);\n  } else if (corner === Corner.TOP_LEFT) {\n    coordinate = getTopLeft(extent);\n  } else if (corner === Corner.TOP_RIGHT) {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  var intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent=} opt_extent Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  var deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  var deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  var intersects = false;\n  var startRel = coordinateRelationship(extent, start);\n  var endRel = coordinateRelationship(extent, end);\n  if (startRel === Relationship.INTERSECTING || endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.RIGHT) && !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & Relationship.BELOW) && !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.LEFT) && !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent) {\n  var coordinates = [extent[0], extent[1], extent[0], extent[3], extent[2], extent[1], extent[2], extent[3]];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _boundingExtentXYs(xs, ys, opt_extent);\n}","map":{"version":3,"names":["assert","Corner","Relationship","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","_boundingExtentXYs","xs","ys","opt_extent","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","extend","extendXY","forEachCorner","callback","opt_this","val","call","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","x0","x1","x2","x3","y0","y1","y2","y3","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn"],"sources":["../../src/ol/extent.js"],"sourcesContent":["/**\n * @module ol/extent\n */\nimport {assert} from './asserts.js';\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\n\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent=} opt_extent Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [\n      extent[0] - value,\n      extent[1] - value,\n      extent[2] + value,\n      extent[3] + value\n    ];\n  }\n}\n\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&\n      extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {Relationship} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n  return createOrUpdate(\n    Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, opt_extent);\n}\n\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n  const extent = createOrUpdateEmpty(opt_extent);\n  return extendCoordinates(extent, coordinates);\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n  const extent = createOrUpdateEmpty(opt_extent);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n  const extent = createOrUpdateEmpty(opt_extent);\n  return extendRings(extent, rings);\n}\n\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&\n      extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(this:T, import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\nexport function forEachCorner(extent, callback, opt_this) {\n  let val;\n  val = callback.call(opt_this, getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === Corner.BOTTOM_LEFT) {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === Corner.BOTTOM_RIGHT) {\n    coordinate = getBottomRight(extent);\n  } else if (corner === Corner.TOP_LEFT) {\n    coordinate = getTopLeft(extent);\n  } else if (corner === Corner.TOP_RIGHT) {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n  return coordinate;\n}\n\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n  const dx = resolution * size[0] / 2;\n  const dy = resolution * size[1] / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  const x0 = x - xCos + ySin;\n  const x1 = x - xCos - ySin;\n  const x2 = x + xCos - ySin;\n  const x3 = x + xCos + ySin;\n  const y0 = y - xSin - yCos;\n  const y1 = y - xSin + yCos;\n  const y2 = y + xSin + yCos;\n  const y3 = y + xSin - yCos;\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),\n    opt_extent);\n}\n\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent=} opt_extent Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n  const intersection = opt_extent ? opt_extent : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] &&\n      extent1[2] >= extent2[0] &&\n      extent1[1] <= extent2[3] &&\n      extent1[3] >= extent2[1];\n}\n\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n}\n\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (startRel === Relationship.INTERSECTING ||\n      endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) &&\n        !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - ((endY - maxY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.RIGHT) &&\n        !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - ((endX - maxX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & Relationship.BELOW) &&\n        !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - ((endY - minY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.LEFT) &&\n        !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - ((endX - minX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n\n  }\n  return intersects;\n}\n\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent) {\n  const coordinates = [\n    extent[0], extent[1],\n    extent[0], extent[3],\n    extent[2], extent[1],\n    extent[2], extent[3]\n  ];\n  transformFn(coordinates, coordinates, 2);\n  const xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  const ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _boundingExtentXYs(xs, ys, opt_extent);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}