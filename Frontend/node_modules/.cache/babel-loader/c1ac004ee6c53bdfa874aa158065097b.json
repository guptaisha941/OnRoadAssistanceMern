{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nimport _ol_proj_proj4_ from '../proj/proj4.js';\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link ol.proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link ol.ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link ol.proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use proj4js, aliases can be added using `proj4.defs()`; see\n * [documentation](https://github.com/proj4js/proj4js). To set an alternative\n * namespace for proj4, use {@link ol.proj.setProj4}.\n *\n * @constructor\n * @param {olx.ProjectionOptions} options Projection options.\n * @struct\n * @api\n */\nvar _ol_proj_Projection_ = function (options) {\n  /**\n   * @private\n   * @type {string}\n   */\n  this.code_ = options.code;\n\n  /**\n   * Units of projected coordinates. When set to `ol.proj.Units.TILE_PIXELS`, a\n   * `this.extent_` and `this.worldExtent_` must be configured properly for each\n   * tile.\n   * @private\n   * @type {ol.proj.Units}\n   */\n  this.units_ = /** @type {ol.proj.Units} */options.units;\n\n  /**\n   * Validity extent of the projection in projected coordinates. For projections\n   * with `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * tile pixel space.\n   * @private\n   * @type {ol.Extent}\n   */\n  this.extent_ = options.extent !== undefined ? options.extent : null;\n\n  /**\n   * Extent of the world in EPSG:4326. For projections with\n   * `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * projected coordinate space.\n   * @private\n   * @type {ol.Extent}\n   */\n  this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.global_ = options.global !== undefined ? options.global : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.canWrapX_ = !!(this.global_ && this.extent_);\n\n  /**\n   * @private\n   * @type {function(number, ol.Coordinate):number|undefined}\n   */\n  this.getPointResolutionFunc_ = options.getPointResolution;\n\n  /**\n   * @private\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.defaultTileGrid_ = null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.metersPerUnit_ = options.metersPerUnit;\n  var code = options.code;\n  if (_ol_.ENABLE_PROJ4JS) {\n    var proj4js = _ol_proj_proj4_.get();\n    if (typeof proj4js == 'function') {\n      var def = proj4js.defs(code);\n      if (def !== undefined) {\n        if (def.axis !== undefined && options.axisOrientation === undefined) {\n          this.axisOrientation_ = def.axis;\n        }\n        if (options.metersPerUnit === undefined) {\n          this.metersPerUnit_ = def.to_meter;\n        }\n        if (options.units === undefined) {\n          this.units_ = def.units;\n        }\n      }\n    }\n  }\n};\n\n/**\n * @return {boolean} The projection is suitable for wrapping the x-axis\n */\n_ol_proj_Projection_.prototype.canWrapX = function () {\n  return this.canWrapX_;\n};\n\n/**\n * Get the code for this projection, e.g. 'EPSG:4326'.\n * @return {string} Code.\n * @api\n */\n_ol_proj_Projection_.prototype.getCode = function () {\n  return this.code_;\n};\n\n/**\n * Get the validity extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.getExtent = function () {\n  return this.extent_;\n};\n\n/**\n * Get the units of this projection.\n * @return {ol.proj.Units} Units.\n * @api\n */\n_ol_proj_Projection_.prototype.getUnits = function () {\n  return this.units_;\n};\n\n/**\n * Get the amount of meters per unit of this projection.  If the projection is\n * not configured with `metersPerUnit` or a units identifier, the return is\n * `undefined`.\n * @return {number|undefined} Meters.\n * @api\n */\n_ol_proj_Projection_.prototype.getMetersPerUnit = function () {\n  return this.metersPerUnit_ || _ol_proj_Units_.METERS_PER_UNIT[this.units_];\n};\n\n/**\n * Get the world extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.getWorldExtent = function () {\n  return this.worldExtent_;\n};\n\n/**\n * Get the axis orientation of this projection.\n * Example values are:\n * enu - the default easting, northing, elevation.\n * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n *     or south orientated transverse mercator.\n * wnu - westing, northing, up - some planetary coordinate systems have\n *     \"west positive\" coordinate systems\n * @return {string} Axis orientation.\n * @api\n */\n_ol_proj_Projection_.prototype.getAxisOrientation = function () {\n  return this.axisOrientation_;\n};\n\n/**\n * Is this projection a global projection which spans the whole world?\n * @return {boolean} Whether the projection is global.\n * @api\n */\n_ol_proj_Projection_.prototype.isGlobal = function () {\n  return this.global_;\n};\n\n/**\n* Set if the projection is a global projection which spans the whole world\n* @param {boolean} global Whether the projection is global.\n* @api\n*/\n_ol_proj_Projection_.prototype.setGlobal = function (global) {\n  this.global_ = global;\n  this.canWrapX_ = !!(global && this.extent_);\n};\n\n/**\n * @return {ol.tilegrid.TileGrid} The default tile grid.\n */\n_ol_proj_Projection_.prototype.getDefaultTileGrid = function () {\n  return this.defaultTileGrid_;\n};\n\n/**\n * @param {ol.tilegrid.TileGrid} tileGrid The default tile grid.\n */\n_ol_proj_Projection_.prototype.setDefaultTileGrid = function (tileGrid) {\n  this.defaultTileGrid_ = tileGrid;\n};\n\n/**\n * Set the validity extent for this projection.\n * @param {ol.Extent} extent Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.setExtent = function (extent) {\n  this.extent_ = extent;\n  this.canWrapX_ = !!(this.global_ && extent);\n};\n\n/**\n * Set the world extent for this projection.\n * @param {ol.Extent} worldExtent World extent\n *     [minlon, minlat, maxlon, maxlat].\n * @api\n */\n_ol_proj_Projection_.prototype.setWorldExtent = function (worldExtent) {\n  this.worldExtent_ = worldExtent;\n};\n\n/**\n * Set the getPointResolution function (see {@link ol.proj#getPointResolution}\n * for this projection.\n * @param {function(number, ol.Coordinate):number} func Function\n * @api\n */\n_ol_proj_Projection_.prototype.setGetPointResolution = function (func) {\n  this.getPointResolutionFunc_ = func;\n};\n\n/**\n * Get the custom point resolution function for this projection (if set).\n * @return {function(number, ol.Coordinate):number|undefined} The custom point\n * resolution function (if set).\n */\n_ol_proj_Projection_.prototype.getPointResolutionFunc = function () {\n  return this.getPointResolutionFunc_;\n};\nexport default _ol_proj_Projection_;","map":{"version":3,"names":["_ol_","_ol_proj_Units_","_ol_proj_proj4_","_ol_proj_Projection_","options","code_","code","units_","units","extent_","extent","undefined","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","ENABLE_PROJ4JS","proj4js","get","def","defs","axis","to_meter","prototype","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","METERS_PER_UNIT","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/proj/projection.js"],"sourcesContent":["import _ol_ from '../index.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nimport _ol_proj_proj4_ from '../proj/proj4.js';\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link ol.proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link ol.ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link ol.proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use proj4js, aliases can be added using `proj4.defs()`; see\n * [documentation](https://github.com/proj4js/proj4js). To set an alternative\n * namespace for proj4, use {@link ol.proj.setProj4}.\n *\n * @constructor\n * @param {olx.ProjectionOptions} options Projection options.\n * @struct\n * @api\n */\nvar _ol_proj_Projection_ = function(options) {\n  /**\n   * @private\n   * @type {string}\n   */\n  this.code_ = options.code;\n\n  /**\n   * Units of projected coordinates. When set to `ol.proj.Units.TILE_PIXELS`, a\n   * `this.extent_` and `this.worldExtent_` must be configured properly for each\n   * tile.\n   * @private\n   * @type {ol.proj.Units}\n   */\n  this.units_ = /** @type {ol.proj.Units} */ (options.units);\n\n  /**\n   * Validity extent of the projection in projected coordinates. For projections\n   * with `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * tile pixel space.\n   * @private\n   * @type {ol.Extent}\n   */\n  this.extent_ = options.extent !== undefined ? options.extent : null;\n\n  /**\n   * Extent of the world in EPSG:4326. For projections with\n   * `ol.proj.Units.TILE_PIXELS` units, this is the extent of the tile in\n   * projected coordinate space.\n   * @private\n   * @type {ol.Extent}\n   */\n  this.worldExtent_ = options.worldExtent !== undefined ?\n    options.worldExtent : null;\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.axisOrientation_ = options.axisOrientation !== undefined ?\n    options.axisOrientation : 'enu';\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.global_ = options.global !== undefined ? options.global : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.canWrapX_ = !!(this.global_ && this.extent_);\n\n  /**\n   * @private\n   * @type {function(number, ol.Coordinate):number|undefined}\n   */\n  this.getPointResolutionFunc_ = options.getPointResolution;\n\n  /**\n   * @private\n   * @type {ol.tilegrid.TileGrid}\n   */\n  this.defaultTileGrid_ = null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.metersPerUnit_ = options.metersPerUnit;\n\n  var code = options.code;\n  if (_ol_.ENABLE_PROJ4JS) {\n    var proj4js = _ol_proj_proj4_.get();\n    if (typeof proj4js == 'function') {\n      var def = proj4js.defs(code);\n      if (def !== undefined) {\n        if (def.axis !== undefined && options.axisOrientation === undefined) {\n          this.axisOrientation_ = def.axis;\n        }\n        if (options.metersPerUnit === undefined) {\n          this.metersPerUnit_ = def.to_meter;\n        }\n        if (options.units === undefined) {\n          this.units_ = def.units;\n        }\n      }\n    }\n  }\n};\n\n\n/**\n * @return {boolean} The projection is suitable for wrapping the x-axis\n */\n_ol_proj_Projection_.prototype.canWrapX = function() {\n  return this.canWrapX_;\n};\n\n\n/**\n * Get the code for this projection, e.g. 'EPSG:4326'.\n * @return {string} Code.\n * @api\n */\n_ol_proj_Projection_.prototype.getCode = function() {\n  return this.code_;\n};\n\n\n/**\n * Get the validity extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.getExtent = function() {\n  return this.extent_;\n};\n\n\n/**\n * Get the units of this projection.\n * @return {ol.proj.Units} Units.\n * @api\n */\n_ol_proj_Projection_.prototype.getUnits = function() {\n  return this.units_;\n};\n\n\n/**\n * Get the amount of meters per unit of this projection.  If the projection is\n * not configured with `metersPerUnit` or a units identifier, the return is\n * `undefined`.\n * @return {number|undefined} Meters.\n * @api\n */\n_ol_proj_Projection_.prototype.getMetersPerUnit = function() {\n  return this.metersPerUnit_ || _ol_proj_Units_.METERS_PER_UNIT[this.units_];\n};\n\n\n/**\n * Get the world extent for this projection.\n * @return {ol.Extent} Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.getWorldExtent = function() {\n  return this.worldExtent_;\n};\n\n\n/**\n * Get the axis orientation of this projection.\n * Example values are:\n * enu - the default easting, northing, elevation.\n * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n *     or south orientated transverse mercator.\n * wnu - westing, northing, up - some planetary coordinate systems have\n *     \"west positive\" coordinate systems\n * @return {string} Axis orientation.\n * @api\n */\n_ol_proj_Projection_.prototype.getAxisOrientation = function() {\n  return this.axisOrientation_;\n};\n\n\n/**\n * Is this projection a global projection which spans the whole world?\n * @return {boolean} Whether the projection is global.\n * @api\n */\n_ol_proj_Projection_.prototype.isGlobal = function() {\n  return this.global_;\n};\n\n\n/**\n* Set if the projection is a global projection which spans the whole world\n* @param {boolean} global Whether the projection is global.\n* @api\n*/\n_ol_proj_Projection_.prototype.setGlobal = function(global) {\n  this.global_ = global;\n  this.canWrapX_ = !!(global && this.extent_);\n};\n\n\n/**\n * @return {ol.tilegrid.TileGrid} The default tile grid.\n */\n_ol_proj_Projection_.prototype.getDefaultTileGrid = function() {\n  return this.defaultTileGrid_;\n};\n\n\n/**\n * @param {ol.tilegrid.TileGrid} tileGrid The default tile grid.\n */\n_ol_proj_Projection_.prototype.setDefaultTileGrid = function(tileGrid) {\n  this.defaultTileGrid_ = tileGrid;\n};\n\n\n/**\n * Set the validity extent for this projection.\n * @param {ol.Extent} extent Extent.\n * @api\n */\n_ol_proj_Projection_.prototype.setExtent = function(extent) {\n  this.extent_ = extent;\n  this.canWrapX_ = !!(this.global_ && extent);\n};\n\n\n/**\n * Set the world extent for this projection.\n * @param {ol.Extent} worldExtent World extent\n *     [minlon, minlat, maxlon, maxlat].\n * @api\n */\n_ol_proj_Projection_.prototype.setWorldExtent = function(worldExtent) {\n  this.worldExtent_ = worldExtent;\n};\n\n\n/**\n * Set the getPointResolution function (see {@link ol.proj#getPointResolution}\n * for this projection.\n * @param {function(number, ol.Coordinate):number} func Function\n * @api\n */\n_ol_proj_Projection_.prototype.setGetPointResolution = function(func) {\n  this.getPointResolutionFunc_ = func;\n};\n\n\n/**\n * Get the custom point resolution function for this projection (if set).\n * @return {function(number, ol.Coordinate):number|undefined} The custom point\n * resolution function (if set).\n */\n_ol_proj_Projection_.prototype.getPointResolutionFunc = function() {\n  return this.getPointResolutionFunc_;\n};\nexport default _ol_proj_Projection_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}