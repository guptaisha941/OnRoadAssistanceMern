{"ast":null,"code":"/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  var decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\nexport function compareVersions(v1, v2) {\n  var s1 = ('' + v1).split('.');\n  var s2 = ('' + v2).split('.');\n  for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n    var n1 = parseInt(s1[i] || '0', 10);\n    var n2 = parseInt(s2[i] || '0', 10);\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n  return 0;\n}","map":{"version":3,"names":["padNumber","number","width","opt_precision","numberString","undefined","toFixed","decimal","indexOf","length","Array","join","compareVersions","v1","v2","s1","split","s2","i","Math","max","n1","parseInt","n2"],"sources":["../../src/ol/string.js"],"sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  const numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAASA,SAASA,CAACC,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAE;EACtD,IAAMC,YAAY,GAAGD,aAAa,KAAKE,SAAS,GAAGJ,MAAM,CAACK,OAAO,CAACH,aAAa,CAAC,GAAG,EAAE,GAAGF,MAAM;EAC9F,IAAIM,OAAO,GAAGH,YAAY,CAACI,OAAO,CAAC,GAAG,CAAC;EACvCD,OAAO,GAAGA,OAAO,KAAK,CAAC,CAAC,GAAGH,YAAY,CAACK,MAAM,GAAGF,OAAO;EACxD,OAAOA,OAAO,GAAGL,KAAK,GAAGE,YAAY,GAAG,IAAIM,KAAK,CAAC,CAAC,GAAGR,KAAK,GAAGK,OAAO,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC,GAAGP,YAAY;;;;;;;;;AAUjG,OAAO,SAASQ,eAAeA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACtC,IAAMC,EAAE,GAAG,CAAC,EAAE,GAAGF,EAAE,EAAEG,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAMC,EAAE,GAAG,CAAC,EAAE,GAAGH,EAAE,EAAEE,KAAK,CAAC,GAAG,CAAC;EAE/B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACL,EAAE,CAACN,MAAM,EAAEQ,EAAE,CAACR,MAAM,CAAC,EAAES,CAAC,EAAE,EAAE;IACvD,IAAMG,EAAE,GAAGC,QAAQ,CAACP,EAAE,CAACG,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;IACrC,IAAMK,EAAE,GAAGD,QAAQ,CAACL,EAAE,CAACC,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;IAErC,IAAIG,EAAE,GAAGE,EAAE,EAAE;MACX,OAAO,CAAC;;IAEV,IAAIA,EAAE,GAAGF,EAAE,EAAE;MACX,OAAO,CAAC,CAAC;;;EAIb,OAAO,CAAC"},"metadata":{},"sourceType":"module"}