{"ast":null,"code":"/**\n * @module ol/geom/Point\n */\nimport { createOrUpdateFromCoordinate, containsXY } from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nvar Point = /*@__PURE__*/function (SimpleGeometry) {\n  function Point(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    this.setCoordinates(coordinates, opt_layout);\n  }\n  if (SimpleGeometry) Point.__proto__ = SimpleGeometry;\n  Point.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  Point.prototype.constructor = Point;\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @override\n   * @api\n   */\n  Point.prototype.clone = function clone() {\n    var point = new Point(this.flatCoordinates.slice(), this.layout);\n    return point;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Point.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n    if (squaredDistance < minSquaredDistance) {\n      var stride = this.stride;\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @override\n   * @api\n   */\n  Point.prototype.getCoordinates = function getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Point.prototype.computeExtent = function computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.getType = function getType() {\n    return GeometryType.POINT;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return Point;\n}(SimpleGeometry);\nexport default Point;","map":{"version":3,"names":["createOrUpdateFromCoordinate","containsXY","GeometryType","SimpleGeometry","deflateCoordinate","squaredDistance","squaredDx","Point","coordinates","opt_layout","call","setCoordinates","clone","point","flatCoordinates","slice","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","stride","i","length","getCoordinates","computeExtent","extent","getType","POINT","intersectsExtent","setLayout","changed"],"sources":["../../../src/ol/geom/Point.js"],"sourcesContent":["/**\n * @module ol/geom/Point\n */\nimport {createOrUpdateFromCoordinate, containsXY} from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    this.setCoordinates(coordinates, opt_layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    return point;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.POINT;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default Point;\n"],"mappings":"AAAA;;;AAGA,SAAQA,4BAA4B,EAAEC,UAAU,QAAO,cAAc;AACrE,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,cAAc,MAAM,qBAAqB;AAChD,SAAQC,iBAAiB,QAAO,mBAAmB;AACnD,SAAQC,eAAe,IAAIC,SAAS,QAAO,YAAY;;;;;;;;AAQvD,IAAMC,KAAK,GAAuB,uBAAAJ,cAAA;EAMhC,SAAAI,KAAWA,CAACC,WAAW,EAAEC,UAAU,EAAE;IACnCN,cAAA,CAAAO,IAAK,KAAC,CAAC;IACP,IAAI,CAACC,cAAc,CAACH,WAAW,EAAEC,UAAU,CAAC;;;;;;;;;;;;kBAS9CG,KAAA,YAAAA,MAAA,EAAQ;IACN,IAAMC,KAAK,GAAG,IAAIN,KAAK,CAAC,IAAI,CAACO,eAAe,CAACC,KAAK,EAAE,EAAE,IAAI,CAACC,MAAM,CAAC;IAClE,OAAOH,KAAK;;;;;;kBAMdI,cAAA,YAAAA,eAAeC,CAAC,EAAEC,CAAC,EAAEC,YAAY,EAAEC,kBAAkB,EAAE;IACrD,IAAMP,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,IAAMT,eAAe,GAAGC,SAAS,CAACY,CAAC,EAAEC,CAAC,EAAEL,eAAe,CAAC,CAAC,CAAC,EAAEA,eAAe,CAAC,CAAC,CAAC,CAAC;IAC/E,IAAIT,eAAe,GAAGgB,kBAAkB,EAAE;MACxC,IAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAE,EAAEC,CAAC,EAAE;QAC/BH,YAAY,CAACG,CAAC,CAAC,GAAGT,eAAe,CAACS,CAAC,CAAC;;MAEtCH,YAAY,CAACI,MAAM,GAAGF,MAAM;MAC5B,OAAOjB,eAAe;KACvB,MAAM;MACL,OAAOgB,kBAAkB;;;;;;;;;;kBAU7BI,cAAA,YAAAA,eAAA,EAAiB;IACf,OAAO,CAAC,IAAI,CAACX,eAAe,GAAG,EAAE,GAAG,IAAI,CAACA,eAAe,CAACC,KAAK,EAAE;;;;;;kBAMlEW,aAAA,YAAAA,cAAcC,MAAM,EAAE;IACpB,OAAO3B,4BAA4B,CAAC,IAAI,CAACc,eAAe,EAAEa,MAAM,CAAC;;;;;;;kBAOnEC,OAAA,YAAAA,QAAA,EAAU;IACR,OAAO1B,YAAY,CAAC2B,KAAK;;;;;;;kBAO3BC,gBAAA,YAAAA,iBAAiBH,MAAM,EAAE;IACvB,OAAO1B,UAAU,CAAC0B,MAAM,EAAE,IAAI,CAACb,eAAe,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,eAAe,CAAC,CAAC,CAAC,CAAC;;;;;;;kBAO7EH,cAAA,YAAAA,eAAeH,WAAW,EAAEC,UAAU,EAAE;IACtC,IAAI,CAACsB,SAAS,CAACtB,UAAU,EAAED,WAAW,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,CAACM,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAG,EAAE;;IAE3B,IAAI,CAACA,eAAe,CAACU,MAAM,GAAGpB,iBAAiB,CAC7C,IAAI,CAACU,eAAe,EAAE,CAAC,EAAEN,WAAW,EAAE,IAAI,CAACc,MAAM,CAAC;IACpD,IAAI,CAACU,OAAO,EAAE;GACf;;EArFiB7B,cAAA;AAyFpB,eAAeI,KAAK"},"metadata":{},"sourceType":"module"}