{"ast":null,"code":"/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport { fromKey, getKey } from './tilecoord.js';\nvar TileCache = /*@__PURE__*/function (LRUCache) {\n  function TileCache(opt_highWaterMark) {\n    LRUCache.call(this, opt_highWaterMark);\n  }\n  if (LRUCache) TileCache.__proto__ = LRUCache;\n  TileCache.prototype = Object.create(LRUCache && LRUCache.prototype);\n  TileCache.prototype.constructor = TileCache;\n\n  /**\n   * @param {!Object<string, import(\"./TileRange.js\").default>} usedTiles Used tiles.\n   */\n  TileCache.prototype.expireCache = function expireCache(usedTiles) {\n    while (this.canExpireCache()) {\n      var tile = this.peekLast();\n      var zKey = tile.tileCoord[0].toString();\n      if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {\n        break;\n      } else {\n        this.pop().dispose();\n      }\n    }\n  };\n\n  /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */\n  TileCache.prototype.pruneExceptNewestZ = function pruneExceptNewestZ() {\n    if (this.getCount() === 0) {\n      return;\n    }\n    var key = this.peekFirstKey();\n    var tileCoord = fromKey(key);\n    var z = tileCoord[0];\n    this.forEach(function (tile) {\n      if (tile.tileCoord[0] !== z) {\n        this.remove(getKey(tile.tileCoord));\n        tile.dispose();\n      }\n    }, this);\n  };\n  return TileCache;\n}(LRUCache);\nexport default TileCache;","map":{"version":3,"names":["LRUCache","fromKey","getKey","TileCache","opt_highWaterMark","call","expireCache","usedTiles","canExpireCache","tile","peekLast","zKey","tileCoord","toString","contains","pop","dispose","pruneExceptNewestZ","getCount","key","peekFirstKey","z","forEach","remove"],"sources":["../../src/ol/TileCache.js"],"sourcesContent":["/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport {fromKey, getKey} from './tilecoord.js';\n\nclass TileCache extends LRUCache {\n\n  /**\n   * @param {number=} opt_highWaterMark High water mark.\n   */\n  constructor(opt_highWaterMark) {\n\n    super(opt_highWaterMark);\n\n  }\n\n  /**\n   * @param {!Object<string, import(\"./TileRange.js\").default>} usedTiles Used tiles.\n   */\n  expireCache(usedTiles) {\n    while (this.canExpireCache()) {\n      const tile = this.peekLast();\n      const zKey = tile.tileCoord[0].toString();\n      if (zKey in usedTiles && usedTiles[zKey].contains(tile.tileCoord)) {\n        break;\n      } else {\n        this.pop().dispose();\n      }\n    }\n  }\n\n  /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */\n  pruneExceptNewestZ() {\n    if (this.getCount() === 0) {\n      return;\n    }\n    const key = this.peekFirstKey();\n    const tileCoord = fromKey(key);\n    const z = tileCoord[0];\n    this.forEach(function(tile) {\n      if (tile.tileCoord[0] !== z) {\n        this.remove(getKey(tile.tileCoord));\n        tile.dispose();\n      }\n    }, this);\n  }\n}\n\n\nexport default TileCache;\n"],"mappings":"AAAA;;;AAGA,OAAOA,QAAQ,MAAM,uBAAuB;AAC5C,SAAQC,OAAO,EAAEC,MAAM,QAAO,gBAAgB;AAE9C,IAAMC,SAAS,GAAiB,uBAAAH,QAAA;EAK9B,SAAAG,SAAWA,CAACC,iBAAiB,EAAE;IAE7BJ,QAAA,CAAAK,IAAK,OAACD,iBAAiB,CAAC;;;;;;;;;sBAO1BE,WAAA,YAAAA,YAAYC,SAAS,EAAE;IACrB,OAAO,IAAI,CAACC,cAAc,EAAE,EAAE;MAC5B,IAAMC,IAAI,GAAG,IAAI,CAACC,QAAQ,EAAE;MAC5B,IAAMC,IAAI,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,QAAQ,EAAE;MACzC,IAAIF,IAAI,IAAIJ,SAAS,IAAIA,SAAS,CAACI,IAAI,CAAC,CAACG,QAAQ,CAACL,IAAI,CAACG,SAAS,CAAC,EAAE;QACjE;OACD,MAAM;QACL,IAAI,CAACG,GAAG,EAAE,CAACC,OAAO,EAAE;;;;;;;;sBAQ1BC,kBAAA,YAAAA,mBAAA,EAAqB;IACnB,IAAI,IAAI,CAACC,QAAQ,EAAE,KAAK,CAAC,EAAE;MACzB;;IAEF,IAAMC,GAAG,GAAG,IAAI,CAACC,YAAY,EAAE;IAC/B,IAAMR,SAAS,GAAGX,OAAO,CAACkB,GAAG,CAAC;IAC9B,IAAME,CAAC,GAAGT,SAAS,CAAC,CAAC,CAAC;IACtB,IAAI,CAACU,OAAO,CAAC,UAASb,IAAI,EAAE;MAC1B,IAAIA,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,KAAKS,CAAC,EAAE;QAC3B,IAAI,CAACE,MAAM,CAACrB,MAAM,CAACO,IAAI,CAACG,SAAS,CAAC,CAAC;QACnCH,IAAI,CAACO,OAAO,EAAE;;KAEjB,EAAE,IAAI,CAAC;GACT;;EA1CqBhB,QAAA;AA8CxB,eAAeG,SAAS"},"metadata":{},"sourceType":"module"}