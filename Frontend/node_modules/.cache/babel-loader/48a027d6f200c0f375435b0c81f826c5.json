{"ast":null,"code":"/**\n * @module ol/geom/Polygon\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { offset as sphereOffset } from '../sphere.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { assignClosestArrayPoint, arrayMaxSquaredDelta } from './flat/closest.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingIsOriented, orientLinearRings } from './flat/orient.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { modulo } from '../math.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nvar Polygon = /*@__PURE__*/function (SimpleGeometry) {\n  function Polygon(coordinates, opt_layout, opt_ends) {\n    SimpleGeometry.call(this);\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n    if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n      this.ends_ = opt_ends;\n    } else {\n      this.setCoordinates( /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */coordinates, opt_layout);\n    }\n  }\n  if (SimpleGeometry) Polygon.__proto__ = SimpleGeometry;\n  Polygon.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  Polygon.prototype.constructor = Polygon;\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  Polygon.prototype.appendLinearRing = function appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @override\n   * @api\n   */\n  Polygon.prototype.clone = function clone() {\n    return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Polygon.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Polygon.prototype.containsXY = function containsXY(x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  };\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  Polygon.prototype.getArea = function getArea() {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  };\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  Polygon.prototype.getCoordinates = function getCoordinates(opt_right) {\n    var flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  };\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  Polygon.prototype.getEnds = function getEnds() {\n    return this.ends_;\n  };\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  Polygon.prototype.getFlatInteriorPoint = function getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  };\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  Polygon.prototype.getInteriorPoint = function getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  };\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  Polygon.prototype.getLinearRingCount = function getLinearRingCount() {\n    return this.ends_.length;\n  };\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n  Polygon.prototype.getLinearRing = function getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  Polygon.prototype.getLinearRings = function getLinearRings() {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var linearRings = [];\n    var offset = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  };\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  Polygon.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n      if (linearRingIsOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Polygon.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Polygon.prototype.getType = function getType() {\n    return GeometryType.POLYGON;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Polygon.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  };\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  Polygon.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n  return Polygon;\n}(SimpleGeometry);\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  var n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n  var flatCoordinates = [];\n  for (var i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  var sides = opt_sides ? opt_sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var center = circle.getCenter();\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n  for (var i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (var j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  var ends = [flatCoordinates.length];\n  var polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var stride = polygon.getStride();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = opt_angle ? opt_angle : 0;\n  for (var i = 0; i <= sides; ++i) {\n    var offset = i * stride;\n    var angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}","map":{"version":3,"names":["extend","closestSquaredDistanceXY","getCenter","GeometryLayout","GeometryType","LinearRing","Point","SimpleGeometry","offset","sphereOffset","linearRings","linearRingsArea","assignClosestArrayPoint","arrayMaxSquaredDelta","linearRingsContainsXY","deflateCoordinatesArray","inflateCoordinatesArray","getInteriorPointOfArray","intersectsLinearRingArray","linearRingIsOriented","orientLinearRings","quantizeArray","modulo","Polygon","coordinates","opt_layout","opt_ends","call","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","appendLinearRing","linearRing","flatCoordinates","getFlatCoordinates","slice","push","length","changed","clone","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","containsXY","getOrientedFlatCoordinates","getArea","getCoordinates","opt_right","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","XYM","getLinearRingCount","getLinearRing","index","getLinearRings","ends","i","ii","end","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","getType","POLYGON","intersectsExtent","extent","setLayout","circular","center","radius","opt_n","opt_sphereRadius","n","PI","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","opt_sides","opt_angle","sides","getStride","getLayout","arrayLength","Array","j","polygon","makeRegular","getRadius","startAngle","angle","cos","sin"],"sources":["../../../src/ol/geom/Polygon.js"],"sourcesContent":["/**\n * @module ol/geom/Polygon\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {offset as sphereOffset} from '../sphere.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from './flat/closest.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingIsOriented, orientLinearRings} from './flat/orient.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {modulo} from '../math.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n      this.ends_ = opt_ends;\n    } else {\n      this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n    }\n\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates(opt_right) {\n    let flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(\n        flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(\n      flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,\n        flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(this.flatCoordinates.slice(\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingIsOriented(\n        flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length =\n            orientLinearRings(\n              this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.POLYGON;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\n\nexport default Polygon;\n\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  const n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates =\n      [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  const sides = opt_sides ? opt_sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = opt_angle ? opt_angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);\n    flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));\n    flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));\n  }\n  polygon.changed();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}