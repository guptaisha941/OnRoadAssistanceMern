{"ast":null,"code":"/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=))} Loader\n */\n\nvar ImageCanvas = /*@__PURE__*/function (ImageBase) {\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n    var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    ImageBase.call(this, extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {Error}\n     */\n    this.error_ = null;\n  }\n  if (ImageBase) ImageCanvas.__proto__ = ImageBase;\n  ImageCanvas.prototype = Object.create(ImageBase && ImageBase.prototype);\n  ImageCanvas.prototype.constructor = ImageCanvas;\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {Error} Any error that occurred during rendering.\n   */\n  ImageCanvas.prototype.getError = function getError() {\n    return this.error_;\n  };\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error=} err Any error during drawing.\n   * @private\n   */\n  ImageCanvas.prototype.handleLoad_ = function handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ImageCanvas.prototype.load = function load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  ImageCanvas.prototype.getImage = function getImage() {\n    return this.canvas_;\n  };\n  return ImageCanvas;\n}(ImageBase);\nexport default ImageCanvas;","map":{"version":3,"names":["ImageBase","ImageState","ImageCanvas","extent","resolution","pixelRatio","canvas","opt_loader","state","undefined","IDLE","LOADED","call","loader_","canvas_","error_","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage"],"sources":["../../src/ol/ImageCanvas.js"],"sourcesContent":["/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=))} Loader\n */\n\n\nclass ImageCanvas extends ImageBase {\n\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader=} opt_loader Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, opt_loader) {\n\n    const state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {Error}\n     */\n    this.error_ = null;\n\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error=} err Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\n\nexport default ImageCanvas;\n"],"mappings":"AAAA;;;AAGA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAOC,UAAU,MAAM,iBAAiB;;;;;;;;;;;AAaxC,IAAMC,WAAW,GAAkB,uBAAAF,SAAA;EAUjC,SAAAE,WAAWA,CAACC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,UAAU,EAAE;IAE9D,IAAMC,KAAK,GAAGD,UAAU,KAAKE,SAAS,GAAGR,UAAU,CAACS,IAAI,GAAGT,UAAU,CAACU,MAAM;IAE5EX,SAAA,CAAAY,IAAK,OAACT,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEG,KAAK,CAAC;;;;;;;IAO5C,IAAI,CAACK,OAAO,GAAGN,UAAU,KAAKE,SAAS,GAAGF,UAAU,GAAG,IAAI;;;;;;IAM3D,IAAI,CAACO,OAAO,GAAGR,MAAM;;;;;;IAMrB,IAAI,CAACS,MAAM,GAAG,IAAI;;;;;;;;;;wBAQpBC,QAAA,YAAAA,SAAA,EAAW;IACT,OAAO,IAAI,CAACD,MAAM;;;;;;;;wBAQpBE,WAAA,YAAAA,YAAYC,GAAG,EAAE;IACf,IAAIA,GAAG,EAAE;MACP,IAAI,CAACH,MAAM,GAAGG,GAAG;MACjB,IAAI,CAACV,KAAK,GAAGP,UAAU,CAACkB,KAAK;KAC9B,MAAM;MACL,IAAI,CAACX,KAAK,GAAGP,UAAU,CAACU,MAAM;;IAEhC,IAAI,CAACS,OAAO,EAAE;;;;;;wBAMhBC,IAAA,YAAAA,KAAA,EAAO;IACL,IAAI,IAAI,CAACb,KAAK,IAAIP,UAAU,CAACS,IAAI,EAAE;MACjC,IAAI,CAACF,KAAK,GAAGP,UAAU,CAACqB,OAAO;MAC/B,IAAI,CAACF,OAAO,EAAE;MACd,IAAI,CAACP,OAAO,CAAC,IAAI,CAACI,WAAW,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;;;wBAO7CC,QAAA,YAAAA,SAAA,EAAW;IACT,OAAO,IAAI,CAACV,OAAO;GACpB;;EA5EuBd,SAAA;AAgF1B,eAAeE,WAAW"},"metadata":{},"sourceType":"module"}