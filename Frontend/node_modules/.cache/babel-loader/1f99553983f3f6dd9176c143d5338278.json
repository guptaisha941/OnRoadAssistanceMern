{"ast":null,"code":"/**\n * @module ol/coordinate\n */\nimport { modulo } from './math.js';\nimport { padNumber } from './string.js';\n\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += delta[0];\n  coordinate[1] += delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  var r = circle.getRadius();\n  var center = circle.getCenter();\n  var x0 = center[0];\n  var y0 = center[1];\n  var x1 = coordinate[0];\n  var y1 = coordinate[1];\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  var d = Math.sqrt(dx * dx + dy * dy);\n  var x = x0 + r * dx / d;\n  var y = y0 + r * dy / d;\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  var x0 = coordinate[0];\n  var y0 = coordinate[1];\n  var start = segment[0];\n  var end = segment[1];\n  var x1 = start[0];\n  var y1 = start[1];\n  var x2 = end[0];\n  var y2 = end[1];\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  var x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(opt_fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n  var normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  var x = Math.abs(3600 * normalizedDegrees);\n  var dflPrecision = opt_fractionDigits || 0;\n  var precision = Math.pow(10, dflPrecision);\n  var deg = Math.floor(x / 3600);\n  var min = Math.floor((x - deg * 3600) / 60);\n  var sec = x - deg * 3600 - min * 60;\n  sec = Math.ceil(sec * precision) / precision;\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n  return deg + '\\u00b0 ' + padNumber(min, 2) + '\\u2032 ' + padNumber(sec, 2, dflPrecision) + '\\u2033' + (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template.replace('{x}', coordinate[0].toFixed(opt_fractionDigits)).replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  var equals = true;\n  for (var i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  var cosAngle = Math.cos(angle);\n  var sinAngle = Math.sin(angle);\n  var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  var dx = coord1[0] - coord2[0];\n  var dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' + degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, opt_fractionDigits) {\n  return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}","map":{"version":3,"names":["modulo","padNumber","add","coordinate","delta","closestOnCircle","circle","r","getRadius","center","getCenter","x0","y0","x1","y1","dx","dy","d","Math","sqrt","x","y","closestOnSegment","segment","start","end","x2","y2","along","createStringXY","opt_fractionDigits","toStringXY","degreesToStringHDMS","hemispheres","degrees","normalizedDegrees","abs","dflPrecision","precision","pow","deg","floor","min","sec","ceil","charAt","format","template","replace","toFixed","equals","coordinate1","coordinate2","i","length","rotate","angle","cosAngle","cos","sinAngle","sin","scale","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","toStringHDMS"],"sources":["../../src/ol/coordinate.js"],"sourcesContent":["/**\n * @module ol/coordinate\n */\nimport {modulo} from './math.js';\nimport {padNumber} from './string.js';\n\n\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += delta[0];\n  coordinate[1] += delta[1];\n  return coordinate;\n}\n\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + r * dx / d;\n  const y = y0 + r * dy / d;\n\n  return [x, y];\n}\n\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along = (dx === 0 && dy === 0) ? 0 :\n    ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(opt_fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function(coordinate) {\n      return toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n}\n\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const dflPrecision = opt_fractionDigits || 0;\n  const precision = Math.pow(10, dflPrecision);\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = x - (deg * 3600) - (min * 60);\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return deg + '\\u00b0 ' + padNumber(min, 2) + '\\u2032 ' +\n    padNumber(sec, 2, dflPrecision) + '\\u2033' +\n    (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n}\n\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n}\n\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate,\n    closestOnSegment(coordinate, segment));\n}\n\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' +\n        degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n}\n\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, opt_fractionDigits) {\n  return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}