{"ast":null,"code":"/**\n * @module ol/geom/MultiLineString\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestArrayPoint, arrayMaxSquaredDelta } from './flat/closest.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineStringArray } from './flat/intersectsextent.js';\nimport { douglasPeuckerArray } from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nvar MultiLineString = /*@__PURE__*/function (SimpleGeometry) {\n  function MultiLineString(coordinates, opt_layout, opt_ends) {\n    SimpleGeometry.call(this);\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates( /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */coordinates, opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n      this.ends_ = opt_ends;\n    } else {\n      var layout = this.getLayout();\n      var lineStrings = /** @type {Array<LineString>} */coordinates;\n      var flatCoordinates = [];\n      var ends = [];\n      for (var i = 0, ii = lineStrings.length; i < ii; ++i) {\n        var lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n  if (SimpleGeometry) MultiLineString.__proto__ = SimpleGeometry;\n  MultiLineString.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  MultiLineString.prototype.constructor = MultiLineString;\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  MultiLineString.prototype.appendLineString = function appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @override\n   * @api\n   */\n  MultiLineString.prototype.clone = function clone() {\n    return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiLineString.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  MultiLineString.prototype.getCoordinateAtM = function getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM || this.flatCoordinates.length === 0) {\n      return null;\n    }\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n  };\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  MultiLineString.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n  };\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  MultiLineString.prototype.getEnds = function getEnds() {\n    return this.ends_;\n  };\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  MultiLineString.prototype.getLineString = function getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  MultiLineString.prototype.getLineStrings = function getLineStrings() {\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var layout = this.layout;\n    /** @type {Array<LineString>} */\n    var lineStrings = [];\n    var offset = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  };\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  MultiLineString.prototype.getFlatMidpoints = function getFlatMidpoints() {\n    var midpoints = [];\n    var flatCoordinates = this.flatCoordinates;\n    var offset = 0;\n    var ends = this.ends_;\n    var stride = this.stride;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiLineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiLineString.prototype.getType = function getType() {\n    return GeometryType.MULTI_LINE_STRING;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiLineString.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  };\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  MultiLineString.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n  return MultiLineString;\n}(SimpleGeometry);\nexport default MultiLineString;","map":{"version":3,"names":["extend","closestSquaredDistanceXY","GeometryLayout","GeometryType","LineString","SimpleGeometry","assignClosestArrayPoint","arrayMaxSquaredDelta","deflateCoordinatesArray","inflateCoordinatesArray","interpolatePoint","lineStringsCoordinateAtM","intersectsLineStringArray","douglasPeuckerArray","MultiLineString","coordinates","opt_layout","opt_ends","call","ends_","maxDelta_","maxDeltaRevision_","Array","isArray","setCoordinates","undefined","setFlatCoordinates","layout","getLayout","lineStrings","flatCoordinates","ends","i","ii","length","lineString","getFlatCoordinates","push","appendLineString","slice","changed","clone","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getCoordinateAtM","m","opt_extrapolate","opt_interpolate","XYM","XYZM","extrapolate","interpolate","getCoordinates","getEnds","getLineString","index","getLineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","getType","MULTI_LINE_STRING","intersectsExtent","extent","setLayout"],"sources":["../../../src/ol/geom/MultiLineString.js"],"sourcesContent":["/**\n * @module ol/geom/MultiLineString\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from './flat/closest.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {interpolatePoint, lineStringsCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n      this.ends_ = opt_ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\n    if ((this.layout != GeometryLayout.XYM &&\n         this.layout != GeometryLayout.XYZM) ||\n        this.flatCoordinates.length === 0) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0,\n      this.ends_, this.stride, m, extrapolate, interpolate);\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(this.flatCoordinates.slice(\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_LINE_STRING;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\n\nexport default MultiLineString;\n"],"mappings":"AAAA;;;AAGA,SAAQA,MAAM,QAAO,aAAa;AAClC,SAAQC,wBAAwB,QAAO,cAAc;AACrD,OAAOC,cAAc,MAAM,qBAAqB;AAChD,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,cAAc,MAAM,qBAAqB;AAChD,SAAQC,uBAAuB,EAAEC,oBAAoB,QAAO,mBAAmB;AAC/E,SAAQC,uBAAuB,QAAO,mBAAmB;AACzD,SAAQC,uBAAuB,QAAO,mBAAmB;AACzD,SAAQC,gBAAgB,EAAEC,wBAAwB,QAAO,uBAAuB;AAChF,SAAQC,yBAAyB,QAAO,4BAA4B;AACpE,SAAQC,mBAAmB,QAAO,oBAAoB;;;;;;;;AAQtD,IAAMC,eAAe,GAAuB,uBAAAT,cAAA;EAS1C,SAAAS,eAAWA,CAACC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,EAAE;IAE7CZ,cAAA,CAAAa,IAAK,KAAC,CAAC;;;;;;IAMP,IAAI,CAACC,KAAK,GAAG,EAAE;;;;;;IAMf,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;;;;;;IAMnB,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;IAE3B,IAAIC,KAAK,CAACC,OAAO,CAACR,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;MACjC,IAAI,CAACS,cAAc,oEAAqET,WAAW,EAAGC,UAAU,CAAC;KAClH,MAAM,IAAIA,UAAU,KAAKS,SAAS,IAAIR,QAAQ,EAAE;MAC/C,IAAI,CAACS,kBAAkB,CAACV,UAAU,8BAAgCD,WAAW,CAAE;MAC/E,IAAI,CAACI,KAAK,GAAGF,QAAQ;KACtB,MAAM;MACL,IAAIU,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE;MAC7B,IAAMC,WAAW,mCAAqCd,WAAY;MAClE,IAAMe,eAAe,GAAG,EAAE;MAC1B,IAAMC,IAAI,GAAG,EAAE;MACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGJ,WAAW,CAACK,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACpD,IAAMG,UAAU,GAAGN,WAAW,CAACG,CAAC,CAAC;QACjC,IAAIA,CAAC,KAAK,CAAC,EAAE;UACXL,MAAM,GAAGQ,UAAU,CAACP,SAAS,EAAE;;QAEjC5B,MAAM,CAAC8B,eAAe,EAAEK,UAAU,CAACC,kBAAkB,EAAE,CAAC;QACxDL,IAAI,CAACM,IAAI,CAACP,eAAe,CAACI,MAAM,CAAC;;MAEnC,IAAI,CAACR,kBAAkB,CAACC,MAAM,EAAEG,eAAe,CAAC;MAChD,IAAI,CAACX,KAAK,GAAGY,IAAI;;;;;;;;;;;;4BAUrBO,gBAAA,YAAAA,iBAAiBH,UAAU,EAAE;IAC3B,IAAI,CAAC,IAAI,CAACL,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAGK,UAAU,CAACC,kBAAkB,EAAE,CAACG,KAAK,EAAE;KAC/D,MAAM;MACLvC,MAAM,CAAC,IAAI,CAAC8B,eAAe,EAAEK,UAAU,CAACC,kBAAkB,EAAE,CAACG,KAAK,EAAE,CAAC;;IAEvE,IAAI,CAACpB,KAAK,CAACkB,IAAI,CAAC,IAAI,CAACP,eAAe,CAACI,MAAM,CAAC;IAC5C,IAAI,CAACM,OAAO,EAAE;;;;;;;;;4BAShBC,KAAA,YAAAA,MAAA,EAAQ;IACN,OAAO,IAAI3B,eAAe,CAAC,IAAI,CAACgB,eAAe,CAACS,KAAK,EAAE,EAAE,IAAI,CAACZ,MAAM,EAAE,IAAI,CAACR,KAAK,CAACoB,KAAK,EAAE,CAAC;;;;;;4BAM3FG,cAAA,YAAAA,eAAeC,CAAC,EAAEC,CAAC,EAAEC,YAAY,EAAEC,kBAAkB,EAAE;IACrD,IAAIA,kBAAkB,GAAG7C,wBAAwB,CAAC,IAAI,CAAC8C,SAAS,EAAE,EAAEJ,CAAC,EAAEC,CAAC,CAAC,EAAE;MACzE,OAAOE,kBAAkB;;IAE3B,IAAI,IAAI,CAACzB,iBAAiB,IAAI,IAAI,CAAC2B,WAAW,EAAE,EAAE;MAChD,IAAI,CAAC5B,SAAS,GAAG6B,IAAI,CAACC,IAAI,CAAC3C,oBAAoB,CAC7C,IAAI,CAACuB,eAAe,EAAE,CAAC,EAAE,IAAI,CAACX,KAAK,EAAE,IAAI,CAACgC,MAAM,EAAE,CAAC,CAAC,CAAC;MACvD,IAAI,CAAC9B,iBAAiB,GAAG,IAAI,CAAC2B,WAAW,EAAE;;IAE7C,OAAO1C,uBAAuB,CAC5B,IAAI,CAACwB,eAAe,EAAE,CAAC,EAAE,IAAI,CAACX,KAAK,EAAE,IAAI,CAACgC,MAAM,EAChD,IAAI,CAAC/B,SAAS,EAAE,KAAK,EAAEuB,CAAC,EAAEC,CAAC,EAAEC,YAAY,EAAEC,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;4BAyBlEM,gBAAA,YAAAA,iBAAiBC,CAAC,EAAEC,eAAe,EAAEC,eAAe,EAAE;IACpD,IAAK,IAAI,CAAC5B,MAAM,IAAIzB,cAAc,CAACsD,GAAG,IACjC,IAAI,CAAC7B,MAAM,IAAIzB,cAAc,CAACuD,IAAI,IACnC,IAAI,CAAC3B,eAAe,CAACI,MAAM,KAAK,CAAC,EAAE;MACrC,OAAO,IAAI;;IAEb,IAAMwB,WAAW,GAAGJ,eAAe,KAAK7B,SAAS,GAAG6B,eAAe,GAAG,KAAK;IAC3E,IAAMK,WAAW,GAAGJ,eAAe,KAAK9B,SAAS,GAAG8B,eAAe,GAAG,KAAK;IAC3E,OAAO5C,wBAAwB,CAAC,IAAI,CAACmB,eAAe,EAAE,CAAC,EACrD,IAAI,CAACX,KAAK,EAAE,IAAI,CAACgC,MAAM,EAAEE,CAAC,EAAEK,WAAW,EAAEC,WAAW,CAAC;;;;;;;;;4BASzDC,cAAA,YAAAA,eAAA,EAAiB;IACf,OAAOnD,uBAAuB,CAC5B,IAAI,CAACqB,eAAe,EAAE,CAAC,EAAE,IAAI,CAACX,KAAK,EAAE,IAAI,CAACgC,MAAM,CAAC;;;;;;4BAMrDU,OAAA,YAAAA,QAAA,EAAU;IACR,OAAO,IAAI,CAAC1C,KAAK;;;;;;;;;4BASnB2C,aAAA,YAAAA,cAAcC,KAAK,EAAE;IACnB,IAAIA,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC5C,KAAK,CAACe,MAAM,IAAI6B,KAAK,EAAE;MAC3C,OAAO,IAAI;;IAEb,OAAO,IAAI3D,UAAU,CAAC,IAAI,CAAC0B,eAAe,CAACS,KAAK,CAC9CwB,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC5C,KAAK,CAAC4C,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC5C,KAAK,CAAC4C,KAAK,CAAC,CAAC,EAAE,IAAI,CAACpC,MAAM,CAAC;;;;;;;;4BAQ7EqC,cAAA,YAAAA,eAAA,EAAiB;IACf,IAAMlC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,IAAMC,IAAI,GAAG,IAAI,CAACZ,KAAK;IACvB,IAAMQ,MAAM,GAAG,IAAI,CAACA,MAAM;;IAE1B,IAAME,WAAW,GAAG,EAAE;IACtB,IAAIoC,MAAM,GAAG,CAAC;IACd,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,IAAI,CAACG,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC7C,IAAMkC,GAAG,GAAGnC,IAAI,CAACC,CAAC,CAAC;MACnB,IAAMG,UAAU,GAAG,IAAI/B,UAAU,CAAC0B,eAAe,CAACS,KAAK,CAAC0B,MAAM,EAAEC,GAAG,CAAC,EAAEvC,MAAM,CAAC;MAC7EE,WAAW,CAACQ,IAAI,CAACF,UAAU,CAAC;MAC5B8B,MAAM,GAAGC,GAAG;;IAEd,OAAOrC,WAAW;;;;;;4BAMpBsC,gBAAA,YAAAA,iBAAA,EAAmB;IACjB,IAAMC,SAAS,GAAG,EAAE;IACpB,IAAMtC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,IAAImC,MAAM,GAAG,CAAC;IACd,IAAMlC,IAAI,GAAG,IAAI,CAACZ,KAAK;IACvB,IAAMgC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,IAAI,CAACG,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC7C,IAAMkC,GAAG,GAAGnC,IAAI,CAACC,CAAC,CAAC;MACnB,IAAMqC,QAAQ,GAAG3D,gBAAgB,CAC/BoB,eAAe,EAAEmC,MAAM,EAAEC,GAAG,EAAEf,MAAM,EAAE,GAAG,CAAC;MAC5CnD,MAAM,CAACoE,SAAS,EAAEC,QAAQ,CAAC;MAC3BJ,MAAM,GAAGC,GAAG;;IAEd,OAAOE,SAAS;;;;;;4BAMlBE,6BAAA,YAAAA,8BAA8BC,gBAAgB,EAAE;IAC9C,IAAMC,yBAAyB,GAAG,EAAE;IACpC,IAAMC,cAAc,GAAG,EAAE;IACzBD,yBAAyB,CAACtC,MAAM,GAAGrB,mBAAmB,CACpD,IAAI,CAACiB,eAAe,EAAE,CAAC,EAAE,IAAI,CAACX,KAAK,EAAE,IAAI,CAACgC,MAAM,EAAEoB,gBAAgB,EAClEC,yBAAyB,EAAE,CAAC,EAAEC,cAAc,CAAC;IAC/C,OAAO,IAAI3D,eAAe,CAAC0D,yBAAyB,EAAEtE,cAAc,CAACwE,EAAE,EAAED,cAAc,CAAC;;;;;;;4BAO1FE,OAAA,YAAAA,QAAA,EAAU;IACR,OAAOxE,YAAY,CAACyE,iBAAiB;;;;;;;4BAOvCC,gBAAA,YAAAA,iBAAiBC,MAAM,EAAE;IACvB,OAAOlE,yBAAyB,CAC9B,IAAI,CAACkB,eAAe,EAAE,CAAC,EAAE,IAAI,CAACX,KAAK,EAAE,IAAI,CAACgC,MAAM,EAAE2B,MAAM,CAAC;;;;;;;;;;4BAU7DtD,cAAA,YAAAA,eAAeT,WAAW,EAAEC,UAAU,EAAE;IACtC,IAAI,CAAC+D,SAAS,CAAC/D,UAAU,EAAED,WAAW,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,CAACe,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAG,EAAE;;IAE3B,IAAMC,IAAI,GAAGvB,uBAAuB,CAClC,IAAI,CAACsB,eAAe,EAAE,CAAC,EAAEf,WAAW,EAAE,IAAI,CAACoC,MAAM,EAAE,IAAI,CAAChC,KAAK,CAAC;IAChE,IAAI,CAACW,eAAe,CAACI,MAAM,GAAGH,IAAI,CAACG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;IAC3E,IAAI,CAACM,OAAO,EAAE;GACf;;EAxP2BnC,cAAA;AA4P9B,eAAeS,eAAe"},"metadata":{},"sourceType":"module"}