{"ast":null,"code":"/**\n * @module ol/featureloader\n */\nimport { VOID } from './functions.js';\nimport FormatType from './format/FormatType.js';\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default), import(\"./extent.js\").Extent, number,\n *                    import(\"./proj/Projection.js\").default)} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {function(this:import(\"./VectorTile.js\").default, Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default, import(\"./extent.js\").Extent)|function(this:import(\"./source/Vector\").default, Array<import(\"./Feature.js\").default>)} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:import(\"./VectorTile.js\").default)|function(this:import(\"./source/Vector\").default)} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {FeatureLoader} The feature loader.\n */\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function (extent, resolution, projection) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n      xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n          var type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n          var source;\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n            if (!source) {\n              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source = /** @type {ArrayBuffer} */xhr.response;\n          }\n          if (source) {\n            success.call(this, format.readFeatures(source, {\n              featureProjection: projection\n            }), format.readProjection(source), format.getLastExtent());\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n      xhr.onerror = function () {\n        failure.call(this);\n      }.bind(this);\n      xhr.send();\n    }\n  );\n}\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  return loadFeaturesXhr(url, format,\n  /**\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n   * projection.\n   * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n   */\n  function (features, dataProjection) {\n    var sourceOrTile = /** @type {?} */this;\n    if (typeof sourceOrTile.addFeatures === 'function') {\n      /** @type {import(\"./source/Vector\").default} */sourceOrTile.addFeatures(features);\n    }\n  }, /* FIXME handle error */VOID);\n}","map":{"version":3,"names":["VOID","FormatType","loadFeaturesXhr","url","format","success","failure","extent","resolution","projection","xhr","XMLHttpRequest","open","getType","ARRAY_BUFFER","responseType","onload","event","status","type","source","JSON","TEXT","responseText","XML","responseXML","DOMParser","parseFromString","response","call","readFeatures","featureProjection","readProjection","getLastExtent","bind","onerror","send","features","dataProjection","sourceOrTile","addFeatures"],"sources":["../../src/ol/featureloader.js"],"sourcesContent":["/**\n * @module ol/featureloader\n */\nimport {VOID} from './functions.js';\nimport FormatType from './format/FormatType.js';\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default), import(\"./extent.js\").Extent, number,\n *                    import(\"./proj/Projection.js\").default)} FeatureLoader\n * @api\n */\n\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {function(this:import(\"./VectorTile.js\").default, Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default, import(\"./extent.js\").Extent)|function(this:import(\"./source/Vector\").default, Array<import(\"./Feature.js\").default>)} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:import(\"./VectorTile.js\").default)|function(this:import(\"./source/Vector\").default)} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {FeatureLoader} The feature loader.\n */\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function(extent, resolution, projection) {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET',\n        typeof url === 'function' ? url(extent, resolution, projection) : url,\n        true);\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n      xhr.onload = function(event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n          const type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n          let source;\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n            if (!source) {\n              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source = /** @type {ArrayBuffer} */ (xhr.response);\n          }\n          if (source) {\n            success.call(this, format.readFeatures(source,\n              {featureProjection: projection}),\n            format.readProjection(source), format.getLastExtent());\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n      xhr.onerror = function() {\n        failure.call(this);\n      }.bind(this);\n      xhr.send();\n    }\n  );\n}\n\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  return loadFeaturesXhr(url, format,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function(features, dataProjection) {\n      const sourceOrTile = /** @type {?} */ (this);\n      if (typeof sourceOrTile.addFeatures === 'function') {\n        /** @type {import(\"./source/Vector\").default} */ (sourceOrTile).addFeatures(features);\n      }\n    }, /* FIXME handle error */ VOID);\n}\n"],"mappings":"AAAA;;;AAGA,SAAQA,IAAI,QAAO,gBAAgB;AACnC,OAAOC,UAAU,MAAM,wBAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4C/C,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE;EAC7D;;;;;;;IAOE,UAASC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAE;MACvC,IAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE;MAChCD,GAAG,CAACE,IAAI,CAAC,KAAK,EACZ,OAAOT,GAAG,KAAK,UAAU,GAAGA,GAAG,CAACI,MAAM,EAAEC,UAAU,EAAEC,UAAU,CAAC,GAAGN,GAAG,EACrE,IAAI,CAAC;MACP,IAAIC,MAAM,CAACS,OAAO,EAAE,IAAIZ,UAAU,CAACa,YAAY,EAAE;QAC/CJ,GAAG,CAACK,YAAY,GAAG,aAAa;;;;;;MAMlCL,GAAG,CAACM,MAAM,GAAG,UAASC,KAAK,EAAE;;QAE3B,IAAI,CAACP,GAAG,CAACQ,MAAM,IAAIR,GAAG,CAACQ,MAAM,IAAI,GAAG,IAAIR,GAAG,CAACQ,MAAM,GAAG,GAAG,EAAE;UACxD,IAAMC,IAAI,GAAGf,MAAM,CAACS,OAAO,EAAE;;UAE7B,IAAIO,MAAM;UACV,IAAID,IAAI,IAAIlB,UAAU,CAACoB,IAAI,IAAIF,IAAI,IAAIlB,UAAU,CAACqB,IAAI,EAAE;YACtDF,MAAM,GAAGV,GAAG,CAACa,YAAY;WAC1B,MAAM,IAAIJ,IAAI,IAAIlB,UAAU,CAACuB,GAAG,EAAE;YACjCJ,MAAM,GAAGV,GAAG,CAACe,WAAW;YACxB,IAAI,CAACL,MAAM,EAAE;cACXA,MAAM,GAAG,IAAIM,SAAS,EAAE,CAACC,eAAe,CAACjB,GAAG,CAACa,YAAY,EAAE,iBAAiB,CAAC;;WAEhF,MAAM,IAAIJ,IAAI,IAAIlB,UAAU,CAACa,YAAY,EAAE;YAC1CM,MAAM,6BAA+BV,GAAG,CAACkB,QAAS;;UAEpD,IAAIR,MAAM,EAAE;YACVf,OAAO,CAACwB,IAAI,CAAC,IAAI,EAAEzB,MAAM,CAAC0B,YAAY,CAACV,MAAM,EAC3C;cAACW,iBAAiB,EAAEtB;YAAU,CAAC,CAAC,EAClCL,MAAM,CAAC4B,cAAc,CAACZ,MAAM,CAAC,EAAEhB,MAAM,CAAC6B,aAAa,EAAE,CAAC;WACvD,MAAM;YACL3B,OAAO,CAACuB,IAAI,CAAC,IAAI,CAAC;;SAErB,MAAM;UACLvB,OAAO,CAACuB,IAAI,CAAC,IAAI,CAAC;;OAErB,CAACK,IAAI,CAAC,IAAI,CAAC;;;;MAIZxB,GAAG,CAACyB,OAAO,GAAG,YAAW;QACvB7B,OAAO,CAACuB,IAAI,CAAC,IAAI,CAAC;OACnB,CAACK,IAAI,CAAC,IAAI,CAAC;MACZxB,GAAG,CAAC0B,IAAI,EAAE;;EACX;;;;;;;;;;;;AAcL,OAAO,SAAS1B,GAAGA,CAACP,GAAG,EAAEC,MAAM,EAAE;EAC/B,OAAOF,eAAe,CAACC,GAAG,EAAEC,MAAM;;;;;;;EAOhC,UAASiC,QAAQ,EAAEC,cAAc,EAAE;IACjC,IAAMC,YAAY,mBAAqB,IAAK;IAC5C,IAAI,OAAOA,YAAY,CAACC,WAAW,KAAK,UAAU,EAAE;sDACAD,YAAY,CAAEC,WAAW,CAACH,QAAQ,CAAC;;GAExF,0BAA2BrC,IAAI,CAAC"},"metadata":{},"sourceType":"module"}