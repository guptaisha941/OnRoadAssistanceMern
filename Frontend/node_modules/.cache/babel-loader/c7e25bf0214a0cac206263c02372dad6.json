{"ast":null,"code":"/**\n * @module ol/proj/epsg3857\n */\nimport { cosh } from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /*@__PURE__*/function (Projection) {\n  function EPSG3857Projection(code) {\n    Projection.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n  }\n  if (Projection) EPSG3857Projection.__proto__ = Projection;\n  EPSG3857Projection.prototype = Object.create(Projection && Projection.prototype);\n  EPSG3857Projection.prototype.constructor = EPSG3857Projection;\n  return EPSG3857Projection;\n}(Projection);\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'), new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}","map":{"version":3,"names":["cosh","Projection","Units","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","EPSG3857Projection","code","call","units","METERS","extent","global","worldExtent","getPointResolution","resolution","point","prototype","constructor","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","Array","halfSize","i","y","log","tan","toEPSG4326","atan","exp"],"sources":["../../../src/ol/proj/epsg3857.js"],"sourcesContent":["/**\n * @module ol/proj/epsg3857\n */\nimport {cosh} from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [\n  -HALF_SIZE, -HALF_SIZE,\n  HALF_SIZE, HALF_SIZE\n];\n\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function(resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n\n  }\n\n}\n\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  const halfSize = HALF_SIZE;\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    let y = RADIUS *\n        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(\n      Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}\n"],"mappings":"AAAA;;;AAGA,SAAQA,IAAI,QAAO,YAAY;AAC/B,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,KAAK,MAAM,YAAY;;;;;;;;AAS9B,OAAO,IAAMC,MAAM,GAAG,OAAO;;;;;;AAO7B,OAAO,IAAMC,SAAS,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;;;;;;AAOzC,OAAO,IAAMI,MAAM,GAAG,CACpB,CAACH,SAAS,EAAE,CAACA,SAAS,EACtBA,SAAS,EAAEA,SAAS,CACrB;;;;;;AAOD,OAAO,IAAMI,YAAY,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;;;;;;AAOhD,IAAMC,kBAAkB,GAAmB,uBAAAR,UAAA;EAKzC,SAAAQ,kBAAWA,CAACC,IAAI,EAAE;IAChBT,UAAA,CAAAU,IAAK,OAAC;MACJD,IAAI,EAAEA,IAAI;MACVE,KAAK,EAAEV,KAAK,CAACW,MAAM;MACnBC,MAAM,EAAEP,MAAM;MACdQ,MAAM,EAAE,IAAI;MACZC,WAAW,EAAER,YAAY;MACzBS,kBAAkB,EAAE,SAAAA,CAASC,UAAU,EAAEC,KAAK,EAAE;QAC9C,OAAOD,UAAU,GAAGlB,IAAI,CAACmB,KAAK,CAAC,CAAC,CAAC,GAAGhB,MAAM,CAAC;;KAE9C,CAAC;;;;oBAEH,CAAAiB,SAAA,CAAAC,WAAA,GAAAZ,kBAAA;;EAjB8BR,UAAA;;;;;;;;AA4BjC,OAAO,IAAMqB,WAAW,GAAG,CACzB,IAAIb,kBAAkB,CAAC,WAAW,CAAC,EACnC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,aAAa,CAAC,EACrC,IAAIA,kBAAkB,CAAC,kCAAkC,CAAC,EAC1D,IAAIA,kBAAkB,CAAC,4BAA4B,CAAC,EACpD,IAAIA,kBAAkB,CAAC,8CAA8C,CAAC,CACvE;;;;;;;;;;AAWD,OAAO,SAASc,YAAYA,CAACC,KAAK,EAAEC,UAAU,EAAEC,aAAa,EAAE;EAC7D,IAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3B,IAAMC,SAAS,GAAGF,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAG,CAAC;EACvD,IAAIG,MAAM,GAAGJ,UAAU;EACvB,IAAII,MAAM,KAAKC,SAAS,EAAE;IACxB,IAAIF,SAAS,GAAG,CAAC,EAAE;;MAEjBC,MAAM,GAAGL,KAAK,CAACO,KAAK,EAAE;KACvB,MAAM;MACLF,MAAM,GAAG,IAAIG,KAAK,CAACL,MAAM,CAAC;;;EAG9B,IAAMM,QAAQ,GAAG7B,SAAS;EAC1B,KAAK,IAAI8B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,EAAEO,CAAC,IAAIN,SAAS,EAAE;IAC1CC,MAAM,CAACK,CAAC,CAAC,GAAGD,QAAQ,GAAGT,KAAK,CAACU,CAAC,CAAC,GAAG,GAAG;IACrC,IAAIC,CAAC,GAAGhC,MAAM,GACVE,IAAI,CAAC+B,GAAG,CAAC/B,IAAI,CAACgC,GAAG,CAAChC,IAAI,CAACC,EAAE,IAAIkB,KAAK,CAACU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;IAC3D,IAAIC,CAAC,GAAGF,QAAQ,EAAE;MAChBE,CAAC,GAAGF,QAAQ;KACb,MAAM,IAAIE,CAAC,GAAG,CAACF,QAAQ,EAAE;MACxBE,CAAC,GAAG,CAACF,QAAQ;;IAEfJ,MAAM,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGC,CAAC;;EAEnB,OAAON,MAAM;;;;;;;;;;;AAYf,OAAO,SAASS,UAAUA,CAACd,KAAK,EAAEC,UAAU,EAAEC,aAAa,EAAE;EAC3D,IAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3B,IAAMC,SAAS,GAAGF,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAG,CAAC;EACvD,IAAIG,MAAM,GAAGJ,UAAU;EACvB,IAAII,MAAM,KAAKC,SAAS,EAAE;IACxB,IAAIF,SAAS,GAAG,CAAC,EAAE;;MAEjBC,MAAM,GAAGL,KAAK,CAACO,KAAK,EAAE;KACvB,MAAM;MACLF,MAAM,GAAG,IAAIG,KAAK,CAACL,MAAM,CAAC;;;EAG9B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,EAAEO,CAAC,IAAIN,SAAS,EAAE;IAC1CC,MAAM,CAACK,CAAC,CAAC,GAAG,GAAG,GAAGV,KAAK,CAACU,CAAC,CAAC,GAAG9B,SAAS;IACtCyB,MAAM,CAACK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG7B,IAAI,CAACkC,IAAI,CAC7BlC,IAAI,CAACmC,GAAG,CAAChB,KAAK,CAACU,CAAC,GAAG,CAAC,CAAC,GAAG/B,MAAM,CAAC,CAAC,GAAGE,IAAI,CAACC,EAAE,GAAG,EAAE;;EAEnD,OAAOuB,MAAM"},"metadata":{},"sourceType":"module"}