{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\n\nimport { assert } from '../asserts.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").Event\n * @template T\n */\nvar LRUCache = /*@__PURE__*/function (EventTarget) {\n  function LRUCache(opt_highWaterMark) {\n    EventTarget.call(this);\n\n    /**\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n  if (EventTarget) LRUCache.__proto__ = EventTarget;\n  LRUCache.prototype = Object.create(EventTarget && EventTarget.prototype);\n  LRUCache.prototype.constructor = LRUCache;\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  LRUCache.prototype.canExpireCache = function canExpireCache() {\n    return this.getCount() > this.highWaterMark;\n  };\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  LRUCache.prototype.clear = function clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  };\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  LRUCache.prototype.containsKey = function containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n\n  /**\n   * @param {function(this: S, T, string, LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n  LRUCache.prototype.forEach = function forEach(f, opt_this) {\n    var entry = this.oldest_;\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  LRUCache.prototype.get = function get(key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  LRUCache.prototype.remove = function remove(key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */entry.older;\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */entry.newer;\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n\n  /**\n   * @return {number} Count.\n   */\n  LRUCache.prototype.getCount = function getCount() {\n    return this.count_;\n  };\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  LRUCache.prototype.getKeys = function getKeys() {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  };\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  LRUCache.prototype.getValues = function getValues() {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  };\n\n  /**\n   * @return {T} Last value.\n   */\n  LRUCache.prototype.peekLast = function peekLast() {\n    return this.oldest_.value_;\n  };\n\n  /**\n   * @return {string} Last key.\n   */\n  LRUCache.prototype.peekLastKey = function peekLastKey() {\n    return this.oldest_.key_;\n  };\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  LRUCache.prototype.peekFirstKey = function peekFirstKey() {\n    return this.newest_.key_;\n  };\n\n  /**\n   * @return {T} value Value.\n   */\n  LRUCache.prototype.pop = function pop() {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */entry.newer;\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  };\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.replace = function replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  };\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.set = function set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    var entry = /** @type {Entry} */{\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  LRUCache.prototype.setSize = function setSize(size) {\n    this.highWaterMark = size;\n  };\n\n  /**\n   * Prune the cache.\n   */\n  LRUCache.prototype.prune = function prune() {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  };\n  return LRUCache;\n}(EventTarget);\nexport default LRUCache;","map":{"version":3,"names":["assert","EventTarget","EventType","LRUCache","opt_highWaterMark","call","highWaterMark","undefined","count_","entries_","oldest_","newest_","canExpireCache","getCount","clear","dispatchEvent","CLEAR","containsKey","key","hasOwnProperty","forEach","f","opt_this","entry","value_","key_","newer","get","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","pop","replace","value","set","setSize","size","prune"],"sources":["../../../src/ol/structs/LRUCache.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\n\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").Event\n * @template T\n */\nclass LRUCache extends EventTarget {\n\n  /**\n   * @param {number=} opt_highWaterMark High water mark.\n   */\n  constructor(opt_highWaterMark) {\n\n    super();\n\n    /**\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n\n  }\n\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.getCount() > this.highWaterMark;\n  }\n\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n\n  /**\n   * @param {function(this: S, T, string, LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n  forEach(f, opt_this) {\n    let entry = this.oldest_;\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  get(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined,\n      15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_),\n      16); // Tried to set a value for a key that is used already\n    const entry = /** @type {Entry} */ ({\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    });\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n\n\n  /**\n   * Prune the cache.\n   */\n  prune() {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n\n}\n\nexport default LRUCache;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}