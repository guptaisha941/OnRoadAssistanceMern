{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardPan\n */\nimport { rotate as rotateCoordinate } from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport Interaction, { pan } from './Interaction.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nvar KeyboardPan = /*@__PURE__*/function (Interaction) {\n  function KeyboardPan(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n  if (Interaction) KeyboardPan.__proto__ = Interaction;\n  KeyboardPan.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardPan.prototype.constructor = KeyboardPan;\n  return KeyboardPan;\n}(Interaction);\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardPan}\n */\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    var keyEvent = /** @type {KeyboardEvent} */mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0,\n        deltaY = 0;\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      var delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\nexport default KeyboardPan;","map":{"version":3,"names":["rotate","rotateCoordinate","EventType","KeyCode","noModifierKeys","targetNotEditable","Interaction","pan","KeyboardPan","opt_options","call","handleEvent","options","defaultCondition_","mapBrowserEvent","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","prototype","constructor","stopEvent","type","KEYDOWN","keyEvent","originalEvent","keyCode","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","getRotation","preventDefault"],"sources":["../../../src/ol/interaction/KeyboardPan.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardPan\n */\nimport {rotate as rotateCoordinate} from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport Interaction, {pan} from './Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleEvent: handleEvent\n    });\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function(mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) &&\n        targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition !== undefined ?\n      options.condition : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ?\n      options.pixelDelta : 128;\n\n  }\n\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardPan}\n */\nfunction handleEvent(mapBrowserEvent) {\n  let stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);\n    const keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n        keyCode == KeyCode.LEFT ||\n        keyCode == KeyCode.RIGHT ||\n        keyCode == KeyCode.UP)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      let deltaX = 0, deltaY = 0;\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      const delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardPan;\n"],"mappings":"AAAA;;;AAGA,SAAQA,MAAM,IAAIC,gBAAgB,QAAO,kBAAkB;AAC3D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAAQC,cAAc,EAAEC,iBAAiB,QAAO,wBAAwB;AACxE,OAAOC,WAAW,IAAGC,GAAG,QAAO,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BjD,IAAMC,WAAW,GAAoB,uBAAAF,WAAA;EAInC,SAAAE,WAAWA,CAACC,WAAW,EAAE;IAEvBH,WAAA,CAAAI,IAAK,OAAC;MACJC,WAAW,EAAEA;KACd,CAAC;IAEF,IAAMC,OAAO,GAAGH,WAAW,IAAI,EAAE;;;;;;;IAOjC,IAAI,CAACI,iBAAiB,GAAG,UAASC,eAAe,EAAE;MACjD,OAAOV,cAAc,CAACU,eAAe,CAAC,IACpCT,iBAAiB,CAACS,eAAe,CAAC;KACrC;;;;;;IAMD,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACI,SAAS,KAAKC,SAAS,GAC/CL,OAAO,CAACI,SAAS,GAAG,IAAI,CAACH,iBAAiB;;;;;;IAM5C,IAAI,CAACK,SAAS,GAAGN,OAAO,CAACO,QAAQ,KAAKF,SAAS,GAAGL,OAAO,CAACO,QAAQ,GAAG,GAAG;;;;;;IAMxE,IAAI,CAACC,WAAW,GAAGR,OAAO,CAACS,UAAU,KAAKJ,SAAS,GACjDL,OAAO,CAACS,UAAU,GAAG,GAAG;;;;aAE3B,CAAAC,SAAA,CAAAC,WAAA,GAAAf,WAAA;;EA1CuBF,WAAA;;;;;;;;;;AAuD1B,SAASK,WAAWA,CAACG,eAAe,EAAE;EACpC,IAAIU,SAAS,GAAG,KAAK;EACrB,IAAIV,eAAe,CAACW,IAAI,IAAIvB,SAAS,CAACwB,OAAO,EAAE;IAC7C,IAAMC,QAAQ,+BAAiCb,eAAe,CAACc,aAAc;IAC7E,IAAMC,OAAO,GAAGF,QAAQ,CAACE,OAAO;IAChC,IAAI,IAAI,CAACd,UAAU,CAACD,eAAe,CAAC,KAC/Be,OAAO,IAAI1B,OAAO,CAAC2B,IAAI,IACxBD,OAAO,IAAI1B,OAAO,CAAC4B,IAAI,IACvBF,OAAO,IAAI1B,OAAO,CAAC6B,KAAK,IACxBH,OAAO,IAAI1B,OAAO,CAAC8B,EAAE,CAAC,EAAE;MAC1B,IAAMC,GAAG,GAAGpB,eAAe,CAACoB,GAAG;MAC/B,IAAMC,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;MAC1B,IAAMC,aAAa,GAAGF,IAAI,CAACG,aAAa,EAAE,GAAG,IAAI,CAAClB,WAAW;MAC7D,IAAImB,MAAM,GAAG,CAAC;QAAEC,MAAM,GAAG,CAAC;MAC1B,IAAIX,OAAO,IAAI1B,OAAO,CAAC2B,IAAI,EAAE;QAC3BU,MAAM,GAAG,CAACH,aAAa;OACxB,MAAM,IAAIR,OAAO,IAAI1B,OAAO,CAAC4B,IAAI,EAAE;QAClCQ,MAAM,GAAG,CAACF,aAAa;OACxB,MAAM,IAAIR,OAAO,IAAI1B,OAAO,CAAC6B,KAAK,EAAE;QACnCO,MAAM,GAAGF,aAAa;OACvB,MAAM;QACLG,MAAM,GAAGH,aAAa;;MAExB,IAAMI,KAAK,GAAG,CAACF,MAAM,EAAEC,MAAM,CAAC;MAC9BvC,gBAAgB,CAACwC,KAAK,EAAEN,IAAI,CAACO,WAAW,EAAE,CAAC;MAC3CnC,GAAG,CAAC4B,IAAI,EAAEM,KAAK,EAAE,IAAI,CAACvB,SAAS,CAAC;MAChCJ,eAAe,CAAC6B,cAAc,EAAE;MAChCnB,SAAS,GAAG,IAAI;;;EAGpB,OAAO,CAACA,SAAS;;AAGnB,eAAehB,WAAW"},"metadata":{},"sourceType":"module"}