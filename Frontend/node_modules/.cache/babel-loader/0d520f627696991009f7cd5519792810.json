{"ast":null,"code":"/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport { assert } from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State)}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\nvar Style = function Style(opt_options) {\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   */\n  this.geometry_ = null;\n\n  /**\n   * @private\n   * @type {!GeometryFunction}\n   */\n  this.geometryFunction_ = defaultGeometryFunction;\n  if (options.geometry !== undefined) {\n    this.setGeometry(options.geometry);\n  }\n\n  /**\n   * @private\n   * @type {import(\"./Fill.js\").default}\n   */\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n\n  /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n  this.image_ = options.image !== undefined ? options.image : null;\n\n  /**\n   * @private\n   * @type {RenderFunction|null}\n   */\n  this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n  /**\n   * @private\n   * @type {import(\"./Stroke.js\").default}\n   */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n   * @private\n   * @type {import(\"./Text.js\").default}\n   */\n  this.text_ = options.text !== undefined ? options.text : null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.zIndex_ = options.zIndex;\n};\n\n/**\n * Clones the style.\n * @return {Style} The cloned style.\n * @api\n */\nStyle.prototype.clone = function clone() {\n  var geometry = this.getGeometry();\n  if (geometry && typeof geometry === 'object') {\n    geometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry.clone();\n  }\n  return new Style({\n    geometry: geometry,\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    image: this.getImage() ? this.getImage().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    text: this.getText() ? this.getText().clone() : undefined,\n    zIndex: this.getZIndex()\n  });\n};\n\n/**\n * Get the custom renderer function that was configured with\n * {@link #setRenderer} or the `renderer` constructor option.\n * @return {RenderFunction|null} Custom renderer function.\n * @api\n */\nStyle.prototype.getRenderer = function getRenderer() {\n  return this.renderer_;\n};\n\n/**\n * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n * and `image` options of the style will be ignored.\n * @param {RenderFunction|null} renderer Custom renderer function.\n * @api\n */\nStyle.prototype.setRenderer = function setRenderer(renderer) {\n  this.renderer_ = renderer;\n};\n\n/**\n * Get the geometry to be rendered.\n * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n * Feature property or geometry or function that returns the geometry that will\n * be rendered with this style.\n * @api\n */\nStyle.prototype.getGeometry = function getGeometry() {\n  return this.geometry_;\n};\n\n/**\n * Get the function used to generate a geometry for rendering.\n * @return {!GeometryFunction} Function that is called with a feature\n * and returns the geometry to render instead of the feature's geometry.\n * @api\n */\nStyle.prototype.getGeometryFunction = function getGeometryFunction() {\n  return this.geometryFunction_;\n};\n\n/**\n * Get the fill style.\n * @return {import(\"./Fill.js\").default} Fill style.\n * @api\n */\nStyle.prototype.getFill = function getFill() {\n  return this.fill_;\n};\n\n/**\n * Set the fill style.\n * @param {import(\"./Fill.js\").default} fill Fill style.\n * @api\n */\nStyle.prototype.setFill = function setFill(fill) {\n  this.fill_ = fill;\n};\n\n/**\n * Get the image style.\n * @return {import(\"./Image.js\").default} Image style.\n * @api\n */\nStyle.prototype.getImage = function getImage() {\n  return this.image_;\n};\n\n/**\n * Set the image style.\n * @param {import(\"./Image.js\").default} image Image style.\n * @api\n */\nStyle.prototype.setImage = function setImage(image) {\n  this.image_ = image;\n};\n\n/**\n * Get the stroke style.\n * @return {import(\"./Stroke.js\").default} Stroke style.\n * @api\n */\nStyle.prototype.getStroke = function getStroke() {\n  return this.stroke_;\n};\n\n/**\n * Set the stroke style.\n * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n * @api\n */\nStyle.prototype.setStroke = function setStroke(stroke) {\n  this.stroke_ = stroke;\n};\n\n/**\n * Get the text style.\n * @return {import(\"./Text.js\").default} Text style.\n * @api\n */\nStyle.prototype.getText = function getText() {\n  return this.text_;\n};\n\n/**\n * Set the text style.\n * @param {import(\"./Text.js\").default} text Text style.\n * @api\n */\nStyle.prototype.setText = function setText(text) {\n  this.text_ = text;\n};\n\n/**\n * Get the z-index for the style.\n * @return {number|undefined} ZIndex.\n * @api\n */\nStyle.prototype.getZIndex = function getZIndex() {\n  return this.zIndex_;\n};\n\n/**\n * Set a geometry that is rendered instead of the feature's geometry.\n *\n * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n *   Feature property or geometry or function returning a geometry to render\n *   for this style.\n * @api\n */\nStyle.prototype.setGeometry = function setGeometry(geometry) {\n  if (typeof geometry === 'function') {\n    this.geometryFunction_ = geometry;\n  } else if (typeof geometry === 'string') {\n    this.geometryFunction_ = function (feature) {\n      return (/** @type {import(\"../geom/Geometry.js\").default} */feature.get(geometry)\n      );\n    };\n  } else if (!geometry) {\n    this.geometryFunction_ = defaultGeometryFunction;\n  } else if (geometry !== undefined) {\n    this.geometryFunction_ = function () {\n      return (/** @type {import(\"../geom/Geometry.js\").default} */geometry\n      );\n    };\n  }\n  this.geometry_ = geometry;\n};\n\n/**\n * Set the z-index.\n *\n * @param {number|undefined} zIndex ZIndex.\n * @api\n */\nStyle.prototype.setZIndex = function setZIndex(zIndex) {\n  this.zIndex_ = zIndex;\n};\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  var styleFunction;\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n      var style = /** @type {Style} */obj;\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>}\n */\nvar defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n  styles[GeometryType.LINE_STRING] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n  styles[GeometryType.POINT] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\nexport default Style;","map":{"version":3,"names":["assert","GeometryType","CircleStyle","Fill","Stroke","Style","opt_options","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","stroke_","stroke","text_","text","zIndex_","zIndex","prototype","clone","getGeometry","getFill","getImage","getStroke","getText","getZIndex","getRenderer","setRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","white","blue","POLYGON","MULTI_POLYGON","LINE_STRING","MULTI_LINE_STRING","CIRCLE","concat","POINT","Infinity","MULTI_POINT","GEOMETRY_COLLECTION"],"sources":["../../../src/ol/style/Style.js"],"sourcesContent":["/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport {assert} from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State)}\n * RenderFunction\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\nclass Style {\n  /**\n   * @param {Options=} opt_options Style options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n       * @private\n       * @type {import(\"./Image.js\").default}\n       */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry).clone();\n    }\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function(feature) {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */ (feature.get(geometry))\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function() {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */ (geometry)\n        );\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */ (obj).getZIndex === 'function',\n        41); // Expected an `Style` or an array of `Style`\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function() {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n\n/**\n * @type {Array<Style>}\n */\nlet defaultStyles = null;\n\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5\n        }),\n        fill: fill,\n        stroke: stroke\n      })\n    ];\n  }\n  return defaultStyles;\n}\n\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles[GeometryType.POLYGON] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5]\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_POLYGON] =\n      styles[GeometryType.POLYGON];\n\n  styles[GeometryType.LINE_STRING] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2\n      })\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_LINE_STRING] =\n      styles[GeometryType.LINE_STRING];\n\n  styles[GeometryType.CIRCLE] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING]\n      );\n\n\n  styles[GeometryType.POINT] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2\n        })\n      }),\n      zIndex: Infinity\n    })\n  ];\n  styles[GeometryType.MULTI_POINT] =\n      styles[GeometryType.POINT];\n\n  styles[GeometryType.GEOMETRY_COLLECTION] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING],\n        styles[GeometryType.POINT]\n      );\n\n  return styles;\n}\n\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}