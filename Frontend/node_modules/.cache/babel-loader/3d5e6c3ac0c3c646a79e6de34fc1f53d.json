{"ast":null,"code":"var _jsxFileName = \"D:\\\\demo_one\\\\react-website-v1\\\\src\\\\components\\\\pages\\\\MapWithLocation.js\";\n// import React, { useEffect, useState } from \"react\";\n// import Map from \"ol/Map\";\n// import View from \"ol/View\";\n// import TileLayer from \"ol/layer/Tile\";\n// import OSM from \"ol/source/OSM\";\n// import Feature from \"ol/Feature\";\n// import Point from \"ol/geom/Point\";\n// import { fromLonLat } from \"ol/proj\";\n// import VectorLayer from \"ol/layer/Vector\";\n// import VectorSource from \"ol/source/Vector\";\n// // import { Icon } from 'ol/style';\n// import { Icon, Style } from 'ol/style';  // Import Style and Icon from ol/style\n\n// const MapWithLocation = () => {\n//   const [map, setMap] = useState(null);\n\n//   useEffect(() => {\n//     const initialMap = new Map({\n//       target: \"map-container\",\n//       layers: [\n//         new TileLayer({\n//           source: new OSM(),\n//         }),\n//       ],\n//       view: new View({\n//         center: fromLonLat([0, 0]),\n//         zoom: 2,\n//       }),\n//     });\n//     setMap(initialMap);\n//   }, []);\n\n//   useEffect(() => {\n//     if (map) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const longitude = position.coords.longitude;\n//           const latitude = position.coords.latitude;\n\n//           // Create a marker for your location\n//           const marker = new Feature({\n//             geometry: new Point(fromLonLat([longitude, latitude])),\n//           });\n\n//           // Create a new style for the marker using IconStyle\n//           const iconStyle = new Style({\n//             image: new Icon({\n//               src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\n//             }),\n//           });\n\n//           // Create a vector source and add the marker feature to it\n//           const vectorSource = new VectorSource({\n//             features: [marker],\n//           });\n//           marker.setStyle(iconStyle);\n\n//           // Add the vector layer to the map\n//           const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//           });\n//           map.addLayer(vectorLayer);\n\n//           // Set the view to your location\n//           map.getView().setCenter(fromLonLat([longitude, latitude]));\n//           map.getView().setZoom(15);\n//         },\n//         (error) => {\n//           console.error(error);\n//         }\n//       );\n//     }\n//   }, [map]);\n\n//   return <div id=\"map-container\" style={{ height: \"500px\" }}></div>;\n// };\n\n// export default MapWithLocation;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\nconst Map = () => {\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n      version: \"weekly\",\n      libraries: [\"places\"]\n    });\n    loader.load().then(() => {\n      const mapOptions = {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 15\n      };\n      const map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n      setMap(map);\n      if (map && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          map.setCenter(pos);\n          new google.maps.Marker({\n            position: pos,\n            map: map\n          });\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"500px\",\n      width: \"100%\"\n    },\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, !map && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }\n  }, \"Loading...\"));\n};\nexport default Map;","map":{"version":3,"names":["React","useState","useEffect","Loader","Map","map","setMap","loader","apiKey","version","libraries","load","then","mapOptions","center","lat","lng","zoom","google","maps","document","getElementById","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","setCenter","Marker","createElement","style","height","width","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/demo_one/react-website-v1/src/components/pages/MapWithLocation.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import Map from \"ol/Map\";\r\n// import View from \"ol/View\";\r\n// import TileLayer from \"ol/layer/Tile\";\r\n// import OSM from \"ol/source/OSM\";\r\n// import Feature from \"ol/Feature\";\r\n// import Point from \"ol/geom/Point\";\r\n// import { fromLonLat } from \"ol/proj\";\r\n// import VectorLayer from \"ol/layer/Vector\";\r\n// import VectorSource from \"ol/source/Vector\";\r\n// // import { Icon } from 'ol/style';\r\n// import { Icon, Style } from 'ol/style';  // Import Style and Icon from ol/style\r\n\r\n// const MapWithLocation = () => {\r\n//   const [map, setMap] = useState(null);\r\n  \r\n\r\n//   useEffect(() => {\r\n//     const initialMap = new Map({\r\n//       target: \"map-container\",\r\n//       layers: [\r\n//         new TileLayer({\r\n//           source: new OSM(),\r\n//         }),\r\n//       ],\r\n//       view: new View({\r\n//         center: fromLonLat([0, 0]),\r\n//         zoom: 2,\r\n//       }),\r\n//     });\r\n//     setMap(initialMap);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (map) {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           const longitude = position.coords.longitude;\r\n//           const latitude = position.coords.latitude;\r\n\r\n//           // Create a marker for your location\r\n//           const marker = new Feature({\r\n//             geometry: new Point(fromLonLat([longitude, latitude])),\r\n//           });\r\n\r\n//           // Create a new style for the marker using IconStyle\r\n//           const iconStyle = new Style({\r\n//             image: new Icon({\r\n//               src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\r\n//             }),\r\n//           });\r\n\r\n//           // Create a vector source and add the marker feature to it\r\n//           const vectorSource = new VectorSource({\r\n//             features: [marker],\r\n//           });\r\n//           marker.setStyle(iconStyle);\r\n\r\n//           // Add the vector layer to the map\r\n//           const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//           });\r\n//           map.addLayer(vectorLayer);\r\n\r\n//           // Set the view to your location\r\n//           map.getView().setCenter(fromLonLat([longitude, latitude]));\r\n//           map.getView().setZoom(15);\r\n//         },\r\n//         (error) => {\r\n//           console.error(error);\r\n//         }\r\n//       );\r\n//     }\r\n//   }, [map]);\r\n\r\n\r\n//   return <div id=\"map-container\" style={{ height: \"500px\" }}></div>;\r\n// };\r\n\r\n// export default MapWithLocation;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Loader } from \"@googlemaps/js-api-loader\";\r\n\r\nconst Map = () => {\r\n  const [map, setMap] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loader = new Loader({\r\n      apiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\r\n      version: \"weekly\",\r\n      libraries: [\"places\"],\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const mapOptions = {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 15,\r\n      };\r\n      const map = new google.maps.Map(\r\n        document.getElementById(\"map\"),\r\n        mapOptions\r\n      );\r\n      setMap(map);\r\n\r\n      if (map && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          const pos = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          };\r\n          map.setCenter(pos);\r\n          new google.maps.Marker({\r\n            position: pos,\r\n            map: map,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ height: \"500px\", width: \"100%\" }} id=\"map\">\r\n      {!map && <div>Loading...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,2BAA2B;AAElD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMK,MAAM,GAAG,IAAIJ,MAAM,CAAC;MACxBK,MAAM,EAAE,0BAA0B;MAClCC,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAE,CAAC,QAAQ;IACtB,CAAC,CAAC;IAEFH,MAAM,CAACI,IAAI,EAAE,CAACC,IAAI,CAAC,MAAM;MACvB,MAAMC,UAAU,GAAG;QACjBC,MAAM,EAAE;UAAEC,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAE,CAAC;QAC1BC,IAAI,EAAE;MACR,CAAC;MACD,MAAMZ,GAAG,GAAG,IAAIa,MAAM,CAACC,IAAI,CAACf,GAAG,CAC7BgB,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAC9BR,UAAU,CACX;MACDP,MAAM,CAACD,GAAG,CAAC;MAEX,IAAIA,GAAG,IAAIiB,SAAS,CAACC,WAAW,EAAE;QAChCD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;UACrD,MAAMC,GAAG,GAAG;YACVX,GAAG,EAAEU,QAAQ,CAACE,MAAM,CAACC,QAAQ;YAC7BZ,GAAG,EAAES,QAAQ,CAACE,MAAM,CAACE;UACvB,CAAC;UACDxB,GAAG,CAACyB,SAAS,CAACJ,GAAG,CAAC;UAClB,IAAIR,MAAM,CAACC,IAAI,CAACY,MAAM,CAAC;YACrBN,QAAQ,EAAEC,GAAG;YACbrB,GAAG,EAAEA;UACP,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,KAAA,CAAAgC,aAAA;IAAKC,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAACC,EAAE,EAAC,KAAK;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrD,CAACrC,GAAG,iBAAIL,KAAA,CAAAgC,aAAA;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,YAAU,CAAM,CAC1B;AAEV,CAAC;AAED,eAAetC,GAAG"},"metadata":{},"sourceType":"module"}