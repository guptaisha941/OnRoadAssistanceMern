{"ast":null,"code":"/**\n * @module ol/geom/LineString\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { douglasPeucker } from './flat/simplify.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /*@__PURE__*/function (SimpleGeometry) {\n  function LineString(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n    } else {\n      this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */coordinates, opt_layout);\n    }\n  }\n  if (SimpleGeometry) LineString.__proto__ = SimpleGeometry;\n  LineString.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  LineString.prototype.constructor = LineString;\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  LineString.prototype.appendCoordinate = function appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @override\n   * @api\n   */\n  LineString.prototype.clone = function clone() {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LineString.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  LineString.prototype.forEachSegment = function forEachSegment$1(callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  LineString.prototype.getCoordinateAtM = function getCoordinateAtM(m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  LineString.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  LineString.prototype.getCoordinateAt = function getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest);\n  };\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  LineString.prototype.getLength = function getLength() {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  LineString.prototype.getFlatMidpoint = function getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  LineString.prototype.getType = function getType() {\n    return GeometryType.LINE_STRING;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  LineString.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  LineString.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return LineString;\n}(SimpleGeometry);\nexport default LineString;","map":{"version":3,"names":["extend","closestSquaredDistanceXY","GeometryLayout","GeometryType","SimpleGeometry","assignClosestPoint","maxSquaredDelta","deflateCoordinates","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","forEach","forEachSegment","douglasPeucker","LineString","coordinates","opt_layout","call","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","appendCoordinate","coordinate","flatCoordinates","slice","changed","clone","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","forEachSegment$1","callback","getCoordinateAtM","m","opt_extrapolate","XYM","XYZM","extrapolate","getCoordinates","getCoordinateAt","fraction","opt_dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","LINE_STRING","intersectsExtent","extent","setLayout"],"sources":["../../../src/ol/geom/LineString.js"],"sourcesContent":["/**\n * @module ol/geom/LineString\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {douglasPeucker} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {GeometryLayout=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n    } else {\n      this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n    }\n\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(\n        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM &&\n        this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0,\n      this.flatCoordinates.length, this.stride, m, extrapolate);\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      fraction, opt_dest);\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.LINE_STRING;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      extent);\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default LineString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}