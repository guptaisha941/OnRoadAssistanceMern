{"ast":null,"code":"/**\n * @module ol/source/TileImage\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { getUid } from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from './UrlTile.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar TileImage = /*@__PURE__*/function (UrlTile) {\n  function TileImage(options) {\n    UrlTile.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n  if (UrlTile) TileImage.__proto__ = UrlTile;\n  TileImage.prototype = Object.create(UrlTile && UrlTile.prototype);\n  TileImage.prototype.constructor = TileImage;\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.canExpireCache = function canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.canExpireCache.call(this);\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.expireCache = function expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      UrlTile.prototype.expireCache.call(this, projection, usedTiles);\n      return;\n    }\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (var id in this.tileCacheForProjection) {\n      var tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getGutterForProjection = function getGutterForProjection(projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  };\n\n  /**\n   * @return {number} Gutter.\n   */\n  TileImage.prototype.getGutter = function getGutter() {\n    return 0;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getOpaque = function getOpaque(projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return UrlTile.prototype.getOpaque.call(this, projection);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getTileGridForProjection = function getTileGridForProjection$1(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileGridForProjection.call(this, projection);\n    }\n    var thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n      return (/** @type {!import(\"../tilegrid/TileGrid.js\").default} */this.tileGridForProjection[projKey]\n      );\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getTileCacheForProjection = function getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\n    }\n    var thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @private\n   */\n  TileImage.prototype.createTile_ = function createTile_(z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE, this.handleTileChange, this);\n    return tile;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {\n    var sourceProjection = /** @type {!import(\"../proj/Projection.js\").default} */this.getProjection();\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile;\n      var tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = /** @type {!import(\"../Tile.js\").default} */cache.get(tileCoordKey);\n      }\n      var key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);\n        newTile.key = key;\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  };\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @protected\n   */\n  TileImage.prototype.getTileInternal = function getTileInternal(z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  };\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  TileImage.prototype.setRenderReprojectionEdges = function setRenderReprojectionEdges(render) {\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (var id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  };\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  TileImage.prototype.setTileGridForProjection = function setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n      if (proj) {\n        var projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n  return TileImage;\n}(UrlTile);\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */imageTile.getImage().src = src;\n}\nexport default TileImage;","map":{"version":3,"names":["ENABLE_RASTER_REPROJECTION","getUid","ImageTile","TileCache","TileState","listen","EventType","equivalent","get","getProjection","ReprojTile","UrlTile","getKey","getKeyZXY","getForProjection","getTileGridForProjection","TileImage","options","call","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","key","attributionsCollapsible","crossOrigin","undefined","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","canExpireCache","prototype","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutterForProjection","getGutter","getOpaque","getTileGridForProjection$1","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","CHANGE","handleTileChange","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","bind","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"sources":["../../../src/ol/source/TileImage.js"],"sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {getUid} from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from './UrlTile.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ?\n        options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass = options.tileClass !== undefined ?\n      options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.canExpireCache();\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      super.expireCache(projection, usedTiles);\n      return;\n    }\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getGutterForProjection(projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOpaque(projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return super.getOpaque(projection);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileGridForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileGridForProjection(projection);\n    }\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n      return (\n        /** @type {!import(\"../tilegrid/TileGrid.js\").default} */ (this.tileGridForProjection[projKey])\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileCacheForProjection(projection);\n    }\n    const thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord, projection);\n    const tileUrl = urlTileCoord ?\n      this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE,\n      this.handleTileChange, this);\n    return tile;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = /** @type {!import(\"../proj/Projection.js\").default} */ (this.getProjection());\n    if (!ENABLE_RASTER_REPROJECTION ||\n        !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = /** @type {!import(\"../Tile.js\").default} */ (cache.get(tileCoordKey));\n      }\n      const key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord =\n            this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const newTile = new ReprojTile(\n          sourceProjection, sourceTileGrid,\n          projection, targetTileGrid,\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\n          this.getGutter(),\n          function(z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this), this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (!ENABLE_RASTER_REPROJECTION ||\n        this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      const proj = getProjection(projection);\n      if (proj) {\n        const projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }\n}\n\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;\n}\n\nexport default TileImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}