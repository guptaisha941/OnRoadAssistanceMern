{"ast":null,"code":"/**\n * @module ol/Object\n */\nimport { getUid } from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport { assign } from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport var ObjectEvent = /*@__PURE__*/function (Event) {\n  function ObjectEvent(type, key, oldValue) {\n    Event.call(this, type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n  if (Event) ObjectEvent.__proto__ = Event;\n  ObjectEvent.prototype = Object.create(Event && Event.prototype);\n  ObjectEvent.prototype.constructor = ObjectEvent;\n  return ObjectEvent;\n}(Event);\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /*@__PURE__*/function (Observable) {\n  function BaseObject(opt_values) {\n    Observable.call(this);\n\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {!Object<string, *>}\n     */\n    this.values_ = {};\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n  if (Observable) BaseObject.__proto__ = Observable;\n  BaseObject.prototype = Object.create(Observable && Observable.prototype);\n  BaseObject.prototype.constructor = BaseObject;\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  BaseObject.prototype.get = function get(key) {\n    var value;\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  };\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  BaseObject.prototype.getKeys = function getKeys() {\n    return Object.keys(this.values_);\n  };\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  BaseObject.prototype.getProperties = function getProperties() {\n    return assign({}, this.values_);\n  };\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  BaseObject.prototype.notify = function notify(key, oldValue) {\n    var eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  };\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.set = function set(key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      var oldValue = this.values_[key];\n      this.values_[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.setProperties = function setProperties(values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.unset = function unset(key, opt_silent) {\n    if (key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  return BaseObject;\n}(Observable);\n\n/**\n * @type {Object<string, string>}\n */\nvar changeEventTypeCache = {};\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ? changeEventTypeCache[key] : changeEventTypeCache[key] = 'change:' + key;\n}\nexport default BaseObject;","map":{"version":3,"names":["getUid","ObjectEventType","Observable","Event","assign","ObjectEvent","type","key","oldValue","call","prototype","constructor","BaseObject","opt_values","values_","undefined","setProperties","get","value","hasOwnProperty","getKeys","Object","keys","getProperties","notify","eventType","getChangeEventType","dispatchEvent","PROPERTYCHANGE","set","opt_silent","values","unset","changeEventTypeCache"],"sources":["../../src/ol/Object.js"],"sourcesContent":["/**\n * @module ol/Object\n */\nimport {getUid} from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport {assign} from './obj.js';\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n\n  /**\n   * @param {Object<string, *>=} opt_values An object with key-value pairs.\n   */\n  constructor(opt_values) {\n    super();\n\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {!Object<string, *>}\n     */\n    this.values_ = {};\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return Object.keys(this.values_);\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return assign({}, this.values_);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  set(key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      const oldValue = this.values_[key];\n      this.values_[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  setProperties(values, opt_silent) {\n    for (const key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n  unset(key, opt_silent) {\n    if (key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\n\n/**\n * @type {Object<string, string>}\n */\nconst changeEventTypeCache = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ?\n    changeEventTypeCache[key] :\n    (changeEventTypeCache[key] = 'change:' + key);\n}\n\n\nexport default BaseObject;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}