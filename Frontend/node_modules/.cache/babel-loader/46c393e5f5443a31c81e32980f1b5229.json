{"ast":null,"code":"import _ol_ from '../index.js';\nimport _ol_math_ from '../math.js';\nimport _ol_proj_Projection_ from '../proj/projection.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nvar _ol_proj_EPSG3857_ = {};\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n *\n * @constructor\n * @extends {ol.proj.Projection}\n * @param {string} code Code.\n * @private\n */\n_ol_proj_EPSG3857_.Projection_ = function (code) {\n  _ol_proj_Projection_.call(this, {\n    code: code,\n    units: _ol_proj_Units_.METERS,\n    extent: _ol_proj_EPSG3857_.EXTENT,\n    global: true,\n    worldExtent: _ol_proj_EPSG3857_.WORLD_EXTENT,\n    getPointResolution: function (resolution, point) {\n      return resolution / _ol_math_.cosh(point[1] / _ol_proj_EPSG3857_.RADIUS);\n    }\n  });\n};\n_ol_.inherits(_ol_proj_EPSG3857_.Projection_, _ol_proj_Projection_);\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n_ol_proj_EPSG3857_.RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\n_ol_proj_EPSG3857_.HALF_SIZE = Math.PI * _ol_proj_EPSG3857_.RADIUS;\n\n/**\n * @const\n * @type {ol.Extent}\n */\n_ol_proj_EPSG3857_.EXTENT = [-_ol_proj_EPSG3857_.HALF_SIZE, -_ol_proj_EPSG3857_.HALF_SIZE, _ol_proj_EPSG3857_.HALF_SIZE, _ol_proj_EPSG3857_.HALF_SIZE];\n\n/**\n * @const\n * @type {ol.Extent}\n */\n_ol_proj_EPSG3857_.WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array.<ol.proj.Projection>}\n */\n_ol_proj_EPSG3857_.PROJECTIONS = [new _ol_proj_EPSG3857_.Projection_('EPSG:3857'), new _ol_proj_EPSG3857_.Projection_('EPSG:102100'), new _ol_proj_EPSG3857_.Projection_('EPSG:102113'), new _ol_proj_EPSG3857_.Projection_('EPSG:900913'), new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG:6.18:3:3857'), new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG::3857'), new _ol_proj_EPSG3857_.Projection_('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n_ol_proj_EPSG3857_.fromEPSG4326 = function (input, opt_output, opt_dimension) {\n  var length = input.length,\n    dimension = opt_dimension > 1 ? opt_dimension : 2,\n    output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = _ol_proj_EPSG3857_.HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = _ol_proj_EPSG3857_.RADIUS * Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n};\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n_ol_proj_EPSG3857_.toEPSG4326 = function (input, opt_output, opt_dimension) {\n  var length = input.length,\n    dimension = opt_dimension > 1 ? opt_dimension : 2,\n    output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / _ol_proj_EPSG3857_.HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / _ol_proj_EPSG3857_.RADIUS)) / Math.PI - 90;\n  }\n  return output;\n};\nexport default _ol_proj_EPSG3857_;","map":{"version":3,"names":["_ol_","_ol_math_","_ol_proj_Projection_","_ol_proj_Units_","_ol_proj_EPSG3857_","Projection_","code","call","units","METERS","extent","EXTENT","global","worldExtent","WORLD_EXTENT","getPointResolution","resolution","point","cosh","RADIUS","inherits","HALF_SIZE","Math","PI","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","Array","halfSize","i","y","log","tan","toEPSG4326","atan","exp"],"sources":["D:/demo_one/react-website-v1/node_modules/ol/proj/epsg3857.js"],"sourcesContent":["import _ol_ from '../index.js';\nimport _ol_math_ from '../math.js';\nimport _ol_proj_Projection_ from '../proj/projection.js';\nimport _ol_proj_Units_ from '../proj/units.js';\nvar _ol_proj_EPSG3857_ = {};\n\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n *\n * @constructor\n * @extends {ol.proj.Projection}\n * @param {string} code Code.\n * @private\n */\n_ol_proj_EPSG3857_.Projection_ = function(code) {\n  _ol_proj_Projection_.call(this, {\n    code: code,\n    units: _ol_proj_Units_.METERS,\n    extent: _ol_proj_EPSG3857_.EXTENT,\n    global: true,\n    worldExtent: _ol_proj_EPSG3857_.WORLD_EXTENT,\n    getPointResolution: function(resolution, point) {\n      return resolution / _ol_math_.cosh(point[1] / _ol_proj_EPSG3857_.RADIUS);\n    }\n  });\n};\n_ol_.inherits(_ol_proj_EPSG3857_.Projection_, _ol_proj_Projection_);\n\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n_ol_proj_EPSG3857_.RADIUS = 6378137;\n\n\n/**\n * @const\n * @type {number}\n */\n_ol_proj_EPSG3857_.HALF_SIZE = Math.PI * _ol_proj_EPSG3857_.RADIUS;\n\n\n/**\n * @const\n * @type {ol.Extent}\n */\n_ol_proj_EPSG3857_.EXTENT = [\n  -_ol_proj_EPSG3857_.HALF_SIZE, -_ol_proj_EPSG3857_.HALF_SIZE,\n  _ol_proj_EPSG3857_.HALF_SIZE, _ol_proj_EPSG3857_.HALF_SIZE\n];\n\n\n/**\n * @const\n * @type {ol.Extent}\n */\n_ol_proj_EPSG3857_.WORLD_EXTENT = [-180, -85, 180, 85];\n\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array.<ol.proj.Projection>}\n */\n_ol_proj_EPSG3857_.PROJECTIONS = [\n  new _ol_proj_EPSG3857_.Projection_('EPSG:3857'),\n  new _ol_proj_EPSG3857_.Projection_('EPSG:102100'),\n  new _ol_proj_EPSG3857_.Projection_('EPSG:102113'),\n  new _ol_proj_EPSG3857_.Projection_('EPSG:900913'),\n  new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n  new _ol_proj_EPSG3857_.Projection_('urn:ogc:def:crs:EPSG::3857'),\n  new _ol_proj_EPSG3857_.Projection_('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n_ol_proj_EPSG3857_.fromEPSG4326 = function(input, opt_output, opt_dimension) {\n  var length = input.length,\n      dimension = opt_dimension > 1 ? opt_dimension : 2,\n      output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = _ol_proj_EPSG3857_.HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = _ol_proj_EPSG3857_.RADIUS *\n        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n};\n\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n_ol_proj_EPSG3857_.toEPSG4326 = function(input, opt_output, opt_dimension) {\n  var length = input.length,\n      dimension = opt_dimension > 1 ? opt_dimension : 2,\n      output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / _ol_proj_EPSG3857_.HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(\n        Math.exp(input[i + 1] / _ol_proj_EPSG3857_.RADIUS)) / Math.PI - 90;\n  }\n  return output;\n};\nexport default _ol_proj_EPSG3857_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}