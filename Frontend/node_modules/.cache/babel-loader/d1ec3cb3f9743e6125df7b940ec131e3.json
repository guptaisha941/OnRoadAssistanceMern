{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\nimport { getUid } from '../util.js';\nimport { asString } from '../color.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = function Fill(opt_options) {\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n  this.color_ = options.color !== undefined ? options.color : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.checksum_ = undefined;\n};\n\n/**\n * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n * @return {Fill} The cloned style.\n * @api\n */\nFill.prototype.clone = function clone() {\n  var color = this.getColor();\n  return new Fill({\n    color: Array.isArray(color) ? color.slice() : color || undefined\n  });\n};\n\n/**\n * Get the fill color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\nFill.prototype.getColor = function getColor() {\n  return this.color_;\n};\n\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\nFill.prototype.setColor = function setColor(color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n\n/**\n * @return {string} The checksum.\n */\nFill.prototype.getChecksum = function getChecksum() {\n  if (this.checksum_ === undefined) {\n    var color = this.color_;\n    if (color) {\n      if (Array.isArray(color) || typeof color == 'string') {\n        this.checksum_ = 'f' + asString( /** @type {import(\"../color.js\").Color|string} */color);\n      } else {\n        this.checksum_ = getUid(this.color_);\n      }\n    } else {\n      this.checksum_ = 'f-';\n    }\n  }\n  return this.checksum_;\n};\nexport default Fill;","map":{"version":3,"names":["getUid","asString","Fill","opt_options","options","color_","color","undefined","checksum_","prototype","clone","getColor","Array","isArray","slice","setColor","getChecksum"],"sources":["../../../src/ol/style/Fill.js"],"sourcesContent":["/**\n * @module ol/style/Fill\n */\nimport {getUid} from '../util.js';\nimport {asString} from '../color.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * @return {string} The checksum.\n   */\n  getChecksum() {\n    if (this.checksum_ === undefined) {\n      const color = this.color_;\n      if (color) {\n        if (Array.isArray(color) || typeof color == 'string') {\n          this.checksum_ = 'f' + asString(/** @type {import(\"../color.js\").Color|string} */ (color));\n        } else {\n          this.checksum_ = getUid(this.color_);\n        }\n      } else {\n        this.checksum_ = 'f-';\n      }\n    }\n\n    return this.checksum_;\n  }\n}\n\nexport default Fill;\n"],"mappings":"AAAA;;;AAGA,SAAQA,MAAM,QAAO,YAAY;AACjC,SAAQC,QAAQ,QAAO,aAAa;;;;;;;;;;;;;;AAgBpC,IAAMC,IAAI,GAIR,SAAAA,IAAWA,CAACC,WAAW,EAAE;EAEzB,IAAQC,OAAO,GAAGD,WAAW,IAAI,EAAE;;EAEnC;;;;EAIA,IAAM,CAACE,MAAM,GAAGD,OAAO,CAACE,KAAK,KAAKC,SAAS,GAAGH,OAAO,CAACE,KAAK,GAAG,IAAI;;EAElE;;;;EAIA,IAAM,CAACE,SAAS,GAAGD,SAAS;AAC9B,CAAE;;AAEF;;;;;AAKAL,IAAA,CAAAO,SAAA,CAAEC,KAAA,YAAAA,MAAA,EAAQ;EACR,IAAQJ,KAAK,GAAG,IAAI,CAACK,QAAQ,EAAE;EAC/B,OAAS,IAAIT,IAAI,CAAC;IAChBI,KAAO,EAAEM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,GAAGA,KAAK,CAACQ,KAAK,EAAE,GAAGR,KAAK,IAAIC;EAC3D,CAAG,CAAC;AACN,CAAE;;AAEF;;;;;AAKAL,IAAA,CAAAO,SAAA,CAAEE,QAAA,YAAAA,SAAA,EAAW;EACX,OAAS,IAAI,CAACN,MAAM;AACtB,CAAE;;AAEF;;;;;;AAMAH,IAAA,CAAAO,SAAA,CAAEM,QAAA,YAAAA,SAAST,KAAK,EAAE;EAChB,IAAM,CAACD,MAAM,GAAGC,KAAK;EACrB,IAAM,CAACE,SAAS,GAAGD,SAAS;AAC9B,CAAE;;AAEF;;;AAGAL,IAAA,CAAAO,SAAA,CAAEO,WAAA,YAAAA,YAAA,EAAc;EACd,IAAM,IAAI,CAACR,SAAS,KAAKD,SAAS,EAAE;IAClC,IAAQD,KAAK,GAAG,IAAI,CAACD,MAAM;IAC3B,IAAMC,KAAK,EAAE;MACX,IAAMM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;QACtD,IAAM,CAACE,SAAS,GAAG,GAAG,GAAGP,QAAQ,mDAAoDK,KAAK,CAAE;MAC9F,CAAG,MAAM;QACP,IAAM,CAACE,SAAS,GAAGR,MAAM,CAAC,IAAI,CAACK,MAAM,CAAC;MACxC;IACF,CAAG,MAAM;MACP,IAAM,CAACG,SAAS,GAAG,IAAI;IACzB;EACF;EAEA,OAAS,IAAI,CAACA,SAAS;AACzB,CAAG;AAGH,eAAeN,IAAI"},"metadata":{},"sourceType":"module"}