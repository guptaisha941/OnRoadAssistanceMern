{"ast":null,"code":"/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { getChangeEventType } from '../Object.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport { listen } from '../events.js';\nimport Event from '../events/Event.js';\nimport { noModifierKeys, always, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport { POINTER_TYPE } from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\n\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = /*@__PURE__*/function (Event) {\n  function DrawEvent(type, feature) {\n    Event.call(this, type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n  if (Event) DrawEvent.__proto__ = Event;\n  DrawEvent.prototype = Object.create(Event && Event.prototype);\n  DrawEvent.prototype.constructor = DrawEvent;\n  return DrawEvent;\n}(Event);\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nvar Draw = /*@__PURE__*/function (PointerInteraction) {\n  function Draw(options) {\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    PointerInteraction.call(this, pointerOptions);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {GeometryType}\n     * @private\n     */\n    this.type_ = /** @type {GeometryType} */options.type;\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints ? options.minPoints : this.mode_ === Mode.POLYGON ? 3 : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, opt_geometry) {\n          var circle = opt_geometry ? /** @type {Circle} */opt_geometry : new Circle([NaN, NaN]);\n          var squaredLength = squaredCoordinateDistance(coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        var Constructor;\n        var mode = this.mode_;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, opt_geometry) {\n          var geometry = opt_geometry;\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n    listen(this, getChangeEventType(InteractionProperty.ACTIVE), this.updateState_, this);\n  }\n  if (PointerInteraction) Draw.__proto__ = PointerInteraction;\n  Draw.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Draw.prototype.constructor = Draw;\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.setMap = function setMap(map) {\n    PointerInteraction.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Draw.prototype.getOverlay = function getOverlay() {\n    return this.overlay_;\n  };\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @override\n   * @api\n   */\n  Draw.prototype.handleEvent = function handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        pass = this.handlePointerMove_(event);\n      } else if ( /** @type {MapBrowserPointerEvent} */event.pointerEvent.pointerType == POINTER_TYPE || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n    return PointerInteraction.prototype.handleEvent.call(this, event) && pass;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.handleDownEvent = function handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserPointerEvent(MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.handleUpEvent = function handleUpEvent(event) {\n    var pass = true;\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n    this.handlePointerMove_(event);\n    var circleMode = this.mode_ === Mode.CIRCLE;\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event);\n      }\n      pass = false;\n    } else if (this.freehand_) {\n      this.finishCoordinate_ = null;\n      this.abortDrawing_();\n    }\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n    return pass;\n  };\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n  Draw.prototype.handlePointerMove_ = function handlePointerMove_(event) {\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n    return true;\n  };\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  Draw.prototype.atFinish_ = function atFinish_(event) {\n    var at = false;\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        var sketchCoords = /** @type {PolyCoordType} */this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        var map = event.map;\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  };\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_(event) {\n    var coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = /** @type {Point} */this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.startDrawing_ = function startDrawing_(event) {\n    var start = event.coordinate;\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    var geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.modifyDrawing_ = function modifyDrawing_(event) {\n    var coordinate = event.coordinate;\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */this.sketchFeature_.getGeometry();\n    var coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_( /** @type {!LineCoordType} */this.sketchCoords_, geometry);\n    if (this.sketchPoint_) {\n      var sketchPointGeom = /** @type {Point} */this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n    var sketchLineGeom;\n    if (geometry.getType() == GeometryType.POLYGON && this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      var ring = /** @type {Polygon} */geometry.getLinearRing(0);\n      sketchLineGeom = /** @type {LineString} */this.sketchLine_.getGeometry();\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = /** @type {LineString} */this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  };\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.addToDrawing_ = function addToDrawing_(event) {\n    var coordinate = event.coordinate;\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */this.sketchFeature_.getGeometry();\n    var done;\n    var coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  Draw.prototype.removeLastPoint = function removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */this.sketchFeature_.getGeometry();\n    var coordinates;\n    /** @type {LineString} */\n    var sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = /** @type {LineString} */this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n    this.updateSketchFeatures_();\n  };\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  Draw.prototype.finishDrawing = function finishDrawing() {\n    var sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    var coordinates = this.sketchCoords_;\n    var geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */sketchFeature.getGeometry();\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */coordinates]));\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n  Draw.prototype.abortDrawing_ = function abortDrawing_() {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      /** @type {VectorSource} */\n      this.overlay_.getSource().clear(true);\n    }\n    return sketchFeature;\n  };\n\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!Feature} feature Feature to be extended.\n   * @api\n   */\n  Draw.prototype.extend = function extend(feature) {\n    var geometry = feature.getGeometry();\n    var lineString = /** @type {LineString} */geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_() {\n    var sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    var overlaySource = /** @type {VectorSource} */this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n\n  /**\n   * @private\n   */\n  Draw.prototype.updateState_ = function updateState_() {\n    var map = this.getMap();\n    var active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n    this.overlay_.setMap(active ? map : null);\n  };\n  return Draw;\n}(PointerInteraction);\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry) {\n    var center = /** @type {LineCoordType} */coordinates[0];\n    var end = /** @type {LineCoordType} */coordinates[1];\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ? /** @type {Polygon} */opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n    if (!opt_angle) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, opt_geometry) {\n    var extent = boundingExtent( /** @type {LineCoordType} */coordinates);\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  var mode;\n  if (type === GeometryType.POINT || type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING || type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON || type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return (/** @type {!Mode} */mode\n  );\n}\nexport default Draw;","map":{"version":3,"names":["EventType","Feature","MapBrowserEventType","MapBrowserPointerEvent","getChangeEventType","squaredDistance","squaredCoordinateDistance","listen","Event","noModifierKeys","always","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","TRUE","FALSE","Circle","GeometryType","LineString","MultiLineString","MultiPoint","MultiPolygon","POINTER_TYPE","Point","Polygon","fromCircle","makeRegular","PointerInteraction","InteractionProperty","VectorLayer","VectorSource","createEditingStyle","Mode","POINT","LINE_STRING","POLYGON","CIRCLE","DrawEventType","DRAWSTART","DRAWEND","DrawEvent","type","feature","call","prototype","constructor","Draw","options","pointerOptions","stopDown","shouldHandle_","downPx_","downTimeout_","lastDragTime_","freehand_","source_","source","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryFunction","coordinates","opt_geometry","circle","NaN","squaredLength","setCenterAndRadius","Math","sqrt","Constructor","mode","geometry","length","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","ACTIVE","updateState_","setMap","map","getOverlay","handleEvent","event","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","pixel","clearTimeout","addToDrawing_","POINTERDOWN","handlePointerMove_","pointerEvent","pointerType","DBLCLICK","handleDownEvent","startDrawing_","setTimeout","frameState","bind","handleUpEvent","circleMode","finishDrawing","atFinish_","abortDrawing_","stopPropagation","downPx","clickPx","dx","dy","modifyDrawing_","createOrUpdateSketchPoint_","at","potentiallyDone","potentiallyFinishCoordinates","sketchCoords","i","ii","finishCoordinate","finishPixel","getPixelFromCoordinate","coordinate","slice","updateSketchFeatures_","sketchPointGeom","getGeometry","start","setGeometryName","setGeometry","dispatchEvent","last","sketchLineGeom","getType","ring","getLinearRing","getFlatCoordinates","getLayout","setFlatCoordinates","changed","done","pop","push","removeLastPoint","splice","sketchFeature","getCoordinates","MULTI_POINT","MULTI_LINE_STRING","MULTI_POLYGON","addFeature","getSource","clear","extend","lineString","sketchFeatures","overlaySource","addFeatures","getMap","active","getActive","styles","resolution","createRegularPolygon","opt_sides","opt_angle","center","end","radius","angle","x","y","atan","PI","createBox","extent","boxCoordinates"],"sources":["../../../src/ol/interaction/Draw.js"],"sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {getChangeEventType} from '../Object.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport {noModifierKeys, always, shiftKeyOnly} from '../events/condition.js';\nimport {boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../extent.js';\nimport {TRUE, FALSE} from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport {POINTER_TYPE} from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nconst Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nclass DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {GeometryType}\n     * @private\n     */\n    this.type_ = /** @type {GeometryType} */ (options.type);\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints ?\n      options.minPoints :\n      (this.mode_ === Mode.POLYGON ? 3 : 2);\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          const circle = opt_geometry ? /** @type {Circle} */ (opt_geometry) :\n            new Circle([NaN, NaN]);\n          const squaredLength = squaredCoordinateDistance(\n            coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        let Constructor;\n        const mode = this.mode_;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          let geometry = opt_geometry;\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance ?\n      options.clickTolerance * options.clickTolerance : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ?\n        options.freehandCondition : shiftKeyOnly;\n    }\n\n    listen(this,\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.updateState_, this);\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @override\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ &&\n        event.type === MapBrowserEventType.POINTERDRAG &&\n        this.sketchFeature_ !== null) {\n      this.addToDrawing_(event);\n      pass = false;\n    } else if (this.freehand_ &&\n        event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        pass = this.handlePointerMove_(event);\n      } else if (/** @type {MapBrowserPointerEvent} */ (event).pointerEvent.pointerType == POINTER_TYPE ||\n          (event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined)) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function() {\n        this.handlePointerMove_(new MapBrowserPointerEvent(\n          MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n\n    this.handlePointerMove_(event);\n\n    const circleMode = this.mode_ === Mode.CIRCLE;\n\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event);\n      }\n      pass = false;\n    } else if (this.freehand_) {\n      this.finishCoordinate_ = null;\n      this.abortDrawing_();\n    }\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n  handlePointerMove_(event) {\n    if (this.downPx_ &&\n        ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ?\n        squaredDistance > this.squaredClickTolerance_ :\n        squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n    return true;\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(event) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        const map = event.map;\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const pixel = event.pixel;\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  createOrUpdateSketchPoint_(event) {\n    const coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  startDrawing_(event) {\n    const start = event.coordinate;\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(\n        new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  modifyDrawing_(event) {\n    let coordinate = event.coordinate;\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    let coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(/** @type {!LineCoordType} */ (this.sketchCoords_), geometry);\n    if (this.sketchPoint_) {\n      const sketchPointGeom = /** @type {Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n    let sketchLineGeom;\n    if (geometry.getType() == GeometryType.POLYGON &&\n        this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      const ring = /** @type {Polygon} */ (geometry).getLinearRing(0);\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(\n          ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  addToDrawing_(event) {\n    const coordinate = event.coordinate;\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    let done;\n    let coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (this.sketchFeature_.getGeometry());\n    let coordinates;\n    /** @type {LineString} */\n    let sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = /** @type {LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (sketchFeature.getGeometry());\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */(coordinates)]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */(coordinates)]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */(coordinates)]));\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      /** @type {VectorSource} */ (this.overlay_.getSource()).clear(true);\n    }\n    return sketchFeature;\n  }\n\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!Feature} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = /** @type {LineString} */ (geometry);\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = /** @type {VectorSource} */ (this.overlay_.getSource());\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function(feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function(coordinates, opt_geometry) {\n    const center = /** @type {LineCoordType} */ (coordinates)[0];\n    const end = /** @type {LineCoordType} */ (coordinates)[1];\n    const radius = Math.sqrt(\n      squaredCoordinateDistance(center, end));\n    const geometry = opt_geometry ? /** @type {Polygon} */ (opt_geometry) :\n      fromCircle(new Circle(center), opt_sides);\n    let angle = opt_angle;\n    if (!opt_angle) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return (\n    function(coordinates, opt_geometry) {\n      const extent = boundingExtent(/** @type {LineCoordType} */ (coordinates));\n      const boxCoordinates = [[\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent)\n      ]];\n      let geometry = opt_geometry;\n      if (geometry) {\n        geometry.setCoordinates(boxCoordinates);\n      } else {\n        geometry = new Polygon(boxCoordinates);\n      }\n      return geometry;\n    }\n  );\n}\n\n\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {GeometryType} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  let mode;\n  if (type === GeometryType.POINT ||\n      type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING ||\n      type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON ||\n      type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return (\n    /** @type {!Mode} */ (mode)\n  );\n}\n\n\nexport default Draw;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}