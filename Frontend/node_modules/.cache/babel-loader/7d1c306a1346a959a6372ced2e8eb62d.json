{"ast":null,"code":"/**\n * @module ol/reproj/Triangulation\n */\nimport { boundingExtent, createEmpty, extendCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, getWidth, intersects } from '../extent.js';\nimport { modulo } from '../math.js';\nimport { getTransform } from '../proj.js';\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nvar MAX_SUBDIVISION = 10;\n\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nvar MAX_TRIANGLE_WIDTH = 0.25;\n\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nvar Triangulation = function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold) {\n  /**\n   * @type {import(\"../proj/Projection.js\").default}\n   * @private\n   */\n  this.sourceProj_ = sourceProj;\n\n  /**\n   * @type {import(\"../proj/Projection.js\").default}\n   * @private\n   */\n  this.targetProj_ = targetProj;\n\n  /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n  var transformInvCache = {};\n  var transformInv = getTransform(this.targetProj_, this.sourceProj_);\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n   * @private\n   */\n  this.transformInv_ = function (c) {\n    var key = c[0] + '/' + c[1];\n    if (!transformInvCache[key]) {\n      transformInvCache[key] = transformInv(c);\n    }\n    return transformInvCache[key];\n  };\n\n  /**\n   * @type {import(\"../extent.js\").Extent}\n   * @private\n   */\n  this.maxSourceExtent_ = maxSourceExtent;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n\n  /**\n   * @type {Array<Triangle>}\n   * @private\n   */\n  this.triangles_ = [];\n\n  /**\n   * Indicates that the triangulation crosses edge of the source projection.\n   * @type {boolean}\n   * @private\n   */\n  this.wrapsXInSource_ = false;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());\n\n  /**\n   * @type {?number}\n   * @private\n   */\n  this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? getWidth(this.sourceProj_.getExtent()) : null;\n\n  /**\n   * @type {?number}\n   * @private\n   */\n  this.targetWorldWidth_ = this.targetProj_.getExtent() ? getWidth(this.targetProj_.getExtent()) : null;\n  var destinationTopLeft = getTopLeft(targetExtent);\n  var destinationTopRight = getTopRight(targetExtent);\n  var destinationBottomRight = getBottomRight(targetExtent);\n  var destinationBottomLeft = getBottomLeft(targetExtent);\n  var sourceTopLeft = this.transformInv_(destinationTopLeft);\n  var sourceTopRight = this.transformInv_(destinationTopRight);\n  var sourceBottomRight = this.transformInv_(destinationBottomRight);\n  var sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n  this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, MAX_SUBDIVISION);\n  if (this.wrapsXInSource_) {\n    var leftBound = Infinity;\n    this.triangles_.forEach(function (triangle, i, arr) {\n      leftBound = Math.min(leftBound, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n    });\n\n    // Shift triangles to be as close to `leftBound` as possible\n    // (if the distance is more than `worldWidth / 2` it can be closer.\n    this.triangles_.forEach(function (triangle) {\n      if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {\n        var newTriangle = [[triangle.source[0][0], triangle.source[0][1]], [triangle.source[1][0], triangle.source[1][1]], [triangle.source[2][0], triangle.source[2][1]]];\n        if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\n          newTriangle[0][0] -= this.sourceWorldWidth_;\n        }\n        if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\n          newTriangle[1][0] -= this.sourceWorldWidth_;\n        }\n        if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\n          newTriangle[2][0] -= this.sourceWorldWidth_;\n        }\n\n        // Rarely (if the extent contains both the dateline and prime meridian)\n        // the shift can in turn break some triangles.\n        // Detect this here and don't shift in such cases.\n        var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n        var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n        if (maxX - minX < this.sourceWorldWidth_ / 2) {\n          triangle.source = newTriangle;\n        }\n      }\n    }.bind(this));\n  }\n  transformInvCache = {};\n};\n\n/**\n * Adds triangle to the triangulation.\n * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n * @private\n */\nTriangulation.prototype.addTriangle_ = function addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n  this.triangles_.push({\n    source: [aSrc, bSrc, cSrc],\n    target: [a, b, c]\n  });\n};\n\n/**\n * Adds quad (points in clock-wise order) to the triangulation\n * (and reprojects the vertices) if valid.\n * Performs quad subdivision if needed to increase precision.\n *\n * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n * @private\n */\nTriangulation.prototype.addQuad_ = function addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n  var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n  var sourceCoverageX = this.sourceWorldWidth_ ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n  var sourceWorldWidth = /** @type {number} */this.sourceWorldWidth_;\n\n  // when the quad is wrapped in the source projection\n  // it covers most of the projection extent, but not fully\n  var wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;\n  var needsSubdivision = false;\n  if (maxSubdivision > 0) {\n    if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n      var targetQuadExtent = boundingExtent([a, b, c, d]);\n      var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;\n      needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n    }\n    if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n      needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n    }\n  }\n  if (!needsSubdivision && this.maxSourceExtent_) {\n    if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n      // whole quad outside source projection extent -> ignore\n      return;\n    }\n  }\n  if (!needsSubdivision) {\n    if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n      if (maxSubdivision > 0) {\n        needsSubdivision = true;\n      } else {\n        return;\n      }\n    }\n  }\n  if (maxSubdivision > 0) {\n    if (!needsSubdivision) {\n      var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n      var centerSrc = this.transformInv_(center);\n      var dx;\n      if (wrapsX) {\n        var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) + modulo(cSrc[0], sourceWorldWidth)) / 2;\n        dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n      } else {\n        dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n      }\n      var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n      var centerSrcErrorSquared = dx * dx + dy * dy;\n      needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n    }\n    if (needsSubdivision) {\n      if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n        // split horizontally (top & bottom)\n        var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n        var bcSrc = this.transformInv_(bc);\n        var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n        var daSrc = this.transformInv_(da);\n        this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n        this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n      } else {\n        // split vertically (left & right)\n        var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n        var abSrc = this.transformInv_(ab);\n        var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n        var cdSrc = this.transformInv_(cd);\n        this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n        this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n      }\n      return;\n    }\n  }\n  if (wrapsX) {\n    if (!this.canWrapXInSource_) {\n      return;\n    }\n    this.wrapsXInSource_ = true;\n  }\n  this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n  this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);\n};\n\n/**\n * Calculates extent of the 'source' coordinates from all the triangles.\n *\n * @return {import(\"../extent.js\").Extent} Calculated extent.\n */\nTriangulation.prototype.calculateSourceExtent = function calculateSourceExtent() {\n  var extent = createEmpty();\n  this.triangles_.forEach(function (triangle, i, arr) {\n    var src = triangle.source;\n    extendCoordinate(extent, src[0]);\n    extendCoordinate(extent, src[1]);\n    extendCoordinate(extent, src[2]);\n  });\n  return extent;\n};\n\n/**\n * @return {Array<Triangle>} Array of the calculated triangles.\n */\nTriangulation.prototype.getTriangles = function getTriangles() {\n  return this.triangles_;\n};\nexport default Triangulation;","map":{"version":3,"names":["boundingExtent","createEmpty","extendCoordinate","getBottomLeft","getBottomRight","getTopLeft","getTopRight","getWidth","intersects","modulo","getTransform","MAX_SUBDIVISION","MAX_TRIANGLE_WIDTH","Triangulation","sourceProj","targetProj","targetExtent","maxSourceExtent","errorThreshold","sourceProj_","targetProj_","transformInvCache","transformInv","transformInv_","c","key","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","canWrapX","getExtent","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","addQuad_","leftBound","Infinity","forEach","triangle","i","arr","Math","min","source","max","newTriangle","minX","maxX","bind","prototype","addTriangle_","a","b","aSrc","bSrc","cSrc","push","target","d","dSrc","maxSubdivision","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","isGlobal","targetQuadExtent","targetCoverageX","isFinite","center","centerSrc","dx","centerSrcEstimX","dy","centerSrcErrorSquared","abs","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","calculateSourceExtent","extent","src","getTriangles"],"sources":["../../../src/ol/reproj/Triangulation.js"],"sourcesContent":["/**\n * @module ol/reproj/Triangulation\n */\nimport {boundingExtent, createEmpty, extendCoordinate, getBottomLeft, getBottomRight,\n  getTopLeft, getTopRight, getWidth, intersects} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {getTransform} from '../proj.js';\n\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target\n */\n\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nconst MAX_SUBDIVISION = 10;\n\n\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nconst MAX_TRIANGLE_WIDTH = 0.25;\n\n\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nclass Triangulation {\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   */\n  constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold) {\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.targetProj_ = targetProj;\n\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n    let transformInvCache = {};\n    const transformInv = getTransform(this.targetProj_, this.sourceProj_);\n\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n    this.transformInv_ = function(c) {\n      const key = c[0] + '/' + c[1];\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n      return transformInvCache[key];\n    };\n\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n    this.triangles_ = [];\n\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n    this.wrapsXInSource_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.canWrapXInSource_ = this.sourceProj_.canWrapX() &&\n        !!maxSourceExtent &&\n        !!this.sourceProj_.getExtent() &&\n        (getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent()));\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent() ?\n      getWidth(this.sourceProj_.getExtent()) : null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.targetWorldWidth_ = this.targetProj_.getExtent() ?\n      getWidth(this.targetProj_.getExtent()) : null;\n\n    const destinationTopLeft = getTopLeft(targetExtent);\n    const destinationTopRight = getTopRight(targetExtent);\n    const destinationBottomRight = getBottomRight(targetExtent);\n    const destinationBottomLeft = getBottomLeft(targetExtent);\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\n    const sourceTopRight = this.transformInv_(destinationTopRight);\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n\n    this.addQuad_(\n      destinationTopLeft, destinationTopRight,\n      destinationBottomRight, destinationBottomLeft,\n      sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft,\n      MAX_SUBDIVISION);\n\n    if (this.wrapsXInSource_) {\n      let leftBound = Infinity;\n      this.triangles_.forEach(function(triangle, i, arr) {\n        leftBound = Math.min(leftBound,\n          triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n      });\n\n      // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n      this.triangles_.forEach(function(triangle) {\n        if (Math.max(triangle.source[0][0], triangle.source[1][0],\n          triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {\n          const newTriangle = [[triangle.source[0][0], triangle.source[0][1]],\n            [triangle.source[1][0], triangle.source[1][1]],\n            [triangle.source[2][0], triangle.source[2][1]]];\n          if ((newTriangle[0][0] - leftBound) > this.sourceWorldWidth_ / 2) {\n            newTriangle[0][0] -= this.sourceWorldWidth_;\n          }\n          if ((newTriangle[1][0] - leftBound) > this.sourceWorldWidth_ / 2) {\n            newTriangle[1][0] -= this.sourceWorldWidth_;\n          }\n          if ((newTriangle[2][0] - leftBound) > this.sourceWorldWidth_ / 2) {\n            newTriangle[2][0] -= this.sourceWorldWidth_;\n          }\n\n          // Rarely (if the extent contains both the dateline and prime meridian)\n          // the shift can in turn break some triangles.\n          // Detect this here and don't shift in such cases.\n          const minX = Math.min(\n            newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n          const maxX = Math.max(\n            newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n          if ((maxX - minX) < this.sourceWorldWidth_ / 2) {\n            triangle.source = newTriangle;\n          }\n        }\n      }.bind(this));\n    }\n\n    transformInvCache = {};\n  }\n\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c]\n    });\n  }\n\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    const sourceCoverageX = this.sourceWorldWidth_ ?\n      getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\n\n    // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n    const wrapsX = this.sourceProj_.canWrapX() &&\n                 sourceCoverageX > 0.5 && sourceCoverageX < 1;\n\n    let needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\n        const targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH ||\n          needsSubdivision;\n      }\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH ||\n            needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n        // whole quad outside source projection extent -> ignore\n        return;\n      }\n    }\n\n    if (!needsSubdivision) {\n      if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ||\n          !isFinite(bSrc[0]) || !isFinite(bSrc[1]) ||\n          !isFinite(cSrc[0]) || !isFinite(cSrc[1]) ||\n          !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          return;\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        const centerSrc = this.transformInv_(center);\n\n        let dx;\n        if (wrapsX) {\n          const centerSrcEstimX =\n              (modulo(aSrc[0], sourceWorldWidth) +\n               modulo(cSrc[0], sourceWorldWidth)) / 2;\n          dx = centerSrcEstimX -\n              modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        const centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          const bcSrc = this.transformInv_(bc);\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          const daSrc = this.transformInv_(da);\n\n          this.addQuad_(\n            a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n          this.addQuad_(\n            da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n        } else {\n          // split vertically (left & right)\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          const abSrc = this.transformInv_(ab);\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          const cdSrc = this.transformInv_(cd);\n\n          this.addQuad_(\n            a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n          this.addQuad_(\n            ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n        }\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n      this.wrapsXInSource_ = true;\n    }\n\n    this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);\n  }\n\n  /**\n   * Calculates extent of the 'source' coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n  calculateSourceExtent() {\n    const extent = createEmpty();\n\n    this.triangles_.forEach(function(triangle, i, arr) {\n      const src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n\n    return extent;\n  }\n\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n  getTriangles() {\n    return this.triangles_;\n  }\n}\n\nexport default Triangulation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}