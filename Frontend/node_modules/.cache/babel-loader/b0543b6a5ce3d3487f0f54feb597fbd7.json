{"ast":null,"code":"/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement] Text placement.\n * @property {number} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = function Text(opt_options) {\n  var options = opt_options || {};\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.font_ = options.font;\n\n  /**\n  * @private\n  * @type {number|undefined}\n  */\n  this.rotation_ = options.rotation;\n\n  /**\n  * @private\n  * @type {boolean|undefined}\n  */\n  this.rotateWithView_ = options.rotateWithView;\n\n  /**\n  * @private\n  * @type {number|undefined}\n  */\n  this.scale_ = options.scale;\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.text_ = options.text;\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.textAlign_ = options.textAlign;\n\n  /**\n  * @private\n  * @type {string|undefined}\n  */\n  this.textBaseline_ = options.textBaseline;\n\n  /**\n  * @private\n  * @type {import(\"./Fill.js\").default}\n  */\n  this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n    color: DEFAULT_FILL_COLOR\n  });\n\n  /**\n  * @private\n  * @type {number}\n  */\n  this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n  /**\n  * @private\n  * @type {import(\"./TextPlacement.js\").default|string}\n  */\n  this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n\n  /**\n  * @private\n  * @type {boolean}\n  */\n  this.overflow_ = !!options.overflow;\n\n  /**\n  * @private\n  * @type {import(\"./Stroke.js\").default}\n  */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n  * @private\n  * @type {number}\n  */\n  this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n  /**\n  * @private\n  * @type {number}\n  */\n  this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n  /**\n  * @private\n  * @type {import(\"./Fill.js\").default}\n  */\n  this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n\n  /**\n  * @private\n  * @type {import(\"./Stroke.js\").default}\n  */\n  this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n\n  /**\n  * @private\n  * @type {Array<number>}\n  */\n  this.padding_ = options.padding === undefined ? null : options.padding;\n};\n\n/**\n* Clones the style.\n* @return {Text} The cloned style.\n* @api\n*/\nText.prototype.clone = function clone() {\n  return new Text({\n    font: this.getFont(),\n    placement: this.getPlacement(),\n    maxAngle: this.getMaxAngle(),\n    overflow: this.getOverflow(),\n    rotation: this.getRotation(),\n    rotateWithView: this.getRotateWithView(),\n    scale: this.getScale(),\n    text: this.getText(),\n    textAlign: this.getTextAlign(),\n    textBaseline: this.getTextBaseline(),\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    offsetX: this.getOffsetX(),\n    offsetY: this.getOffsetY(),\n    backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n    backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined\n  });\n};\n\n/**\n* Get the `overflow` configuration.\n* @return {boolean} Let text overflow the length of the path they follow.\n* @api\n*/\nText.prototype.getOverflow = function getOverflow() {\n  return this.overflow_;\n};\n\n/**\n* Get the font name.\n* @return {string|undefined} Font.\n* @api\n*/\nText.prototype.getFont = function getFont() {\n  return this.font_;\n};\n\n/**\n* Get the maximum angle between adjacent characters.\n* @return {number} Angle in radians.\n* @api\n*/\nText.prototype.getMaxAngle = function getMaxAngle() {\n  return this.maxAngle_;\n};\n\n/**\n* Get the label placement.\n* @return {import(\"./TextPlacement.js\").default|string} Text placement.\n* @api\n*/\nText.prototype.getPlacement = function getPlacement() {\n  return this.placement_;\n};\n\n/**\n* Get the x-offset for the text.\n* @return {number} Horizontal text offset.\n* @api\n*/\nText.prototype.getOffsetX = function getOffsetX() {\n  return this.offsetX_;\n};\n\n/**\n* Get the y-offset for the text.\n* @return {number} Vertical text offset.\n* @api\n*/\nText.prototype.getOffsetY = function getOffsetY() {\n  return this.offsetY_;\n};\n\n/**\n* Get the fill style for the text.\n* @return {import(\"./Fill.js\").default} Fill style.\n* @api\n*/\nText.prototype.getFill = function getFill() {\n  return this.fill_;\n};\n\n/**\n* Determine whether the text rotates with the map.\n* @return {boolean|undefined} Rotate with map.\n* @api\n*/\nText.prototype.getRotateWithView = function getRotateWithView() {\n  return this.rotateWithView_;\n};\n\n/**\n* Get the text rotation.\n* @return {number|undefined} Rotation.\n* @api\n*/\nText.prototype.getRotation = function getRotation() {\n  return this.rotation_;\n};\n\n/**\n* Get the text scale.\n* @return {number|undefined} Scale.\n* @api\n*/\nText.prototype.getScale = function getScale() {\n  return this.scale_;\n};\n\n/**\n* Get the stroke style for the text.\n* @return {import(\"./Stroke.js\").default} Stroke style.\n* @api\n*/\nText.prototype.getStroke = function getStroke() {\n  return this.stroke_;\n};\n\n/**\n* Get the text to be rendered.\n* @return {string|undefined} Text.\n* @api\n*/\nText.prototype.getText = function getText() {\n  return this.text_;\n};\n\n/**\n* Get the text alignment.\n* @return {string|undefined} Text align.\n* @api\n*/\nText.prototype.getTextAlign = function getTextAlign() {\n  return this.textAlign_;\n};\n\n/**\n* Get the text baseline.\n* @return {string|undefined} Text baseline.\n* @api\n*/\nText.prototype.getTextBaseline = function getTextBaseline() {\n  return this.textBaseline_;\n};\n\n/**\n* Get the background fill style for the text.\n* @return {import(\"./Fill.js\").default} Fill style.\n* @api\n*/\nText.prototype.getBackgroundFill = function getBackgroundFill() {\n  return this.backgroundFill_;\n};\n\n/**\n* Get the background stroke style for the text.\n* @return {import(\"./Stroke.js\").default} Stroke style.\n* @api\n*/\nText.prototype.getBackgroundStroke = function getBackgroundStroke() {\n  return this.backgroundStroke_;\n};\n\n/**\n* Get the padding for the text.\n* @return {Array<number>} Padding.\n* @api\n*/\nText.prototype.getPadding = function getPadding() {\n  return this.padding_;\n};\n\n/**\n* Set the `overflow` property.\n*\n* @param {boolean} overflow Let text overflow the path that it follows.\n* @api\n*/\nText.prototype.setOverflow = function setOverflow(overflow) {\n  this.overflow_ = overflow;\n};\n\n/**\n* Set the font.\n*\n* @param {string|undefined} font Font.\n* @api\n*/\nText.prototype.setFont = function setFont(font) {\n  this.font_ = font;\n};\n\n/**\n* Set the maximum angle between adjacent characters.\n*\n* @param {number} maxAngle Angle in radians.\n* @api\n*/\nText.prototype.setMaxAngle = function setMaxAngle(maxAngle) {\n  this.maxAngle_ = maxAngle;\n};\n\n/**\n* Set the x offset.\n*\n* @param {number} offsetX Horizontal text offset.\n* @api\n*/\nText.prototype.setOffsetX = function setOffsetX(offsetX) {\n  this.offsetX_ = offsetX;\n};\n\n/**\n* Set the y offset.\n*\n* @param {number} offsetY Vertical text offset.\n* @api\n*/\nText.prototype.setOffsetY = function setOffsetY(offsetY) {\n  this.offsetY_ = offsetY;\n};\n\n/**\n* Set the text placement.\n*\n* @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n* @api\n*/\nText.prototype.setPlacement = function setPlacement(placement) {\n  this.placement_ = placement;\n};\n\n/**\n* Set the fill.\n*\n* @param {import(\"./Fill.js\").default} fill Fill style.\n* @api\n*/\nText.prototype.setFill = function setFill(fill) {\n  this.fill_ = fill;\n};\n\n/**\n* Set the rotation.\n*\n* @param {number|undefined} rotation Rotation.\n* @api\n*/\nText.prototype.setRotation = function setRotation(rotation) {\n  this.rotation_ = rotation;\n};\n\n/**\n* Set the scale.\n*\n* @param {number|undefined} scale Scale.\n* @api\n*/\nText.prototype.setScale = function setScale(scale) {\n  this.scale_ = scale;\n};\n\n/**\n* Set the stroke.\n*\n* @param {import(\"./Stroke.js\").default} stroke Stroke style.\n* @api\n*/\nText.prototype.setStroke = function setStroke(stroke) {\n  this.stroke_ = stroke;\n};\n\n/**\n* Set the text.\n*\n* @param {string|undefined} text Text.\n* @api\n*/\nText.prototype.setText = function setText(text) {\n  this.text_ = text;\n};\n\n/**\n* Set the text alignment.\n*\n* @param {string|undefined} textAlign Text align.\n* @api\n*/\nText.prototype.setTextAlign = function setTextAlign(textAlign) {\n  this.textAlign_ = textAlign;\n};\n\n/**\n* Set the text baseline.\n*\n* @param {string|undefined} textBaseline Text baseline.\n* @api\n*/\nText.prototype.setTextBaseline = function setTextBaseline(textBaseline) {\n  this.textBaseline_ = textBaseline;\n};\n\n/**\n* Set the background fill.\n*\n* @param {import(\"./Fill.js\").default} fill Fill style.\n* @api\n*/\nText.prototype.setBackgroundFill = function setBackgroundFill(fill) {\n  this.backgroundFill_ = fill;\n};\n\n/**\n* Set the background stroke.\n*\n* @param {import(\"./Stroke.js\").default} stroke Stroke style.\n* @api\n*/\nText.prototype.setBackgroundStroke = function setBackgroundStroke(stroke) {\n  this.backgroundStroke_ = stroke;\n};\n\n/**\n* Set the padding (`[top, right, bottom, left]`).\n*\n* @param {!Array<number>} padding Padding.\n* @api\n*/\nText.prototype.setPadding = function setPadding(padding) {\n  this.padding_ = padding;\n};\nexport default Text;","map":{"version":3,"names":["Fill","TextPlacement","DEFAULT_FILL_COLOR","Text","opt_options","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","text_","text","textAlign_","textAlign","textBaseline_","textBaseline","fill_","fill","undefined","color","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","prototype","clone","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","getScale","getText","getTextAlign","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"sources":["../../../src/ol/style/Text.js"],"sourcesContent":["/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\n\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement] Text placement.\n * @property {number} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nclass Text {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n    * @private\n    * @type {string|undefined}\n    */\n    this.font_ = options.font;\n\n    /**\n    * @private\n    * @type {number|undefined}\n    */\n    this.rotation_ = options.rotation;\n\n    /**\n    * @private\n    * @type {boolean|undefined}\n    */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n    * @private\n    * @type {number|undefined}\n    */\n    this.scale_ = options.scale;\n\n    /**\n    * @private\n    * @type {string|undefined}\n    */\n    this.text_ = options.text;\n\n    /**\n    * @private\n    * @type {string|undefined}\n    */\n    this.textAlign_ = options.textAlign;\n\n    /**\n    * @private\n    * @type {string|undefined}\n    */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n    * @private\n    * @type {import(\"./Fill.js\").default}\n    */\n    this.fill_ = options.fill !== undefined ? options.fill :\n      new Fill({color: DEFAULT_FILL_COLOR});\n\n    /**\n    * @private\n    * @type {number}\n    */\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n    * @private\n    * @type {import(\"./TextPlacement.js\").default|string}\n    */\n    this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n\n    /**\n    * @private\n    * @type {boolean}\n    */\n    this.overflow_ = !!options.overflow;\n\n    /**\n    * @private\n    * @type {import(\"./Stroke.js\").default}\n    */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n    * @private\n    * @type {number}\n    */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n    * @private\n    * @type {number}\n    */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n    * @private\n    * @type {import(\"./Fill.js\").default}\n    */\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n\n    /**\n    * @private\n    * @type {import(\"./Stroke.js\").default}\n    */\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n\n    /**\n    * @private\n    * @type {Array<number>}\n    */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n  * Clones the style.\n  * @return {Text} The cloned style.\n  * @api\n  */\n  clone() {\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: this.getScale(),\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined\n    });\n  }\n\n  /**\n  * Get the `overflow` configuration.\n  * @return {boolean} Let text overflow the length of the path they follow.\n  * @api\n  */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\n  * Get the font name.\n  * @return {string|undefined} Font.\n  * @api\n  */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\n  * Get the maximum angle between adjacent characters.\n  * @return {number} Angle in radians.\n  * @api\n  */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\n  * Get the label placement.\n  * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n  * @api\n  */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\n  * Get the x-offset for the text.\n  * @return {number} Horizontal text offset.\n  * @api\n  */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\n  * Get the y-offset for the text.\n  * @return {number} Vertical text offset.\n  * @api\n  */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\n  * Get the fill style for the text.\n  * @return {import(\"./Fill.js\").default} Fill style.\n  * @api\n  */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n  * Determine whether the text rotates with the map.\n  * @return {boolean|undefined} Rotate with map.\n  * @api\n  */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n  * Get the text rotation.\n  * @return {number|undefined} Rotation.\n  * @api\n  */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n  * Get the text scale.\n  * @return {number|undefined} Scale.\n  * @api\n  */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n  * Get the stroke style for the text.\n  * @return {import(\"./Stroke.js\").default} Stroke style.\n  * @api\n  */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n  * Get the text to be rendered.\n  * @return {string|undefined} Text.\n  * @api\n  */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n  * Get the text alignment.\n  * @return {string|undefined} Text align.\n  * @api\n  */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\n  * Get the text baseline.\n  * @return {string|undefined} Text baseline.\n  * @api\n  */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\n  * Get the background fill style for the text.\n  * @return {import(\"./Fill.js\").default} Fill style.\n  * @api\n  */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\n  * Get the background stroke style for the text.\n  * @return {import(\"./Stroke.js\").default} Stroke style.\n  * @api\n  */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\n  * Get the padding for the text.\n  * @return {Array<number>} Padding.\n  * @api\n  */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\n  * Set the `overflow` property.\n  *\n  * @param {boolean} overflow Let text overflow the path that it follows.\n  * @api\n  */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\n  * Set the font.\n  *\n  * @param {string|undefined} font Font.\n  * @api\n  */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\n  * Set the maximum angle between adjacent characters.\n  *\n  * @param {number} maxAngle Angle in radians.\n  * @api\n  */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\n  * Set the x offset.\n  *\n  * @param {number} offsetX Horizontal text offset.\n  * @api\n  */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\n  * Set the y offset.\n  *\n  * @param {number} offsetY Vertical text offset.\n  * @api\n  */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\n  * Set the text placement.\n  *\n  * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n  * @api\n  */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\n  * Set the fill.\n  *\n  * @param {import(\"./Fill.js\").default} fill Fill style.\n  * @api\n  */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n  * Set the rotation.\n  *\n  * @param {number|undefined} rotation Rotation.\n  * @api\n  */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n  * Set the scale.\n  *\n  * @param {number|undefined} scale Scale.\n  * @api\n  */\n  setScale(scale) {\n    this.scale_ = scale;\n  }\n\n  /**\n  * Set the stroke.\n  *\n  * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n  * @api\n  */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n  * Set the text.\n  *\n  * @param {string|undefined} text Text.\n  * @api\n  */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n  * Set the text alignment.\n  *\n  * @param {string|undefined} textAlign Text align.\n  * @api\n  */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\n  * Set the text baseline.\n  *\n  * @param {string|undefined} textBaseline Text baseline.\n  * @api\n  */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\n  * Set the background fill.\n  *\n  * @param {import(\"./Fill.js\").default} fill Fill style.\n  * @api\n  */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\n  * Set the background stroke.\n  *\n  * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n  * @api\n  */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\n  * Set the padding (`[top, right, bottom, left]`).\n  *\n  * @param {!Array<number>} padding Padding.\n  * @api\n  */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\n\nexport default Text;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}