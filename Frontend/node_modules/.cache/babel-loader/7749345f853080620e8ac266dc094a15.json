{"ast":null,"code":"/**\n * @module ol/geom/MultiPoint\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /*@__PURE__*/function (SimpleGeometry) {\n  function MultiPoint(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n    } else {\n      this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */coordinates, opt_layout);\n    }\n  }\n  if (SimpleGeometry) MultiPoint.__proto__ = SimpleGeometry;\n  MultiPoint.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  MultiPoint.prototype.constructor = MultiPoint;\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  MultiPoint.prototype.appendPoint = function appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.clone = function clone() {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiPoint.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  };\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  MultiPoint.prototype.getPoint = function getPoint(index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  MultiPoint.prototype.getPoints = function getPoints() {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array<Point>} */\n    var points = [];\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPoint.prototype.getType = function getType() {\n    return GeometryType.MULTI_POINT;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPoint.prototype.intersectsExtent = function intersectsExtent(extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return MultiPoint;\n}(SimpleGeometry);\nexport default MultiPoint;","map":{"version":3,"names":["extend","closestSquaredDistanceXY","containsXY","GeometryType","Point","SimpleGeometry","deflateCoordinates","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","coordinates","opt_layout","call","Array","isArray","setFlatCoordinates","setCoordinates","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","MULTI_POINT","intersectsExtent","extent","setLayout"],"sources":["../../../src/ol/geom/MultiPoint.js"],"sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n    } else {\n      this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(this.flatCoordinates.slice(\n      index * this.stride, (index + 1) * this.stride), this.layout);\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_POINT;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default MultiPoint;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}