{"ast":null,"code":"/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { listenOnce, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nvar ImageTile = /*@__PURE__*/function (Tile) {\n  function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n    Tile.call(this, tileCoord, state, opt_options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n  }\n  if (Tile) ImageTile.__proto__ = Tile;\n  ImageTile.prototype = Object.create(Tile && Tile.prototype);\n  ImageTile.prototype.constructor = ImageTile;\n\n  /**\n   * @inheritDoc\n   */\n  ImageTile.prototype.disposeInternal = function disposeInternal() {\n    if (this.state == TileState.LOADING) {\n      this.unlistenImage_();\n      this.image_ = getBlankImage();\n    }\n    if (this.interimTile) {\n      this.interimTile.dispose();\n    }\n    this.state = TileState.ABORT;\n    this.changed();\n    Tile.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  ImageTile.prototype.getImage = function getImage() {\n    return this.image_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ImageTile.prototype.getKey = function getKey() {\n    return this.src_;\n  };\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  ImageTile.prototype.handleImageError_ = function handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  };\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  ImageTile.prototype.handleImageLoad_ = function handleImageLoad_() {\n    var image = /** @type {HTMLImageElement} */this.image_;\n    if (image.naturalWidth && image.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  ImageTile.prototype.load = function load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n      this.tileLoadFunction_(this, this.src_);\n    }\n  };\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  ImageTile.prototype.unlistenImage_ = function unlistenImage_() {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n  return ImageTile;\n}(Tile);\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  var ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\nexport default ImageTile;","map":{"version":3,"names":["Tile","TileState","createCanvasContext2D","listenOnce","unlistenByKey","EventType","ImageTile","tileCoord","state","src","crossOrigin","tileLoadFunction","opt_options","call","crossOrigin_","src_","image_","Image","imageListenerKeys_","tileLoadFunction_","disposeInternal","LOADING","unlistenImage_","getBlankImage","interimTile","dispose","ABORT","changed","prototype","getImage","getKey","handleImageError_","ERROR","handleImageLoad_","image","naturalWidth","naturalHeight","LOADED","EMPTY","load","IDLE","LOAD","forEach","ctx","fillStyle","fillRect","canvas"],"sources":["../../src/ol/ImageTile.js"],"sourcesContent":["/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\n\n\nclass ImageTile extends Tile {\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {TileState} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options=} opt_options Tile options.\n   */\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n\n    super(tileCoord, state, opt_options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {Array<import(\"./events.js\").EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    if (this.state == TileState.LOADING) {\n      this.unlistenImage_();\n      this.image_ = getBlankImage();\n    }\n    if (this.interimTile) {\n      this.interimTile.dispose();\n    }\n    this.state = TileState.ABORT;\n    this.changed();\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    const image = /** @type {HTMLImageElement} */ (this.image_);\n    if (image.naturalWidth && image.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.imageListenerKeys_ = [\n        listenOnce(this.image_, EventType.ERROR,\n          this.handleImageError_, this),\n        listenOnce(this.image_, EventType.LOAD,\n          this.handleImageLoad_, this)\n      ];\n      this.tileLoadFunction_(this, this.src_);\n    }\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  }\n}\n\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  const ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}