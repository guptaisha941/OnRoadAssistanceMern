{"ast":null,"code":"/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment } from '../../extent.js';\nimport { linearRingContainsXY, linearRingContainsExtent } from './contains.js';\nimport { forEach as forEachSegment } from './segments.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(flatCoordinates, offset, end, stride,\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n   * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n   * @return {boolean} `true` if the segment and the extent intersect,\n   *     `false` otherwise.\n   */\n  function (point1, point2) {\n    return intersectsSegment(extent, point1, point2);\n  });\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (var i = 1, ii = ends.length; i < ii; ++i) {\n    if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}","map":{"version":3,"names":["containsExtent","createEmpty","extendFlatCoordinates","intersects","intersectsSegment","linearRingContainsXY","linearRingContainsExtent","forEach","forEachSegment","intersectsLineString","flatCoordinates","offset","end","stride","extent","coordinatesExtent","point1","point2","intersectsLineStringArray","ends","i","ii","length","intersectsLinearRing","intersectsLinearRingArray","intersectsLinearRingMultiArray","endss"],"sources":["../../../../src/ol/geom/flat/intersectsextent.js"],"sourcesContent":["/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment} from '../../extent.js';\nimport {linearRingContainsXY, linearRingContainsExtent} from './contains.js';\nimport {forEach as forEachSegment} from './segments.js';\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(), flatCoordinates, offset, end, stride);\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] &&\n      coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] &&\n      coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(flatCoordinates, offset, end, stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function(point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    });\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (intersectsLineString(\n      flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n  if (intersectsLineString(\n    flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n  if (!intersectsLinearRing(\n    flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (intersectsLinearRingArray(\n      flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}