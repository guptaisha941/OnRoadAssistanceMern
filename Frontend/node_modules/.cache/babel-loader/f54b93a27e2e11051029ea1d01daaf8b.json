{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport { targetNotEditable } from '../events/condition.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nvar KeyboardZoom = /*@__PURE__*/function (Interaction) {\n  function KeyboardZoom(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n  if (Interaction) KeyboardZoom.__proto__ = Interaction;\n  KeyboardZoom.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardZoom.prototype.constructor = KeyboardZoom;\n  return KeyboardZoom;\n}(Interaction);\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardZoom}\n */\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n    var keyEvent = /** @type {KeyboardEvent} */mapBrowserEvent.originalEvent;\n    var charCode = keyEvent.charCode;\n    if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      var map = mapBrowserEvent.map;\n      var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n      var view = map.getView();\n      zoomByDelta(view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\nexport default KeyboardZoom;","map":{"version":3,"names":["EventType","targetNotEditable","Interaction","zoomByDelta","KeyboardZoom","opt_options","call","handleEvent","options","condition_","condition","delta_","delta","duration_","duration","undefined","prototype","constructor","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","preventDefault"],"sources":["../../../src/ol/interaction/KeyboardZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport {targetNotEditable} from '../events/condition.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleEvent: handleEvent\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n  }\n\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardZoom}\n */\nfunction handleEvent(mapBrowserEvent) {\n  let stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS) {\n    const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);\n    const charCode = keyEvent.charCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      const map = mapBrowserEvent.map;\n      const delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;\n      const view = map.getView();\n      zoomByDelta(view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardZoom;\n"],"mappings":"AAAA;;;AAGA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,SAAQC,iBAAiB,QAAO,wBAAwB;AACxD,OAAOC,WAAW,IAAGC,WAAW,QAAO,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;AA2BzD,IAAMC,YAAY,GAAoB,uBAAAF,WAAA;EAIpC,SAAAE,YAAWA,CAACC,WAAW,EAAE;IAEvBH,WAAA,CAAAI,IAAK,OAAC;MACJC,WAAW,EAAEA;KACd,CAAC;IAEF,IAAMC,OAAO,GAAGH,WAAW,GAAGA,WAAW,GAAG,EAAE;;;;;;IAM9C,IAAI,CAACI,UAAU,GAAGD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,GAAGT,iBAAiB;;;;;;IAM3E,IAAI,CAACU,MAAM,GAAGH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAG,CAAC;;;;;;IAM/C,IAAI,CAACC,SAAS,GAAGL,OAAO,CAACM,QAAQ,KAAKC,SAAS,GAAGP,OAAO,CAACM,QAAQ,GAAG,GAAG;;;;cAEzE,CAAAE,SAAA,CAAAC,WAAA,GAAAb,YAAA;;EA9BwBF,WAAA;;;;;;;;;;AA2C3B,SAASK,WAAWA,CAACW,eAAe,EAAE;EACpC,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAID,eAAe,CAACE,IAAI,IAAIpB,SAAS,CAACqB,OAAO,IACzCH,eAAe,CAACE,IAAI,IAAIpB,SAAS,CAACsB,QAAQ,EAAE;IAC9C,IAAMC,QAAQ,+BAAiCL,eAAe,CAACM,aAAc;IAC7E,IAAMC,QAAQ,GAAGF,QAAQ,CAACE,QAAQ;IAClC,IAAI,IAAI,CAAChB,UAAU,CAACS,eAAe,CAAC,KAC/BO,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,IAAID,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;MACpE,IAAMC,GAAG,GAAGT,eAAe,CAACS,GAAG;MAC/B,IAAMf,KAAK,GAAIa,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,GAAI,IAAI,CAACf,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;MAC1E,IAAMiB,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;MAC1B1B,WAAW,CAACyB,IAAI,EAAEhB,KAAK,EAAEG,SAAS,EAAE,IAAI,CAACF,SAAS,CAAC;MACnDK,eAAe,CAACY,cAAc,EAAE;MAChCX,SAAS,GAAG,IAAI;;;EAGpB,OAAO,CAACA,SAAS;;AAGnB,eAAef,YAAY"},"metadata":{},"sourceType":"module"}