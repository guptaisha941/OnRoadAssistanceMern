{"ast":null,"code":"var _jsxFileName = \"D:\\\\demo_one\\\\react-website-v1\\\\src\\\\components\\\\pages\\\\MapWithLocation.js\";\n// import React, { useEffect, useState } from \"react\";\n// import Map from \"ol/Map\";\n// import View from \"ol/View\";\n// import TileLayer from \"ol/layer/Tile\";\n// import OSM from \"ol/source/OSM\";\n// import Feature from \"ol/Feature\";\n// import Point from \"ol/geom/Point\";\n// import { fromLonLat } from \"ol/proj\";\n// import VectorLayer from \"ol/layer/Vector\";\n// import VectorSource from \"ol/source/Vector\";\n// // import { Icon } from 'ol/style';\n// import { Icon, Style } from 'ol/style';  // Import Style and Icon from ol/style\n\n// const MapWithLocation = () => {\n//   const [map, setMap] = useState(null);\n\n//   useEffect(() => {\n//     const initialMap = new Map({\n//       target: \"map-container\",\n//       layers: [\n//         new TileLayer({\n//           source: new OSM(),\n//         }),\n//       ],\n//       view: new View({\n//         center: fromLonLat([0, 0]),\n//         zoom: 2,\n//       }),\n//     });\n//     setMap(initialMap);\n//   }, []);\n\n//   useEffect(() => {\n//     if (map) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const longitude = position.coords.longitude;\n//           const latitude = position.coords.latitude;\n\n//           // Create a marker for your location\n//           const marker = new Feature({\n//             geometry: new Point(fromLonLat([longitude, latitude])),\n//           });\n\n//           // Create a new style for the marker using IconStyle\n//           const iconStyle = new Style({\n//             image: new Icon({\n//               src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\n//             }),\n//           });\n\n//           // Create a vector source and add the marker feature to it\n//           const vectorSource = new VectorSource({\n//             features: [marker],\n//           });\n//           marker.setStyle(iconStyle);\n\n//           // Add the vector layer to the map\n//           const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//           });\n//           map.addLayer(vectorLayer);\n\n//           // Set the view to your location\n//           map.getView().setCenter(fromLonLat([longitude, latitude]));\n//           map.getView().setZoom(15);\n//         },\n//         (error) => {\n//           console.error(error);\n//         }\n//       );\n//     }\n//   }, [map]);\n\n//   return <div id=\"map-container\" style={{ height: \"500px\" }}></div>;\n// };\n\n// export default MapWithLocation;\n\n// *********************************OPEN LAYERS CODE********************************************************\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nclass MyMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLocation: {\n        lat: null,\n        lng: null\n      }\n    };\n  }\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          currentLocation: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        });\n      }, error => {\n        console.log(error);\n      });\n    } else {\n      console.log('Geolocation not supported.');\n    }\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      initialCenter: this.state.currentLocation,\n      zoom: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    });\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC_9cAGZnlvSGLKRUMCxIgteTpaMvE83oY'\n})(MyMap);\nReactDOM.render( /*#__PURE__*/React.createElement(MyMap, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","Map","GoogleApiWrapper","MyMap","Component","constructor","props","state","currentLocation","lat","lng","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","console","log","render","createElement","google","initialCenter","zoom","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","apiKey","document","getElementById"],"sources":["D:/demo_one/react-website-v1/src/components/pages/MapWithLocation.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import Map from \"ol/Map\";\r\n// import View from \"ol/View\";\r\n// import TileLayer from \"ol/layer/Tile\";\r\n// import OSM from \"ol/source/OSM\";\r\n// import Feature from \"ol/Feature\";\r\n// import Point from \"ol/geom/Point\";\r\n// import { fromLonLat } from \"ol/proj\";\r\n// import VectorLayer from \"ol/layer/Vector\";\r\n// import VectorSource from \"ol/source/Vector\";\r\n// // import { Icon } from 'ol/style';\r\n// import { Icon, Style } from 'ol/style';  // Import Style and Icon from ol/style\r\n\r\n// const MapWithLocation = () => {\r\n//   const [map, setMap] = useState(null);\r\n  \r\n\r\n//   useEffect(() => {\r\n//     const initialMap = new Map({\r\n//       target: \"map-container\",\r\n//       layers: [\r\n//         new TileLayer({\r\n//           source: new OSM(),\r\n//         }),\r\n//       ],\r\n//       view: new View({\r\n//         center: fromLonLat([0, 0]),\r\n//         zoom: 2,\r\n//       }),\r\n//     });\r\n//     setMap(initialMap);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (map) {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           const longitude = position.coords.longitude;\r\n//           const latitude = position.coords.latitude;\r\n\r\n//           // Create a marker for your location\r\n//           const marker = new Feature({\r\n//             geometry: new Point(fromLonLat([longitude, latitude])),\r\n//           });\r\n\r\n//           // Create a new style for the marker using IconStyle\r\n//           const iconStyle = new Style({\r\n//             image: new Icon({\r\n//               src: \"https://openlayers.org/en/latest/examples/data/icon.png\",\r\n//             }),\r\n//           });\r\n\r\n//           // Create a vector source and add the marker feature to it\r\n//           const vectorSource = new VectorSource({\r\n//             features: [marker],\r\n//           });\r\n//           marker.setStyle(iconStyle);\r\n\r\n//           // Add the vector layer to the map\r\n//           const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//           });\r\n//           map.addLayer(vectorLayer);\r\n\r\n//           // Set the view to your location\r\n//           map.getView().setCenter(fromLonLat([longitude, latitude]));\r\n//           map.getView().setZoom(15);\r\n//         },\r\n//         (error) => {\r\n//           console.error(error);\r\n//         }\r\n//       );\r\n//     }\r\n//   }, [map]);\r\n\r\n\r\n//   return <div id=\"map-container\" style={{ height: \"500px\" }}></div>;\r\n// };\r\n\r\n// export default MapWithLocation;\r\n\r\n// *********************************OPEN LAYERS CODE********************************************************\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nclass MyMap extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentLocation: {\r\n        lat: null,\r\n        lng: null\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude\r\n            }\r\n          });\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else {\r\n      console.log('Geolocation not supported.');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        initialCenter={this.state.currentLocation}\r\n        zoom={14}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyC_9cAGZnlvSGLKRUMCxIgteTpaMvE83oY'\r\n})(MyMap);\r\n\r\nReactDOM.render(<MyMap />, document.getElementById('root'));\r\n\r\n\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,GAAG,EAAEC,gBAAgB,QAAQ,mBAAmB;AAEzD,MAAMC,KAAK,SAASJ,KAAK,CAACK,SAAS,CAAC;EAClCC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,KAAK,GAAG;MACXC,eAAe,EAAE;QACfC,GAAG,EAAE,IAAI;QACTC,GAAG,EAAE;MACP;IACF,CAAC;EACH;EAEAC,iBAAiBA,CAAA,EAAG;IAClB,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtCC,QAAQ,IAAI;QACV,IAAI,CAACC,QAAQ,CAAC;UACZR,eAAe,EAAE;YACfC,GAAG,EAAEM,QAAQ,CAACE,MAAM,CAACC,QAAQ;YAC7BR,GAAG,EAAEK,QAAQ,CAACE,MAAM,CAACE;UACvB;QACF,CAAC,CAAC;MACJ,CAAC,EACDC,KAAK,IAAI;QACPC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CACF;IACH,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C;EACF;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACExB,KAAA,CAAAyB,aAAA,CAACvB,GAAG;MACFwB,MAAM,EAAE,IAAI,CAACnB,KAAK,CAACmB,MAAO;MAC1BC,aAAa,EAAE,IAAI,CAACnB,KAAK,CAACC,eAAgB;MAC1CmB,IAAI,EAAE,EAAG;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EACT;EAEN;AACF;AAEA,eAAe/B,gBAAgB,CAAC;EAC9BgC,MAAM,EAAE;AACV,CAAC,CAAC,CAAC/B,KAAK,CAAC;AAETH,QAAQ,CAACuB,MAAM,eAACxB,KAAA,CAAAyB,aAAA,CAACrB,KAAK;EAAAyB,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,EAAG,EAAEE,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module"}