{"ast":null,"code":"/**\n * @module ol/interaction/Pointer\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Interaction from './Interaction.js';\nimport { getValues } from '../obj.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default)} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default)} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events,\n * also during a drag sequence (so during a drag sequence both the\n * `handleDragEvent` function and this function are called).\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nvar PointerInteraction = /*@__PURE__*/function (Interaction) {\n  function PointerInteraction(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Interaction.call( /** @type {import(\"./Interaction.js\").InteractionOptions} */this, options);\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {!Object<string, import(\"../pointer/PointerEvent.js\").default>}\n     * @private\n     */\n    this.trackedPointers_ = {};\n\n    /**\n     * @type {Array<import(\"../pointer/PointerEvent.js\").default>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n  if (Interaction) PointerInteraction.__proto__ = Interaction;\n  PointerInteraction.prototype = Object.create(Interaction && Interaction.prototype);\n  PointerInteraction.prototype.constructor = PointerInteraction;\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  PointerInteraction.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    return false;\n  };\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  PointerInteraction.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {};\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @override\n   * @api\n   */\n  PointerInteraction.prototype.handleEvent = function handleEvent(mapBrowserEvent) {\n    if (! /** @type {import(\"../MapBrowserPointerEvent.js\").default} */mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n    var stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        var handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        var handled = this.handleDownEvent(mapBrowserEvent);\n        if (handled) {\n          mapBrowserEvent.preventDefault();\n        }\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  };\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  PointerInteraction.prototype.handleMoveEvent = function handleMoveEvent(mapBrowserEvent) {};\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  PointerInteraction.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    return false;\n  };\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  PointerInteraction.prototype.stopDown = function stopDown(handled) {\n    return handled;\n  };\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  PointerInteraction.prototype.updateTrackedPointers_ = function updateTrackedPointers_(mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      var event = mapBrowserEvent.pointerEvent;\n      var id = event.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  };\n  return PointerInteraction;\n}(Interaction);\n\n/**\n * @param {Array<import(\"../pointer/PointerEvent.js\").default>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n\n/**\n * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN || type === MapBrowserEventType.POINTERDRAG || type === MapBrowserEventType.POINTERUP;\n}\nexport default PointerInteraction;","map":{"version":3,"names":["MapBrowserEventType","Interaction","getValues","PointerInteraction","opt_options","options","call","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","trackedPointers_","targetPointers","mapBrowserEvent","handleEvent","pointerEvent","stopEvent","updateTrackedPointers_","type","POINTERDRAG","POINTERUP","handledUp","length","POINTERDOWN","handled","preventDefault","POINTERMOVE","isPointerDraggingEvent","event","id","pointerId","toString","centroid","pointerEvents","clientX","clientY","i"],"sources":["../../../src/ol/interaction/Pointer.js"],"sourcesContent":["/**\n * @module ol/interaction/Pointer\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Interaction from './Interaction.js';\nimport {getValues} from '../obj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default)} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default)} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events,\n * also during a drag sequence (so during a drag sequence both the\n * `handleDragEvent` function and this function are called).\n * @property {function(import(\"../MapBrowserPointerEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super(/** @type {import(\"./Interaction.js\").InteractionOptions} */ (options));\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {!Object<string, import(\"../pointer/PointerEvent.js\").default>}\n     * @private\n     */\n    this.trackedPointers_ = {};\n\n    /**\n     * @type {Array<import(\"../pointer/PointerEvent.js\").default>}\n     * @protected\n     */\n    this.targetPointers = [];\n\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @override\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        if (handled) {\n          mapBrowserEvent.preventDefault();\n        }\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      const event = mapBrowserEvent.pointerEvent;\n\n      const id = event.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type ==\n          MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  }\n\n}\n\n\n/**\n * @param {Array<import(\"../pointer/PointerEvent.js\").default>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n\n\n/**\n * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  const type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN ||\n    type === MapBrowserEventType.POINTERDRAG ||\n    type === MapBrowserEventType.POINTERUP;\n}\n\n\nexport default PointerInteraction;\n"],"mappings":"AAAA;;;AAGA,OAAOA,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,SAAQC,SAAS,QAAO,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCnC,IAAMC,kBAAkB,GAAoB,uBAAAF,WAAA;EAI1C,SAAAE,kBAAWA,CAACC,WAAW,EAAE;IAEvB,IAAMC,OAAO,GAAGD,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9CH,WAAA,CAAAK,IAAK,oEAA+DD,OAAO,CAAE;IAE7E,IAAIA,OAAO,CAACE,eAAe,EAAE;MAC3B,IAAI,CAACA,eAAe,GAAGF,OAAO,CAACE,eAAe;;IAGhD,IAAIF,OAAO,CAACG,eAAe,EAAE;MAC3B,IAAI,CAACA,eAAe,GAAGH,OAAO,CAACG,eAAe;;IAGhD,IAAIH,OAAO,CAACI,eAAe,EAAE;MAC3B,IAAI,CAACA,eAAe,GAAGJ,OAAO,CAACI,eAAe;;IAGhD,IAAIJ,OAAO,CAACK,aAAa,EAAE;MACzB,IAAI,CAACA,aAAa,GAAGL,OAAO,CAACK,aAAa;;IAG5C,IAAIL,OAAO,CAACM,QAAQ,EAAE;MACpB,IAAI,CAACA,QAAQ,GAAGN,OAAO,CAACM,QAAQ;;;;;;;IAOlC,IAAI,CAACC,sBAAsB,GAAG,KAAK;;;;;;IAMnC,IAAI,CAACC,gBAAgB,GAAG,EAAE;;;;;;IAM1B,IAAI,CAACC,cAAc,GAAG,EAAE;;;;;;;;;;;;+BAU1BP,eAAA,YAAAA,gBAAgBQ,eAAe,EAAE;IAC/B,OAAO,KAAK;;;;;;;;+BAQdP,eAAA,YAAAA,gBAAgBO,eAAe,EAAE;;;;;;;;;+BASjCC,WAAA,YAAAA,YAAYD,eAAe,EAAE;IAC3B,IAAI,EAAC,6DAAgEA,eAAe,CAAEE,YAAa,EAAE;MACnG,OAAO,IAAI;;IAGb,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAI,CAACC,sBAAsB,CAACJ,eAAe,CAAC;IAC5C,IAAI,IAAI,CAACH,sBAAsB,EAAE;MAC/B,IAAIG,eAAe,CAACK,IAAI,IAAIpB,mBAAmB,CAACqB,WAAW,EAAE;QAC3D,IAAI,CAACb,eAAe,CAACO,eAAe,CAAC;OACtC,MAAM,IAAIA,eAAe,CAACK,IAAI,IAAIpB,mBAAmB,CAACsB,SAAS,EAAE;QAChE,IAAMC,SAAS,GAAG,IAAI,CAACb,aAAa,CAACK,eAAe,CAAC;QACrD,IAAI,CAACH,sBAAsB,GAAGW,SAAS,IAAI,IAAI,CAACT,cAAc,CAACU,MAAM,GAAG,CAAC;;KAE5E,MAAM;MACL,IAAIT,eAAe,CAACK,IAAI,IAAIpB,mBAAmB,CAACyB,WAAW,EAAE;QAC3D,IAAMC,OAAO,GAAG,IAAI,CAACnB,eAAe,CAACQ,eAAe,CAAC;QACrD,IAAIW,OAAO,EAAE;UACXX,eAAe,CAACY,cAAc,EAAE;;QAElC,IAAI,CAACf,sBAAsB,GAAGc,OAAO;QACrCR,SAAS,GAAG,IAAI,CAACP,QAAQ,CAACe,OAAO,CAAC;OACnC,MAAM,IAAIX,eAAe,CAACK,IAAI,IAAIpB,mBAAmB,CAAC4B,WAAW,EAAE;QAClE,IAAI,CAACnB,eAAe,CAACM,eAAe,CAAC;;;IAGzC,OAAO,CAACG,SAAS;;;;;;;;+BAQnBT,eAAA,YAAAA,gBAAgBM,eAAe,EAAE;;;;;;;;+BAQjCL,aAAA,YAAAA,cAAcK,eAAe,EAAE;IAC7B,OAAO,KAAK;;;;;;;;;+BASdJ,QAAA,YAAAA,SAASe,OAAO,EAAE;IAChB,OAAOA,OAAO;;;;;;;+BAOhBP,sBAAA,YAAAA,uBAAuBJ,eAAe,EAAE;IACtC,IAAIc,sBAAsB,CAACd,eAAe,CAAC,EAAE;MAC3C,IAAMe,KAAK,GAAGf,eAAe,CAACE,YAAY;MAE1C,IAAMc,EAAE,GAAGD,KAAK,CAACE,SAAS,CAACC,QAAQ,EAAE;MACrC,IAAIlB,eAAe,CAACK,IAAI,IAAIpB,mBAAmB,CAACsB,SAAS,EAAE;QACzD,OAAO,IAAI,CAACT,gBAAgB,CAACkB,EAAE,CAAC;OACjC,MAAM,IAAIhB,eAAe,CAACK,IAAI,IAC3BpB,mBAAmB,CAACyB,WAAW,EAAE;QACnC,IAAI,CAACZ,gBAAgB,CAACkB,EAAE,CAAC,GAAGD,KAAK;OAClC,MAAM,IAAIC,EAAE,IAAI,IAAI,CAAClB,gBAAgB,EAAE;;QAEtC,IAAI,CAACA,gBAAgB,CAACkB,EAAE,CAAC,GAAGD,KAAK;;MAEnC,IAAI,CAAChB,cAAc,GAAGZ,SAAS,CAAC,IAAI,CAACW,gBAAgB,CAAC;;GAEzD;;EAtJ8BZ,WAAA;;;;;;AA+JjC,OAAO,SAASiC,QAAQA,CAACC,aAAa,EAAE;EACtC,IAAMX,MAAM,GAAGW,aAAa,CAACX,MAAM;EACnC,IAAIY,OAAO,GAAG,CAAC;EACf,IAAIC,OAAO,GAAG,CAAC;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,MAAM,EAAEc,CAAC,EAAE,EAAE;IAC/BF,OAAO,IAAID,aAAa,CAACG,CAAC,CAAC,CAACF,OAAO;IACnCC,OAAO,IAAIF,aAAa,CAACG,CAAC,CAAC,CAACD,OAAO;;EAErC,OAAO,CAACD,OAAO,GAAGZ,MAAM,EAAEa,OAAO,GAAGb,MAAM,CAAC;;;;;;;;AAS7C,SAASK,sBAAsBA,CAACd,eAAe,EAAE;EAC/C,IAAMK,IAAI,GAAGL,eAAe,CAACK,IAAI;EACjC,OAAOA,IAAI,KAAKpB,mBAAmB,CAACyB,WAAW,IAC7CL,IAAI,KAAKpB,mBAAmB,CAACqB,WAAW,IACxCD,IAAI,KAAKpB,mBAAmB,CAACsB,SAAS;;AAI1C,eAAenB,kBAAkB"},"metadata":{},"sourceType":"module"}