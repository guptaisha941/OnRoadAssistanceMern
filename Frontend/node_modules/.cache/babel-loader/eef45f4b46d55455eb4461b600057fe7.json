{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { equals } from '../array.js';\nimport { equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment } from '../coordinate.js';\nimport { listen, unlisten } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { always, primaryAction, altKeyOnly, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer, createOrUpdateFromCoordinate } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport { createEditingStyle } from '../style/Style.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport var ModifyEvent = /*@__PURE__*/function (Event) {\n  function ModifyEvent(type, features, mapBrowserPointerEvent) {\n    Event.call(this, type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n  }\n  if (Event) ModifyEvent.__proto__ = Event;\n  ModifyEvent.prototype = Object.create(Event && Event.prototype);\n  ModifyEvent.prototype.constructor = ModifyEvent;\n  return ModifyEvent;\n}(Event);\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /*@__PURE__*/function (PointerInteraction) {\n  function Modify(options) {\n    PointerInteraction.call( /** @type {import(\"./Pointer.js\").Options} */this, options);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default)>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n    var features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE, this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this);\n\n    /**\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n  }\n  if (PointerInteraction) Modify.__proto__ = PointerInteraction;\n  Modify.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Modify.prototype.constructor = Modify;\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.addFeature_ = function addFeature_(feature) {\n    var geometry = feature.getGeometry();\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n    var map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\n   * @private\n   */\n  Modify.prototype.willModifyFeatures_ = function willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeature_ = function removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features\n    // is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    unlisten(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_(feature) {\n    var rBush = this.rBush_;\n    var /** @type {Array<SegmentData>} */nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.setActive = function setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    PointerInteraction.prototype.setActive.call(this, active);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.setMap = function setMap(map) {\n    this.overlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Modify.prototype.getOverlay = function getOverlay() {\n    return this.overlay_;\n  };\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceAdd_ = function handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceRemove_ = function handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_(evt) {\n    this.addFeature_( /** @type {Feature} */evt.element);\n  };\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureChange_ = function handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      var feature = /** @type {Feature} */evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_(evt) {\n    var feature = /** @type {Feature} */evt.element;\n    this.removeFeature_(feature);\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePointGeometry_ = function writePointGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    var segmentData = /** @type {SegmentData} */{\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_(feature, geometry) {\n    var points = geometry.getCoordinates();\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      var segmentData = /** @type {SegmentData} */{\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData = /** @type {SegmentData} */{\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_(feature, geometry) {\n    var lines = geometry.getCoordinates();\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = /** @type {SegmentData} */{\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_(feature, geometry) {\n    var rings = geometry.getCoordinates();\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = /** @type {SegmentData} */{\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_(feature, geometry) {\n    var polygons = geometry.getCoordinates();\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          var segmentData = /** @type {SegmentData} */{\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_(feature, geometry) {\n    var coordinates = geometry.getCenter();\n    var centerSegmentData = /** @type {SegmentData} */{\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var circumferenceSegmentData = /** @type {SegmentData} */{\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_(feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0; i < geometries.length; ++i) {\n      this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n    }\n  };\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_(coordinates) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = /** @type {Point} */vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  };\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @override\n   */\n  Modify.prototype.handleEvent = function handleEvent(mapBrowserEvent) {\n    if (! /** @type {import(\"../MapBrowserPointerEvent.js\").default} */mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n    return PointerInteraction.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.handleDragEvent = function handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n    var vertex = evt.coordinate;\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var depth = segmentData.depth;\n      var geometry = segmentData.geometry;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.handleDownEvent = function handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    var vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      var insertVertices = [];\n      var geometry = /** @type {Point} */vertexFeature.getGeometry();\n      var vertex = geometry.getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.feature);\n        var depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n        } else if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        } else if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n        } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1]) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.handleUpEvent = function handleUpEvent(evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  };\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handlePointerMove_ = function handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  };\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @private\n   */\n  Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_(pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    var sortByDistance = function (a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) - pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n    var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate), map.getView().getResolution() * this.pixelTolerance_);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  Modify.prototype.insertVertex_ = function insertVertex_(segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = /** @type {number} */segmentData.index;\n    var coordinates;\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    var newSegmentData = /** @type {SegmentData} */{\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    var newSegmentData2 = /** @type {SegmentData} */{\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  Modify.prototype.removePoint = function removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  Modify.prototype.removeVertex_ = function removeVertex_() {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          var newSegmentData = /** @type {SegmentData} */{\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  };\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n  return Modify;\n}(PointerInteraction);\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\nexport default Modify;","map":{"version":3,"names":["getUid","Collection","CollectionEventType","Feature","MapBrowserEventType","equals","coordinatesEqual","distance","coordinateDistance","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","closestOnSegment","listen","unlisten","Event","EventType","always","primaryAction","altKeyOnly","singleClick","boundingExtent","buffer","createOrUpdateFromCoordinate","GeometryType","Point","PointerInteraction","VectorLayer","VectorSource","VectorEventType","RBush","createEditingStyle","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","type","features","mapBrowserPointerEvent","call","mapBrowserEvent","prototype","constructor","Modify","options","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","modified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","getFeatures","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","features_","forEach","addFeature_","bind","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","feature","geometry","getGeometry","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","handleFeatureChange_","willModifyFeatures_","evt","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getLength","getSource","removeFeature","rBush","nodesToRemove","node","push","i","length","remove","setActive","active","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","segment","insert","getExtent","points","ii","depth","index","slice","lines","j","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","geometries","getGeometriesArray","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","handleEvent","pointerEvent","handled","getView","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","POINT","MULTI_POINT","LINE_STRING","MULTI_LINE_STRING","POLYGON","MULTI_POLYGON","CIRCLE","setCenter","setRadius","setGeometryCoordinates_","handleDownEvent","pixel","pixelCoordinate","getCoordinateFromPixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","Array","closestVertex","closestOnSegmentData","insertVertex_","apply","handleUpEvent","update","sortByDistance","a","b","pointDistanceToSegmentDataSquared","box","getResolution","nodes","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","splice","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","segments","delta","forEachInExtent","pointCoordinates","circleGeometry","distanceToCenterSquared","distanceToCircumference","getRadius","getClosestPoint","resolution"],"sources":["../../../src/ol/interaction/Modify.js"],"sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {equals} from '../array.js';\nimport {equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment} from '../coordinate.js';\nimport {listen, unlisten} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {always, primaryAction, altKeyOnly, singleClick} from '../events/condition.js';\nimport {boundingExtent, buffer, createOrUpdateFromCoordinate} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserPointerEvent\n   * Associated {@link module:ol/MapBrowserPointerEvent}.\n   */\n  constructor(type, features, mapBrowserPointerEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function(mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ?\n      options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ?\n      options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default)>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    let features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD,\n      this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE,\n      this.handleFeatureRemove_, this);\n\n    /**\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    listen(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\n   * @private\n   */\n  willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(\n        ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features\n    // is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    unlisten(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    const /** @type {Array<SegmentData>} */ nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function(node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      });\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(/** @type {Feature} */ (evt.element));\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    const feature = /** @type {Feature} */ (evt.element);\n    this.removeFeature_(feature);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    const segmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    });\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n      const segmentData = /** @type {SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      });\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n      const segmentData = /** @type {SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      });\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData = /** @type {SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData = /** @type {SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n          const segmentData = /** @type {SegmentData} */ ({\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          });\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n    const centerSegmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    const circumferenceSegmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */ (this.overlay_.getSource()).addFeature(vertexFeature);\n    } else {\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() &&\n        mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n        !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n\n    const vertex = evt.coordinate;\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const depth = segmentData.depth;\n      const geometry = segmentData.geometry;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else { // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    const pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const insertVertices = [];\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      const vertex = geometry.getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.feature);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n        segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n        } else if (coordinatesEqual(segment[0], vertex) &&\n            !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        } else if (coordinatesEqual(segment[1], vertex) &&\n            !componentSegments[uid][1]) {\n\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() ===\n              GeometryType.LINE_STRING ||\n              segmentDataMatch.geometry.getType() ===\n              GeometryType.MULTI_LINE_STRING) &&\n              componentSegments[uid][0] &&\n              componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n        } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ &&\n            (!componentSegments[uid][0] && !componentSegments[uid][1])) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    const sortByDistance = function(a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -\n          pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n\n    const box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),\n      map.getView().getResolution() * this.pixelTolerance_);\n\n    const rBush = this.rBush_;\n    const nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      const node = nodes[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE &&\n        node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1]) ||\n                (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0])))) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = /** @type {number} */ (segmentData.index);\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    const newSegmentData = /** @type {SegmentData} */ ({\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    });\n    rTree.insert(boundingExtent(newSegmentData.segment),\n      newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    const newSegmentData2 = /** @type {SegmentData} */ ({\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    });\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n          /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          const newSegmentData = /** @type {SegmentData} */ ({\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          });\n          this.rBush_.insert(boundingExtent(newSegmentData.segment),\n            newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry &&\n          (depth === undefined || segmentDataMatch.depth === undefined ||\n          equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  }\n}\n\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    const circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const distanceToCenterSquared =\n            squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      const distanceToCircumference =\n            Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE &&\n  segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n\nexport default Modify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}